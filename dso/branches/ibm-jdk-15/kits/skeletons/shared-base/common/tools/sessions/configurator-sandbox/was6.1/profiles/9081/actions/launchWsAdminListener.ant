<project name="launchListener" default="launchListener" basedir=".">
    
    <taskdef name="wscmtlog"
        classname="com.ibm.ws.install.configmanager.actionengine.ant.utils.AntTaskToLogToConfigManagersLogFiles"/>
        
    <property name="NODE_NAME" value="${WS_CMT_NODE_NAME}"/>
    <property name="CELL_NAME" value="${WS_CMT_CELL_NAME}"/>
    <property name="serverName" value="dmgr"/>

    <target name="detectCurrentOSFamily"
            description="Detects the current OS family (UNIX or Windows)">
        
        <!-- OS/400 setting must come before the unix setting -->
        <condition property="currentOSFamily" value="os/400">
            <equals arg1="${os.name}" arg2="OS/400"/>
        </condition>

        <!-- z/OS setting must come before the unix setting -->
        <condition property="currentOSFamily" value="z/os">
            <os family="z/os"/>
        </condition>
        
        <condition property="currentOSFamily" value="windows">
            <os family="windows"/>
        </condition>
        
        <condition property="currentOSFamily" value="unix">            
            <os family="unix"/>
        </condition>
        
        <wscmtlog>Detected current OS family to be: ${currentOSFamily}</wscmtlog>
    </target>
    
    <target name="setOSFileSeparator"
            description="Sets the current file separator for this platform (file.separator is unreliable on ANT 1.5.4)">
            
        <condition property="separatorFile" value="/">
            <equals arg1="${currentOSFamily}" arg2="os/400"/>
        </condition>
        
        <condition property="separatorFile" value="/">
            <equals arg1="${currentOSFamily}" arg2="z/os"/>
        </condition>

        <condition property="separatorFile" value="/">
            <equals arg1="${currentOSFamily}" arg2="unix"/>
        </condition>
        
        <condition property="separatorFile" value="\">
            <equals arg1="${currentOSFamily}" arg2="windows"/>
        </condition>
    </target>

    <target name="defineOSSpecificConfigFlag"
            description="Defines either configUNIX or configWindows depending on the current OS">
            
        <condition property="configOS400" value="true">
            <equals arg1="${currentOSFamily}" arg2="os/400"/>
        </condition>
        
        <condition property="configZOS" value="true">
            <equals arg1="${currentOSFamily}" arg2="z/os"/>
        </condition>

        <condition property="configUNIX" value="true">
            <equals arg1="${currentOSFamily}" arg2="unix"/>
        </condition>
        
        <condition property="configWindows" value="true">
            <equals arg1="${currentOSFamily}" arg2="windows"/>
        </condition>
    </target>
    
    <target name="convertWASHomeToUNIXStylePath">
        <path id="id.was.home">
            <pathelement location="${WAS_HOME}"/>
        </path>
    
        <pathconvert targetos="unix" 
            property="WAS_HOME_UNIX_STYLE" 
            refid="id.was.home"/>
    </target>
        
    <target name="resolveLauncherExecutableForTheCurrentPlatform"
            description="Sets Listener to the WAS Java interpretor for the current platform">
            
        <condition property="LAUNCHER_EXECUTABLE" value="${WAS_HOME}/bin/launchWsadminListener">
            <equals arg1="${currentOSFamily}" arg2="os/400"/>
        </condition>

        <condition property="LAUNCHER_EXECUTABLE" value="${WAS_HOME}/bin/launchWsadminListener.sh">
            <equals arg1="${currentOSFamily}" arg2="z/os"/>
        </condition>
        
        <condition property="LAUNCHER_EXECUTABLE" value="${WAS_HOME}/bin/launchWsadminListener.sh">
            <equals arg1="${currentOSFamily}" arg2="unix"/>
        </condition>
        
        <condition property="LAUNCHER_EXECUTABLE" value="${WAS_HOME}/bin/launchWsadminListener.bat">
            <equals arg1="${currentOSFamily}" arg2="windows"/>
        </condition>
        
        <wscmtlog>wsadmin listener set to: ${LAUNCHER_EXECUTABLE}</wscmtlog>
    </target>

    <target name="spawnListener"
            description="Deploys the wsadmin listener">

        <wscmtlog>Deploying wsadmin listener the output will be recorded in: ${WS_CMT_LOG_HOME}/${profileName}/wsadminListener.log</wscmtlog>

        <wscmtlog>Listener will use file.encoding=${file.encoding}</wscmtlog>

        <wscmtlog>Listener will be listening on file: ${profilePath}/temp/wsadmin</wscmtlog>

        <exec executable="${LAUNCHER_EXECUTABLE}" spawn="true">
            <arg value="${profilePath}/temp/wsadmin"/>
            <arg value="${WS_CMT_LOG_HOME}/${profileName}/wsadminListener.log"/>
            <arg value="${file.encoding}"/>
            <env key="WAS_USER_SCRIPT" value="${profilePath}/bin/${setupCmdLineName}"/>
            <env key="PROFILE_CONFIG_ACTION" value="true"/>
        </exec>
    </target>



    <target name="resolveSetupCmdLineName">
        <available property="setupCmdLineName"
            value="setupCmdLine"
            file="${WAS_HOME}/bin/setupCmdLine"/>

        <available property="setupCmdLineName"
            value="setupCmdLine.bat"
            file="${WAS_HOME}/bin/setupCmdLine.bat"/>

        <available property="setupCmdLineName"
            value="setupCmdLine.sh"
            file="${WAS_HOME}/bin/setupCmdLine.sh"/>

        <wscmtlog>Detected setupCmdLine script name to be: ${setupCmdLineName}</wscmtlog>
    </target>

    <target name="launchListener"
        description="Configures filetransfer"
        depends="detectCurrentOSFamily,
            setOSFileSeparator,
            resolveSetupCmdLineName,           
            defineOSSpecificConfigFlag,
            convertWASHomeToUNIXStylePath,
            resolveLauncherExecutableForTheCurrentPlatform, 
            spawnListener"/>
</project>
