<project name="samplesInstallAndConfig" default="samplesInstallAndConfig" basedir=".">

    
    <taskdef name="wscmtlog" classname="com.ibm.ws.install.configmanager.actionengine.ant.utils.AntTaskToLogToConfigManagersLogFiles"/>

		<taskdef name="wsadmin" classname="com.ibm.websphere.ant.tasks.WsAdminInProcess"/>

    <property name="serverName" value="server1"/>

    <target name="zSetServerName"
            description="For z/OS only, set serverName to user provided value" if="isCurrentOSzOS">

         <property name="serverName" value="${serverName}"/>

    </target>

    <target name="detectCurrentOSFamily"
            description="Detects the current OS family (UNIX or Windows)">
        
        <!-- OS/400 setting must come before the unix setting -->
        <condition property="currentOSFamily" value="os/400">
            <equals arg1="${os.name}" arg2="OS/400"/>
        </condition>
        
        <!-- z/OS setting must come before the unix setting -->
        <condition property="currentOSFamily" value="z/os">
            <os family="z/os"/>
        </condition>

        <condition property="currentOSFamily" value="windows">
            <os family="windows"/>
        </condition>
        
        <condition property="currentOSFamily" value="unix">            
            <os family="unix"/>
        </condition>
        
        <wscmtlog>Detected current OS family to be: ${currentOSFamily}</wscmtlog>

    </target>
    

   <target name="setCurrentOSFamily"
            description="Sets the current OS family">
        
        <!-- OS/400 setting must come before the unix setting -->
        <condition property="isCurrentOSOS400" value="true">
            <equals arg1="${os.name}" arg2="OS/400"/>
        </condition>

        <!-- z/OS setting must come before the unix setting -->
        <condition property="isCurrentOSzOS" value="true">
            <os family="z/os"/>
        </condition>

        <condition property="isCurrentOSWindows" value="true">
            <os family="windows"/>
        </condition>
    
        <condition property="isCurrentOSUNIX" value="true">
            <os family="unix"/>
        </condition>
    </target>
    
     
    <target name="convertWASHomeToUNIXStylePath">
        <path id="id.was.home">
            <pathelement location="${WAS_HOME}"/>
        </path>
    
        <pathconvert targetos="unix" 
            property="WAS_HOME_UNIX_STYLE" 
            refid="id.was.home"/>
    </target>
    
  	<target name="defineSecurityFlag"
            description="Defines the security enablement">
            
        <condition property="secureSample" value="true">
        	<or>   
           <and>
           	<equals arg1="${enableAdminSecurity}" arg2="true"/>
           	<equals arg1="${useSAFSecurity}" arg2="false"/>
           	<equals arg1="${currentOSFamily}" arg2="z/os"/>
           </and>
           
           <and>
           	<equals arg1="${enableAdminSecurity}" arg2="true"/>
           	<not>
           		<equals arg1="${currentOSFamily}" arg2="z/os"/>
           	</not>
         	 </and>
        	</or>
        </condition>

    </target>

    <target name="configSamplesUserGroup"
            description="Config Samples User and Group"
            if="secureSample">
            
        <wscmtlog>Configuring samples, the output will be recorded in: ${WS_CMT_LOG_HOME}/${profileName}/samples_config_user.log</wscmtlog>
					
					<wsadmin conntype="none"
                  failonerror="true"
                  tracefile="${WS_CMT_LOG_HOME}/${profileName}/samples_config_user.log"
                  wasHome="${WAS_HOME}"
                  wasInstallRoot="${WAS_HOME}"
                  wasRepositoryRoot="${profilePath}/config"
                  userInstallRoot="${profilePath}"
                  localCell="${cellName}"
                  localNode="${nodeName}"
                  wsadminProps="${profilePath}/properties/wsadmin.properties"
                  ipcFilename="${profilePath}/temp/wsadmin"
                  >
                  <command value="$AdminTask addFileRegistryAccount {-userId samples -password ${samplesPassword}}"/>
          </wsadmin>   

        <wscmtlog>Configuring samples, the output will be recorded in: ${WS_CMT_LOG_HOME}/${profileName}/samples_config_group.log</wscmtlog>

					<wsadmin conntype="none"
                  failonerror="true"
                  tracefile="${WS_CMT_LOG_HOME}/${profileName}/samples_config_user.log"
                  wasHome="${WAS_HOME}"
                  wasInstallRoot="${WAS_HOME}"
                  wasRepositoryRoot="${profilePath}/config"
                  userInstallRoot="${profilePath}"
                  localCell="${cellName}"
                  localNode="${nodeName}"
                  wsadminProps="${profilePath}/properties/wsadmin.properties"
                  ipcFilename="${profilePath}/temp/wsadmin"
                  >
                  <command value="$AdminTask addFileRegistryGroup {-cn sampadmn}"/>
          </wsadmin>   
          
    </target>

    
		<target name="configSampleswithSecurity"
            description="Config Samples"
            if="secureSample">
            
        <wscmtlog>Configuring samples, the output will be recorded in: ${WS_CMT_LOG_HOME}/${profileName}/samples_config.log</wscmtlog>
            
        
        <wsadmin conntype="none"
                  failonerror="true"
                  tracefile="${WS_CMT_LOG_HOME}/${profileName}/samples_config.log"
                  wasHome="${WAS_HOME}"
                  wasInstallRoot="${WAS_HOME}"
                  wasRepositoryRoot="${profilePath}/config"
                  userInstallRoot="${profilePath}"
                  localCell="${cellName}"
                  localNode="${nodeName}"
                  wsadminProps="${profilePath}/properties/wsadmin.properties"
                  script="${WAS_HOME}/samples/bin/samplesMaster.jacl"
                  lang="jacl"                  
                  ipcFilename="${profilePath}/temp/wsadmin"
                  >
                  <arg value="-command"/>
            			<arg value="config"/>
            			<arg value="-cell"/>
            			<arg value="${cellName}"/>
            			<arg value="-node"/>
            			<arg value="${nodeName}"/>
            			<arg value="-server"/>
            			<arg value="${serverName}"/>
            			<arg value="-samplepw"/>
            			<arg value="${samplesPassword}"/>
            			<arg value="-samples"/>
            			<arg value="PlantsByWebSphere"/>
          </wsadmin> 
        
    </target> 
    
       
		<target name="configSamples"
            description="Config Samples"
            unless="secureSample">
            
        <wscmtlog>Configuring samples, the output will be recorded in: ${WS_CMT_LOG_HOME}/${profileName}/samples_config.log</wscmtlog>
            
        
        <wsadmin conntype="none"
                  failonerror="true"
                  tracefile="${WS_CMT_LOG_HOME}/${profileName}/samples_config.log"
                  wasHome="${WAS_HOME}"
                  wasInstallRoot="${WAS_HOME}"
                  wasRepositoryRoot="${profilePath}/config"
                  userInstallRoot="${profilePath}"
                  localCell="${cellName}"
                  localNode="${nodeName}"
                  wsadminProps="${profilePath}/properties/wsadmin.properties"
                  script="${WAS_HOME}/samples/bin/samplesMaster.jacl"
                  lang="jacl"                  
                  ipcFilename="${profilePath}/temp/wsadmin"
                  >
                  <arg value="-command"/>
            			<arg value="config"/>
            			<arg value="-cell"/>
            			<arg value="${cellName}"/>
            			<arg value="-node"/>
            			<arg value="${nodeName}"/>
            			<arg value="-server"/>
            			<arg value="${serverName}"/>
            			<arg value="-samples"/>
            			<arg value="PlantsByWebSphere"/>
          </wsadmin> 
        
    </target>        
		
		
		<target name="installSamples"
            description="Install Samples"
            >
            
        <wscmtlog>Installing samples EAR, the output will be recorded in: ${WS_CMT_LOG_HOME}/${profileName}/samples_install.log</wscmtlog>
    
        <wsadmin conntype="none"
                  failonerror="true"
                  tracefile="${WS_CMT_LOG_HOME}/${profileName}/samples_install.log"
                  wasHome="${WAS_HOME}"
                  wasInstallRoot="${WAS_HOME}"
                  wasRepositoryRoot="${profilePath}/config"
                  userInstallRoot="${profilePath}"
                  localCell="${cellName}"
                  localNode="${nodeName}"
                  wsadminProps="${profilePath}/properties/wsadmin.properties"
                  script="${WAS_HOME}/samples/bin/samplesMaster.jacl"
                  lang="jacl"                  
                  ipcFilename="${profilePath}/temp/wsadmin"
                  >
                  <arg value="-command"/>
            			<arg value="install"/>
            			<arg value="-cell"/>
            			<arg value="${cellName}"/>
            			<arg value="-node"/>
            			<arg value="${nodeName}"/>
            			<arg value="-server"/>
            			<arg value="${serverName}"/>
            			<arg value="-samples"/>
            			<arg value="SamplesGallery"/>
            			<arg value="PlantsByWebSphere"/>
       	</wsadmin>           
               
    </target>      
    
    <target name="copySamplesSource"
            unless="isCurrentOSzOS">
      <wscmtlog>Copying samples source code to ${profilePath}</wscmtlog>
      <copy todir="${profilePath}/samples/src">
        <fileset dir="${WAS_HOME}/samples/src"/>
      </copy>
    </target>
    
    <target name="samplesInstallAndConfig"
        description="Configures and installs Samples"
        depends="detectCurrentOSFamily,
            setCurrentOSFamily,
            zSetServerName,
            convertWASHomeToUNIXStylePath,
            defineSecurityFlag,
            configSamplesUserGroup,
            configSampleswithSecurity,
            configSamples,
            installSamples,
            copySamplesSource"/>
</project>
