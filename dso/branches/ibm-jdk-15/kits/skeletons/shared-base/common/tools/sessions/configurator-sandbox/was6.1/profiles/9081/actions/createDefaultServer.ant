<project name="createDefaultServer" default="createDefaultServer" basedir=".">
    
    <taskdef name="wscmtlog"
        classname="com.ibm.ws.install.configmanager.actionengine.ant.utils.AntTaskToLogToConfigManagersLogFiles"/>
        
		<taskdef name="wsadmin" classname="com.ibm.websphere.ant.tasks.WsAdminInProcess"/>        
    
    <property name="serverName" value="server1"/>

    <target name="zSetServerName"
            description="For z/OS only, set serverName to user provided value" if="isCurrentOSzOS">

         <property name="serverName" value="${serverName}"/>

    </target>

    <target name="setCreateServerCommand" 
            description="Sets the create server command to be executed"> 
             
        <condition property="createServerCommand" value="$AdminTask createApplicationServer ${nodeName} {-name ${serverName} -templateName DeveloperServer}">
		    <and>
	            <isset property="isDeveloperServer"/>
				<not>
		            	<isset property="isCurrentOSzOS"/>
		        </not>
			</and>
        </condition>
		
		<condition property="createServerCommand" value="$AdminTask createApplicationServer ${nodeName} {-name ${serverName} -specificShortName ${z.server.short.name} -genericShortName ${z.cluster.transition.name}}">
		    <and>
	            <not>
	            	<isset property="isDeveloperServer"/>
	            </not>
				<isset property="isCurrentOSzOS"/>
			</and>
        </condition>
		
        <condition property="createServerCommand" value="$AdminTask createApplicationServer ${nodeName} {-name ${serverName}}">
		    <and>
	            <not>
	            	<isset property="isDeveloperServer"/>
	            </not>
				<not>
	            	<isset property="isCurrentOSzOS"/>
	            </not>
			</and>
        </condition>
        <wscmtlog>createServerCommand is: ${createServerCommand}</wscmtlog>
    </target>

    <target name="detectCurrentOSFamily"
            description="Detects the current OS family (UNIX or Windows)">
        
        <!-- OS/400 setting must come before the unix setting -->
        <condition property="currentOSFamily" value="os/400">
            <equals arg1="${os.name}" arg2="OS/400"/>
        </condition>

       <!-- z/OS setting must come before the unix setting -->
        <condition property="currentOSFamily" value="z/os">
            <os family="z/os"/>
        </condition>
        
        <condition property="currentOSFamily" value="windows">
            <os family="windows"/>
        </condition>
        
        <condition property="currentOSFamily" value="unix">            
            <os family="unix"/>
        </condition>
        
        <wscmtlog>Detected current OS family to be: ${currentOSFamily}</wscmtlog>
    </target>
    
    <target name="setCurrentOSFamily"
            description="Sets the current OS Family">
        
        <!-- OS/400 setting must come before the unix setting -->
        <condition property="isCurrentOSOS400" value="true">
            <equals arg1="${os.name}" arg2="OS/400"/>
        </condition>

        <!-- z/OS setting must come before the unix setting -->
        <condition property="isCurrentOSzOS" value="true">
            <os family="z/os"/>
        </condition>
        
        <condition property="isCurrentOSWindows" value="true">
            <os family="windows"/>
        </condition>
        
        <condition property="isCurrentOSUNIX" value="true">
            <os family="unix"/>
        </condition>
    </target>
    
    <target name="runCreateDefaultServerConfigJACLScript"
            description="Runs the JACL script to create the default server">
            
        <wscmtlog>Create Default Server, the output will be recorded in: ${WS_CMT_LOG_HOME}/${profileName}/createDefaultServer.log</wscmtlog>
            
         <wsadmin conntype="none"
                 failonerror="true"
                 tracefile="${WS_CMT_LOG_HOME}/${profileName}/createDefaultServer.log"
                 appendTrace="true"
                 wasHome="${WAS_HOME}"
                 wasInstallRoot="${WAS_HOME}"
                 wasRepositoryRoot="${profilePath}/config"
                 userInstallRoot="${profilePath}"
                 localCell="${cellName}"
                 localNode="${nodeName}"
                 wsadminProps="${profilePath}/properties/wsadmin.properties"
                 command="${createServerCommand}"
                 ipcFilename="${profilePath}/temp/wsadmin"
                 >
        </wsadmin>  
    </target>
    
    <target name="createDefaultServer"
        description="Creates the default server - ${serverName}"
        depends="detectCurrentOSFamily,
            setCurrentOSFamily,
            zSetServerName,
            setCreateServerCommand,
            runCreateDefaultServerConfigJACLScript"/>
</project>
