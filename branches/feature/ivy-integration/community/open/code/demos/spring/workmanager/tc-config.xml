<?xml version="1.0" encoding="UTF-8"?>

<tc:tc-config xmlns:tc="http://www.terracotta.org/config">
  <!-- Server is colocated with client and DSO is listening on
       default port (9510). -->
  <servers>
    <server name="localhost"/>
  </servers>

  <!-- Tell DSO where to put the generated client logs
       See the Terracotta DSO Guide for additional information. -->
  <clients>
    <logs>%(user.home)/terracotta/workmanager/client-logs</logs>
  </clients>

  <application>
    <!-- See the Terracotta Spring Guide for more details of the the <spring/> 
         section of the tc-config file -->
    <spring>
      <!-- Tell DSO about the webapp we're sharing -->
      <jee-application name="*">
        <application-contexts>
          <application-context>
            <!-- Tell DSO the location of the bean definition file for this 
                 application context -->
            <paths>
              <path>*/work-manager.xml</path>
            </paths>
            <!-- Here we're telling DSO about the list of Spring beans that we
                 we wish to share -->
            <beans>
              <bean name="queue" />
            </beans>
          </application-context>
        </application-contexts>

        <!-- Our app requires these custom objects/classes to be shared - the following declarations
             tells DSO which ones they are. When the app runs under DSO, instances of these classes
             will broadcast changes in their state.

             A good idiom when writing an app that you intend to cluster via TC DSO, is to group the 
             classes you wish to share under a single package (although if you follow the MVC pattern
             this tends to happen naturally) - this way the list of classes you wish to instrument
             can be concise 


             Here, we say, instrument the 'demo.workmanager.TCWorkItem' and 
             'demo.workmanager.NumberedWork'  classes -->
        <instrumented-classes>
          <include>
            <class-expression>demo.workmanager.TCWorkItem</class-expression>
          </include>
          <include>
            <class-expression>demo.workmanager.NumberedWork</class-expression>
          </include>
        </instrumented-classes>

        <!-- These methods (originating from local objects) operates on objects declared as shared. This 
             section tells DSO to assume a lock on those objects for the duration of the call; essentially this
             section declares that all methods found for all classes found for all packages should assume the 
             behavior described -->
        <locks>
          <autolock>
            <method-expression>* demo.workmanager.TCWorkItem.setStatus(..)</method-expression>
            <lock-level>write</lock-level>
          </autolock>
        </locks>
      </jee-application>
    </spring>
  </application>
</tc:tc-config>
