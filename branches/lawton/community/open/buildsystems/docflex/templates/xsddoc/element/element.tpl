<DOCFLEX_TEMPLATE VER='1.7'>
CREATED='2005-04-26 03:31:00'
LAST_UPDATE='2006-10-09 06:34:49'
DESIGNER_TOOL='DocFlex SDK 1.0'
TEMPLATE_TYPE='DocumentTemplate'
DSM_TYPE_ID='xsddoc'
ROOT_ET='xs:%element'
<TEMPLATE_PARAMS>
	PARAM={
		param.name='nsURI';
		param.displayName='Target Namespace URI';
		param.type='string';
		param.defaultExpr='schema = getXMLDocument().findChild ("xs:schema");\nschema.getAttrStringValue("targetNamespace")';
		param.hidden='true';
	}
	PARAM={
		param.name='qualifiedName';
		param.description='The object representing the element\'s qualified name:\n<ol>\n<li>For global elements or local elements with qualified names,\nthis is the <code>QName</code> object (see Expr. Assistant | XML Functions | <code>QName()</code> function)</li>\n\n<li>For local elements with unqualified names, this will be just the element\'s name.</li>';
		param.type='string';
		param.defaultExpr='name = getAttrStringValue("name");\nnsURI = getStringParam("nsURI");\n\ninstanceOf ("xs:%localElement") ? \n{\n  ((form = getAttrStringValue("form")) == "") ? \n  {\n    schema = getXMLDocument().findChild ("xs:schema");\n    form = schema.getAttrStringValue ("elementFormDefault");\n  };\n\n  (form != "qualified") ? name : QName (nsURI, name)\n} \n: QName (nsURI, name)';
		param.hidden='true';
	}
	PARAM={
		param.name='usageMapKey';
		param.description='The key for "element-usage" map to find items associated with this element';
		param.type='object';
		param.defaultExpr='instanceOf ("xs:%localElement") && (type = getAttrStringValue("type")) != "" ? \n{\n  HashKey (\n    getStringParam("nsURI"),\n    getAttrStringValue("name"),\n    QName (type)\n  )\n} : contextElement.id';
	}
	PARAM={
		param.name='usageCount';
		param.description='number of locations where this element is used (by reference)\nor declared locally';
		param.type='int';
		param.defaultExpr='countElementsByKey (\n  "element-usage",\n  getParam("usageMapKey")\n)';
		param.hidden='true';
	}
	PARAM={
		param.name='contentMapKey';
		param.displayName='"content-attributes", "content-elements" map key';
		param.description='The key for "content-attributes" and "content-elements" maps to find items associated with this element';
		param.type='object';
		param.defaultExpr='(type = getAttrStringValue("type")) != "" \n  ? findElementByKey ("types", QName(type)).id\n  : contextElement.id';
		param.hidden='true';
	}
	PARAM={
		param.name='attributeCount';
		param.displayName='number of all attributes';
		param.description='total number of attributes declared for this component';
		param.type='int';
		param.defaultExpr='countElementsByKey (\n  "content-attributes", \n  getParam("contentMapKey"),\n  BooleanQuery (! instanceOf ("xs:anyAttribute"))\n)';
		param.hidden='true';
	}
	PARAM={
		param.name='elementCount';
		param.displayName='number of all content elements';
		param.description='total number of content elements declared for this component';
		param.type='int';
		param.defaultExpr='countElementsByKey (\n  "content-elements", \n  getParam("contentMapKey"),\n  BooleanQuery (! instanceOf ("xs:any"))\n)';
		param.hidden='true';
	}
	PARAM={
		param.name='ownAttributeCount';
		param.displayName='number of component\'s own attributes';
		param.description='number of attributes defined within this component';
		param.type='int';
		param.defaultExpr='countElementsByKey (\n  "content-attributes", \n  getParam("contentMapKey"),\n  BooleanQuery (\n    ! instanceOf ("xs:anyAttribute") &&\n    findPredecessorByType("xs:%element;xs:complexType;xs:attributeGroup").id \n    == rootElement.id\n  )\n)';
		param.hidden='true';
	}
	PARAM={
		param.name='ownElementCount';
		param.displayName='number of component\'s own content elements';
		param.description='number of content elements defined within this component';
		param.type='int';
		param.defaultExpr='countElementsByKey (\n  "content-elements", \n  getParam("contentMapKey"),\n  BooleanQuery (\n    ! instanceOf ("xs:any") &&\n    findPredecessorByType("xs:%element;xs:complexType;xs:group").id \n    == rootElement.id\n  )\n)';
		param.hidden='true';
	}
	PARAM={
		param.name='page.refs';
		param.displayName='Generate page references';
		param.type='boolean';
		param.boolean.default='true';
	}
	PARAM={
		param.name='doc.element.profile';
		param.displayName='Element Profile';
		param.type='boolean';
		param.boolean.default='true';
	}
	PARAM={
		param.name='doc.element.xmlRep';
		param.displayName='XML Representation Summary';
		param.type='boolean';
		param.boolean.default='true';
	}
	PARAM={
		param.name='doc.element.list.contentElements';
		param.displayName='List of Content Elements';
		param.type='boolean';
		param.boolean.default='true';
	}
	PARAM={
		param.name='doc.element.list.containingElements';
		param.displayName='List of Containing Elements';
		param.type='boolean';
		param.boolean.default='true';
	}
	PARAM={
		param.name='doc.element.list.usage';
		param.displayName='Usage / Definition Locations';
		param.type='boolean';
		param.boolean.default='true';
	}
	PARAM={
		param.name='doc.element.annotation';
		param.displayName='Annotation';
		param.type='boolean';
		param.boolean.default='true';
	}
	PARAM={
		param.name='doc.element.embeddedType';
		param.displayName='Embedded Type Detail';
		param.type='boolean';
		param.boolean.default='true';
	}
	PARAM={
		param.name='doc.element.xmlSource';
		param.displayName='XML Source';
		param.type='boolean';
		param.boolean.default='true';
	}
	PARAM={
		param.name='doc.element.attributes';
		param.displayName='Attribute Detail';
		param.type='boolean';
	}
	PARAM={
		param.name='doc.element.contentElements';
		param.displayName='Content Element Detail';
		param.type='boolean';
	}
	PARAM={
		param.name='sec.xmlSource.box.component';
		param.displayName='Components';
		param.type='boolean';
		param.boolean.default='true';
	}
</TEMPLATE_PARAMS>
<HTARGET>
	COND='instanceOf("xs:%topLevelElement") || getAttrValue("type") == ""'
	TARGET_KEYS={
		'contextElement.id';
		'"detail"';
	}
</HTARGET>
<HTARGET>
	COND='instanceOf("xs:%localElement") && getAttrValue("type") != ""'
	TARGET_KEYS={
		'getElementIds (findElementsByKey (\n  "element-usage",\n  getParam("usageMapKey")\n))',array;
		'"detail"';
	}
</HTARGET>
FMT={
	doc.lengthUnits='pt';
	doc.hlink.style.link='cs5';
}
<STYLES>
	CHAR_STYLE={
		style.name='Code';
		style.id='cs1';
		text.font.name='Courier New';
		text.font.size='9';
	}
	CHAR_STYLE={
		style.name='Code Smaller';
		style.id='cs2';
		text.font.name='Courier New';
		text.font.size='8';
	}
	CHAR_STYLE={
		style.name='Code Smallest';
		style.id='cs3';
		text.font.name='Courier New';
		text.font.size='7.5';
	}
	CHAR_STYLE={
		style.name='Default Paragraph Font';
		style.id='cs4';
		style.default='true';
	}
	PAR_STYLE={
		style.name='Detail Heading 1';
		style.id='s1';
		text.font.size='12';
		text.font.style.bold='true';
		par.bkgr.opaque='true';
		par.bkgr.color='#CCCCFF';
		par.border.style='solid';
		par.border.color='#666666';
		par.margin.top='14';
		par.margin.bottom='10';
		par.padding.left='2';
		par.padding.right='2';
		par.padding.top='2';
		par.padding.bottom='2';
		par.page.keepWithNext='true';
	}
	PAR_STYLE={
		style.name='Detail Heading 2';
		style.id='s2';
		text.font.size='10';
		text.font.style.bold='true';
		par.bkgr.opaque='true';
		par.bkgr.color='#EEEEFF';
		par.border.style='solid';
		par.border.color='#666666';
		par.margin.top='12';
		par.margin.bottom='8';
		par.padding.left='2';
		par.padding.right='2';
		par.padding.top='2';
		par.padding.bottom='2';
		par.page.keepWithNext='true';
	}
	PAR_STYLE={
		style.name='Detail Heading 3';
		style.id='s3';
		text.font.size='9';
		text.font.style.bold='true';
		text.font.style.italic='true';
		text.color.background='#CCCCFF';
		text.color.opaque='true';
		par.margin.top='10';
		par.margin.bottom='6';
	}
	CHAR_STYLE={
		style.name='Hyperlink';
		style.id='cs5';
		text.font.style.bold='false';
		text.decor.underline='true';
		text.color.foreground='#0000FF';
	}
	PAR_STYLE={
		style.name='Inset Heading 2';
		style.id='s4';
		text.font.size='9';
		text.font.style.bold='true';
		text.color.foreground='#990000';
		par.margin.bottom='6.8';
	}
	PAR_STYLE={
		style.name='List Heading 1';
		style.id='s5';
		text.font.name='Arial';
		text.font.size='10';
		text.font.style.bold='true';
		par.margin.top='12';
		par.margin.bottom='8';
	}
	PAR_STYLE={
		style.name='List Heading 2';
		style.id='s6';
		text.font.name='Arial';
		text.font.size='9';
		text.font.style.bold='true';
		par.margin.bottom='8';
	}
	PAR_STYLE={
		style.name='Main Heading';
		style.id='s7';
		text.font.name='Verdana';
		text.font.size='13';
		text.font.style.bold='true';
		text.color.foreground='#4477AA';
		par.bkgr.opaque='true';
		par.bkgr.color='#EEEEEE';
		par.border.style='solid';
		par.border.color='#4477AA';
		par.margin.top='0';
		par.margin.bottom='8';
		par.padding.left='5';
		par.padding.right='5';
		par.padding.top='3';
		par.padding.bottom='3';
		par.page.keepWithNext='true';
	}
	PAR_STYLE={
		style.name='Normal';
		style.id='s8';
		style.default='true';
	}
	CHAR_STYLE={
		style.name='Normal Smaller';
		style.id='cs6';
		text.font.size='9';
	}
	CHAR_STYLE={
		style.name='Normal Smallest';
		style.id='cs7';
		text.font.size='8';
	}
	CHAR_STYLE={
		style.name='Page Header Font';
		style.id='cs8';
		text.font.name='Arial';
		text.font.style.italic='true';
	}
	CHAR_STYLE={
		style.name='Page Number Small';
		style.id='cs9';
		text.font.name='Courier New';
		text.font.size='8';
	}
	CHAR_STYLE={
		style.name='Property Text';
		style.id='cs10';
		text.font.name='Verdana';
		text.font.size='8';
		par.lineHeight='11';
	}
	PAR_STYLE={
		style.name='Property Title';
		style.id='s9';
		text.font.size='8';
		text.font.style.bold='true';
		par.lineHeight='11';
		par.margin.right='7';
	}
	PAR_STYLE={
		style.name='Property Value';
		style.id='s10';
		text.font.name='Verdana';
		text.font.size='8';
		par.lineHeight='11';
	}
	CHAR_STYLE={
		style.name='XML Source';
		style.id='cs11';
		text.font.name='Verdana';
		text.font.size='8';
	}
</STYLES>
<PAGE_HEADER>
	<AREA_SEC>
		FMT={
			text.style='cs8';
			table.cellpadding.both='0';
			table.border.style='none';
			table.border.bottom.style='solid';
		}
		<AREA>
			<CTRL_GROUP>
				FMT={
					par.border.bottom.style='solid';
				}
				<CTRLS>
					<DATA_CTRL>
						FORMULA='\'<\' + getParam("qualifiedName") + \'>\''
					</DATA_CTRL>
					<DATA_CTRL>
						FMT={
							text.font.size='9';
						}
						FORMULA='callStockSection("localElementExt")'
					</DATA_CTRL>
				</CTRLS>
			</CTRL_GROUP>
		</AREA>
	</AREA_SEC>
</PAGE_HEADER>
<ROOT>
	<AREA_SEC>
		FMT={
			par.style='s7';
		}
		<AREA>
			<CTRL_GROUP>
				<CTRLS>
					<LABEL>
						TEXT='element'
					</LABEL>
					<DATA_CTRL>
						FORMULA='\'<\' + getParam("qualifiedName") + \'>\''
					</DATA_CTRL>
				</CTRLS>
			</CTRL_GROUP>
		</AREA>
	</AREA_SEC>
	<TEMPLATE_CALL>
		DESCR='Element Profile'
		COND='getBooleanParam("doc.element.profile")'
		TEMPLATE_FILE='elementProfile.tpl'
		OUTPUT_TYPE='included'
		DSM_MODE='pass-current-model'
	</TEMPLATE_CALL>
	<TEMPLATE_CALL>
		DESCR='XML Representation Summary'
		COND='getBooleanParam("doc.element.xmlRep")'
		FMT={
			sec.spacing.before='12';
			sec.spacing.after='12';
		}
		TEMPLATE_FILE='../misc/xmlRep.tpl'
		OUTPUT_TYPE='included'
		DSM_MODE='pass-current-model'
	</TEMPLATE_CALL>
	<TEMPLATE_CALL>
		DESCR='List of Content Elements'
		COND='getBooleanParam("doc.element.list.contentElements")'
		TEMPLATE_FILE='contentElementList.tpl'
		PASSED_PARAMS={
			'caption','"May contain elements"';
			'key','key = (getAttrValue("type") != "")\n  ? findElementByKey ("types", getAttrQNameValue("type")).id \n  : contextElement.id;';
		}
		OUTPUT_TYPE='included'
		DSM_MODE='pass-current-model'
	</TEMPLATE_CALL>
	<FOLDER>
		DESCR='List of Containing Elements'
		COND='getBooleanParam("doc.element.list.containingElements") && \n{\n  key = ((type = getAttrStringValue("type")) != "") ? \n     HashKey (getAttrStringValue("name"), QName(type)) : contextElement.id;\n\n  e = findElementsByKey ("containing-elements", key);\n  e.hasNext() ? {\n    setVar ("containingElements", e.toVector());\n    true;\n  } : false\n}'
		COLLAPSED
		<BODY>
			<FOLDER>
				DESCR='if there are local elements, print everything as two column list, so the modifers will look more readable'
				COND='findElementByType (\n  getVar ("containingElements").toVector(),\n  "xs:%localElement"\n) != null'
				FMT={
					sec.indent.block='true';
				}
				INIT_EXPR='sortVector (\n  getVar ("containingElements").toVector(),\n  @el,\n  FlexQuery (callStockSection (el.toElement(), "Element Location"))\n)\n'
				<BODY>
					<AREA_SEC>
						FMT={
							sec.outputStyle='table';
							table.cellpadding.both='0';
							table.border.style='none';
						}
						<AREA>
							<CTRL_GROUP>
								FMT={
									trow.align.vert='Top';
								}
								<CTRLS>
									<SS_CALL_CTRL>
										FMT={
											ctrl.size.width='209.3';
											ctrl.size.height='17.3';
										}
										SS_NAME='Element List Column'
										PARAMS_EXPR='v = getVar ("containingElements").toVector();\nN = v.size();\n\nArray (\n  v.subVector (0, (N + 1) / 2),\n  N == 1\n)'
									</SS_CALL_CTRL>
									<SS_CALL_CTRL>
										FMT={
											ctrl.size.width='272.3';
											ctrl.size.height='17.3';
											tcell.padding.extra.left='12';
										}
										SS_NAME='Element List Column'
										PARAMS_EXPR='v = getVar ("containingElements").toVector();\n\nArray (\n  v.subVector ((v.size() + 1) / 2),\n  true\n)'
									</SS_CALL_CTRL>
								</CTRLS>
							</CTRL_GROUP>
						</AREA>
					</AREA_SEC>
				</BODY>
			</FOLDER>
			<ELEMENT_ITER>
				DESCR='otherwise, print the list as comma-delimited text flow'
				COND='sectionBlock.execSecNone'
				FMT={
					sec.outputStyle='text-par';
					sec.indent.block='true';
					txtfl.delimiter.type='text';
					txtfl.delimiter.text=', ';
				}
				TARGET_ET='xs:element'
				SCOPE='custom'
				ELEMENT_ENUM_EXPR='getVar ("containingElements").toEnum()'
				SORTING='by-expr'
				SORTING_KEY={expr='callStockSection("QName")',ascending}
				<BODY>
					<AREA_SEC>
						<AREA>
							<CTRL_GROUP>
								FMT={
									txtfl.delimiter.type='nbsp';
								}
								<CTRLS>
									<SS_CALL_CTRL>
										SS_NAME='QName'
									</SS_CALL_CTRL>
									<PANEL>
										COND='output.format.supportsPagination &&\ngetBooleanParam("page.refs") &&\nhyperTargetExists (Array (contextElement.id,  "detail"))'
										FMT={
											ctrl.size.width='159.8';
											text.style='cs9';
											txtfl.delimiter.type='none';
										}
										<AREA>
											<CTRL_GROUP>
												<CTRLS>
													<LABEL>
														TEXT='['
													</LABEL>
													<DATA_CTRL>
														FMT={
															ctrl.option.noHLinkFmt='true';
															text.hlink.fmt='none';
														}
														<DOC_HLINK>
															TARGET_KEYS={
																'contextElement.id';
																'"detail"';
															}
														</DOC_HLINK>
														DOCFIELD='page-htarget'
													</DATA_CTRL>
													<LABEL>
														TEXT=']'
													</LABEL>
												</CTRLS>
											</CTRL_GROUP>
										</AREA>
									</PANEL>
								</CTRLS>
							</CTRL_GROUP>
						</AREA>
					</AREA_SEC>
				</BODY>
			</ELEMENT_ITER>
		</BODY>
		<HEADER>
			<AREA_SEC>
				FMT={
					par.style='s5';
				}
				<AREA>
					<CTRL_GROUP>
						<CTRLS>
							<LABEL>
								TEXT='May be included in elements'
							</LABEL>
							<DATA_CTRL>
								FORMULA='"(" + getVar ("containingElements").toVector().size() + ")"'
							</DATA_CTRL>
							<DELIMITER>
								FMT={
									txtfl.delimiter.type='none';
								}
							</DELIMITER>
							<LABEL>
								TEXT=':'
							</LABEL>
						</CTRLS>
					</CTRL_GROUP>
				</AREA>
			</AREA_SEC>
		</HEADER>
	</FOLDER>
	<FOLDER>
		DESCR='Usage / Definition Locations'
		COND='getBooleanParam("doc.element.list.usage") &&\ngetIntParam("usageCount") > 0'
		<HTARGET>
			TARGET_KEYS={
				'contextElement.id';
				'"usage-locations"';
			}
		</HTARGET>
		COLLAPSED
		<BODY>
			<FOLDER>
				DESCR='case of global element'
				MATCHING_ET='xs:%topLevelElement'
				FMT={
					sec.outputStyle='list';
					list.item.margin.top='10';
					list.item.margin.bottom='10';
				}
				<BODY>
					<FOLDER>
						DESCR='within global complexTypes'
						COLLAPSED
						<BODY>
							<ELEMENT_ITER>
								FMT={
									sec.outputStyle='list';
									list.type='delimited';
								}
								TARGET_ET='xs:%element'
								SCOPE='custom'
								ELEMENT_ENUM_EXPR='findElementsByKey ("element-usage", getParam("usageMapKey"))'
								FILTER='findPredecessorByType("xs:%element;xs:complexType").instanceOf ("xs:complexType")'
								SORTING='by-expr'
								SORTING_KEY={expr='findPredecessorByType("xs:complexType").callStockSection("QName")',ascending,case_sensitive}
								<BODY>
									<AREA_SEC>
										<AREA>
											<CTRL_GROUP>
												FMT={
													txtfl.delimiter.type='nbsp';
												}
												<CTRLS>
													<SS_CALL_CTRL>
														SS_NAME='QName'
														PASSED_ELEMENT_EXPR='findPredecessorByType("xs:complexType")'
														PASSED_ELEMENT_MATCHING_ET='xs:complexType'
													</SS_CALL_CTRL>
													<PANEL>
														COND='! output.format.supportsPagination &&\n  hyperTargetExists (Array (contextElement.id, "usage"))'
														FMT={
															ctrl.size.width='69';
															txtfl.delimiter.type='none';
														}
														<AREA>
															<CTRL_GROUP>
																<CTRLS>
																	<LABEL>
																		TEXT='['
																	</LABEL>
																	<LABEL>
																		<DOC_HLINK>
																			TARGET_KEYS={
																				'contextElement.id';
																				'"usage"';
																			}
																		</DOC_HLINK>
																		TEXT='ref'
																	</LABEL>
																	<LABEL>
																		TEXT=']'
																	</LABEL>
																</CTRLS>
															</CTRL_GROUP>
														</AREA>
													</PANEL>
													<PANEL>
														COND='output.format.supportsPagination &&\ngetBooleanParam("page.refs") &&\nhyperTargetExists (Array (contextElement.id, "usage"))'
														FMT={
															ctrl.size.width='156';
															text.style='cs9';
															txtfl.delimiter.type='none';
														}
														<AREA>
															<CTRL_GROUP>
																<CTRLS>
																	<LABEL>
																		FMT={
																			text.style='cs2';
																		}
																		TEXT='['
																	</LABEL>
																	<DATA_CTRL>
																		FMT={
																			ctrl.option.noHLinkFmt='true';
																			text.style='cs2';
																			text.hlink.fmt='none';
																		}
																		<DOC_HLINK>
																			TARGET_KEYS={
																				'contextElement.id';
																				'"usage"';
																			}
																		</DOC_HLINK>
																		DOCFIELD='page-htarget'
																	</DATA_CTRL>
																	<LABEL>
																		FMT={
																			text.style='cs2';
																		}
																		TEXT=']'
																	</LABEL>
																</CTRLS>
															</CTRL_GROUP>
														</AREA>
													</PANEL>
												</CTRLS>
											</CTRL_GROUP>
										</AREA>
									</AREA_SEC>
								</BODY>
								<HEADER>
									<AREA_SEC>
										FMT={
											par.style='s6';
										}
										<HTARGET>
											TARGET_KEYS={
												'contextElement.id';
												'"usage-locations"';
											}
										</HTARGET>
										<AREA>
											<CTRL_GROUP>
												<CTRLS>
													<LABEL>
														TEXT='Within global complexTypes'
													</LABEL>
													<DATA_CTRL>
														FORMULA='"(" + iterator.numItems + ")"'
													</DATA_CTRL>
													<DELIMITER>
														FMT={
															txtfl.delimiter.type='none';
														}
													</DELIMITER>
													<LABEL>
														TEXT=':'
													</LABEL>
												</CTRLS>
											</CTRL_GROUP>
										</AREA>
									</AREA_SEC>
								</HEADER>
							</ELEMENT_ITER>
						</BODY>
					</FOLDER>
					<FOLDER>
						DESCR='within embedded complexTypes of elements'
						COLLAPSED
						<BODY>
							<ELEMENT_ITER>
								FMT={
									sec.outputStyle='list';
									list.type='delimited';
								}
								TARGET_ET='xs:%element'
								SCOPE='custom'
								ELEMENT_ENUM_EXPR='findElementsByKey ("element-usage", getParam("usageMapKey"))'
								FILTER='findPredecessorByType("xs:%element") != null'
								SORTING='by-expr'
								SORTING_KEY={expr='findPredecessorByType("xs:%element").callStockSection("Element Location")',ascending,case_sensitive}
								<BODY>
									<AREA_SEC>
										<AREA>
											<CTRL_GROUP>
												FMT={
													txtfl.delimiter.type='nbsp';
												}
												<CTRLS>
													<SS_CALL_CTRL>
														SS_NAME='Element Location'
														PASSED_ELEMENT_EXPR='findPredecessorByType("xs:%element")'
														PASSED_ELEMENT_MATCHING_ET='xs:%element'
													</SS_CALL_CTRL>
													<PANEL>
														COND='! output.format.supportsPagination &&\n  hyperTargetExists (Array (contextElement.id, "usage"))'
														FMT={
															ctrl.size.width='66';
															txtfl.delimiter.type='none';
														}
														<AREA>
															<CTRL_GROUP>
																<CTRLS>
																	<LABEL>
																		TEXT='['
																	</LABEL>
																	<LABEL>
																		<DOC_HLINK>
																			TARGET_KEYS={
																				'contextElement.id';
																				'"usage"';
																			}
																		</DOC_HLINK>
																		TEXT='ref'
																	</LABEL>
																	<LABEL>
																		TEXT=']'
																	</LABEL>
																</CTRLS>
															</CTRL_GROUP>
														</AREA>
													</PANEL>
													<PANEL>
														COND='output.format.supportsPagination &&\ngetBooleanParam("page.refs") &&\nhyperTargetExists (Array (contextElement.id, "usage"))'
														FMT={
															ctrl.size.width='154.5';
															text.style='cs9';
															txtfl.delimiter.type='none';
														}
														<AREA>
															<CTRL_GROUP>
																<CTRLS>
																	<LABEL>
																		TEXT='['
																	</LABEL>
																	<DATA_CTRL>
																		FMT={
																			ctrl.option.noHLinkFmt='true';
																			text.hlink.fmt='none';
																		}
																		<DOC_HLINK>
																			TARGET_KEYS={
																				'contextElement.id';
																				'"usage"';
																			}
																		</DOC_HLINK>
																		DOCFIELD='page-htarget'
																	</DATA_CTRL>
																	<LABEL>
																		TEXT=']'
																	</LABEL>
																</CTRLS>
															</CTRL_GROUP>
														</AREA>
													</PANEL>
												</CTRLS>
											</CTRL_GROUP>
										</AREA>
									</AREA_SEC>
								</BODY>
								<HEADER>
									<AREA_SEC>
										FMT={
											par.style='s6';
										}
										<HTARGET>
											TARGET_KEYS={
												'contextElement.id';
												'"usage-locations"';
											}
										</HTARGET>
										<AREA>
											<CTRL_GROUP>
												<CTRLS>
													<LABEL>
														TEXT='Within embedded complexTypes of elements'
													</LABEL>
													<DATA_CTRL>
														FORMULA='"(" + iterator.numItems + ")"'
													</DATA_CTRL>
													<DELIMITER>
														FMT={
															txtfl.delimiter.type='none';
														}
													</DELIMITER>
													<LABEL>
														TEXT=':'
													</LABEL>
												</CTRLS>
											</CTRL_GROUP>
										</AREA>
									</AREA_SEC>
								</HEADER>
							</ELEMENT_ITER>
						</BODY>
					</FOLDER>
					<FOLDER>
						DESCR='within groups'
						COLLAPSED
						<BODY>
							<ELEMENT_ITER>
								FMT={
									sec.outputStyle='list';
									list.type='delimited';
								}
								TARGET_ET='xs:%element'
								SCOPE='custom'
								ELEMENT_ENUM_EXPR='findElementsByKey ("element-usage", getParam("usageMapKey"))'
								FILTER='findPredecessorByType("xs:%element;xs:group").instanceOf ("xs:group")'
								SORTING='by-expr'
								SORTING_KEY={expr='findPredecessorByType("xs:group").callStockSection("QName")',ascending,case_sensitive}
								<BODY>
									<AREA_SEC>
										<AREA>
											<CTRL_GROUP>
												FMT={
													txtfl.delimiter.type='nbsp';
												}
												<CTRLS>
													<SS_CALL_CTRL>
														SS_NAME='QName'
														PASSED_ELEMENT_EXPR='findPredecessorByType("xs:group")'
														PASSED_ELEMENT_MATCHING_ET='xs:group'
													</SS_CALL_CTRL>
													<PANEL>
														COND='! output.format.supportsPagination &&\n  hyperTargetExists (Array (contextElement.id, "usage"))'
														FMT={
															ctrl.size.width='66';
															txtfl.delimiter.type='none';
														}
														<AREA>
															<CTRL_GROUP>
																<CTRLS>
																	<LABEL>
																		TEXT='['
																	</LABEL>
																	<LABEL>
																		<DOC_HLINK>
																			TARGET_KEYS={
																				'contextElement.id';
																				'"usage"';
																			}
																		</DOC_HLINK>
																		TEXT='ref'
																	</LABEL>
																	<LABEL>
																		TEXT=']'
																	</LABEL>
																</CTRLS>
															</CTRL_GROUP>
														</AREA>
													</PANEL>
													<PANEL>
														COND='output.format.supportsPagination &&\ngetBooleanParam("page.refs") &&\nhyperTargetExists (Array (contextElement.id, "usage"))'
														FMT={
															ctrl.size.width='154.5';
															text.style='cs9';
															txtfl.delimiter.type='none';
														}
														<AREA>
															<CTRL_GROUP>
																<CTRLS>
																	<LABEL>
																		TEXT='['
																	</LABEL>
																	<DATA_CTRL>
																		FMT={
																			ctrl.option.noHLinkFmt='true';
																			text.hlink.fmt='none';
																		}
																		<DOC_HLINK>
																			TARGET_KEYS={
																				'contextElement.id';
																				'"usage"';
																			}
																		</DOC_HLINK>
																		DOCFIELD='page-htarget'
																	</DATA_CTRL>
																	<LABEL>
																		TEXT=']'
																	</LABEL>
																</CTRLS>
															</CTRL_GROUP>
														</AREA>
													</PANEL>
												</CTRLS>
											</CTRL_GROUP>
										</AREA>
									</AREA_SEC>
								</BODY>
								<HEADER>
									<AREA_SEC>
										FMT={
											par.style='s6';
										}
										<HTARGET>
											TARGET_KEYS={
												'contextElement.id';
												'"usage-locations"';
											}
										</HTARGET>
										<AREA>
											<CTRL_GROUP>
												<CTRLS>
													<LABEL>
														TEXT='Within model groups'
													</LABEL>
													<DATA_CTRL>
														FORMULA='"(" + iterator.numItems + ")"'
													</DATA_CTRL>
													<DELIMITER>
														FMT={
															txtfl.delimiter.type='none';
														}
													</DELIMITER>
													<LABEL>
														TEXT=':'
													</LABEL>
												</CTRLS>
											</CTRL_GROUP>
										</AREA>
									</AREA_SEC>
								</HEADER>
							</ELEMENT_ITER>
						</BODY>
					</FOLDER>
				</BODY>
				<HEADER>
					<AREA_SEC>
						FMT={
							par.style='s2';
						}
						<AREA>
							<CTRL_GROUP>
								FMT={
									trow.bkgr.color='#CCCCFF';
								}
								<CTRLS>
									<LABEL>
										TEXT='Known Usage Locations'
									</LABEL>
								</CTRLS>
							</CTRL_GROUP>
						</AREA>
					</AREA_SEC>
				</HEADER>
			</FOLDER>
			<FOLDER>
				DESCR='case of local element'
				MATCHING_ET='xs:%localElement'
				FMT={
					sec.outputStyle='list';
					list.item.margin.top='10';
					list.item.margin.bottom='10';
				}
				<BODY>
					<FOLDER>
						DESCR='within global complexTypes'
						COLLAPSED
						<BODY>
							<ELEMENT_ITER>
								FMT={
									sec.outputStyle='list';
									list.type='delimited';
								}
								TARGET_ET='xs:%element'
								SCOPE='custom'
								ELEMENT_ENUM_EXPR='findElementsByKey ("element-usage", getParam("usageMapKey"))'
								FILTER='findPredecessorByType("xs:%element;xs:complexType").instanceOf ("xs:complexType")'
								SORTING='by-expr'
								SORTING_KEY={expr='findPredecessorByType("xs:complexType").callStockSection("QName")',ascending,case_sensitive}
								<BODY>
									<AREA_SEC>
										<AREA>
											<CTRL_GROUP>
												FMT={
													txtfl.delimiter.type='nbsp';
												}
												<CTRLS>
													<SS_CALL_CTRL>
														SS_NAME='QName'
														PASSED_ELEMENT_EXPR='findPredecessorByType("xs:complexType")'
														PASSED_ELEMENT_MATCHING_ET='xs:complexType'
													</SS_CALL_CTRL>
													<PANEL>
														COND='! output.format.supportsPagination &&\n  hyperTargetExists (Array (contextElement.id, "usage"))'
														FMT={
															ctrl.size.width='69.8';
															txtfl.delimiter.type='none';
														}
														<AREA>
															<CTRL_GROUP>
																<CTRLS>
																	<LABEL>
																		TEXT='['
																	</LABEL>
																	<LABEL>
																		<DOC_HLINK>
																			TARGET_KEYS={
																				'contextElement.id';
																				'"usage"';
																			}
																		</DOC_HLINK>
																		TEXT='def'
																	</LABEL>
																	<LABEL>
																		TEXT=']'
																	</LABEL>
																</CTRLS>
															</CTRL_GROUP>
														</AREA>
													</PANEL>
													<PANEL>
														COND='output.format.supportsPagination &&\ngetBooleanParam("page.refs") &&\nhyperTargetExists (Array (contextElement.id, "usage"))'
														FMT={
															ctrl.size.width='154.5';
															text.style='cs9';
															txtfl.delimiter.type='none';
														}
														<AREA>
															<CTRL_GROUP>
																<CTRLS>
																	<LABEL>
																		TEXT='['
																	</LABEL>
																	<DATA_CTRL>
																		FMT={
																			ctrl.option.noHLinkFmt='true';
																			text.hlink.fmt='none';
																		}
																		<DOC_HLINK>
																			TARGET_KEYS={
																				'contextElement.id';
																				'"usage"';
																			}
																		</DOC_HLINK>
																		DOCFIELD='page-htarget'
																	</DATA_CTRL>
																	<LABEL>
																		TEXT=']'
																	</LABEL>
																</CTRLS>
															</CTRL_GROUP>
														</AREA>
													</PANEL>
												</CTRLS>
											</CTRL_GROUP>
										</AREA>
									</AREA_SEC>
								</BODY>
								<HEADER>
									<AREA_SEC>
										FMT={
											par.style='s6';
										}
										<HTARGET>
											TARGET_KEYS={
												'contextElement.id';
												'"usage-locations"';
											}
										</HTARGET>
										<AREA>
											<CTRL_GROUP>
												<CTRLS>
													<LABEL>
														TEXT='Within global complexTypes'
													</LABEL>
													<DATA_CTRL>
														FORMULA='"(" + iterator.numItems + ")"'
													</DATA_CTRL>
													<DELIMITER>
														FMT={
															txtfl.delimiter.type='none';
														}
													</DELIMITER>
													<LABEL>
														TEXT=':'
													</LABEL>
												</CTRLS>
											</CTRL_GROUP>
										</AREA>
									</AREA_SEC>
								</HEADER>
							</ELEMENT_ITER>
						</BODY>
					</FOLDER>
					<FOLDER>
						DESCR='within embedded complexTypes of elements'
						COLLAPSED
						<BODY>
							<ELEMENT_ITER>
								FMT={
									sec.outputStyle='list';
									list.type='delimited';
								}
								TARGET_ET='xs:%element'
								SCOPE='custom'
								ELEMENT_ENUM_EXPR='findElementsByKey ("element-usage", getParam("usageMapKey"))'
								FILTER='findPredecessorByType("xs:%element") != null'
								SORTING='by-expr'
								SORTING_KEY={expr='findPredecessorByType("xs:%element").callStockSection("Element Location")',ascending,case_sensitive}
								<BODY>
									<AREA_SEC>
										<AREA>
											<CTRL_GROUP>
												FMT={
													txtfl.delimiter.type='nbsp';
												}
												<CTRLS>
													<SS_CALL_CTRL>
														SS_NAME='Element Location'
														PASSED_ELEMENT_EXPR='findPredecessorByType("xs:%element")'
														PASSED_ELEMENT_MATCHING_ET='xs:%element'
													</SS_CALL_CTRL>
													<PANEL>
														COND='! output.format.supportsPagination &&\n  hyperTargetExists (Array (contextElement.id, "usage"))'
														FMT={
															ctrl.size.width='72';
															txtfl.delimiter.type='none';
														}
														<AREA>
															<CTRL_GROUP>
																<CTRLS>
																	<LABEL>
																		TEXT='['
																	</LABEL>
																	<LABEL>
																		<DOC_HLINK>
																			TARGET_KEYS={
																				'contextElement.id';
																				'"usage"';
																			}
																		</DOC_HLINK>
																		TEXT='def'
																	</LABEL>
																	<LABEL>
																		TEXT=']'
																	</LABEL>
																</CTRLS>
															</CTRL_GROUP>
														</AREA>
													</PANEL>
													<PANEL>
														COND='output.format.supportsPagination &&\ngetBooleanParam("page.refs") &&\nhyperTargetExists (Array (contextElement.id, "usage"))'
														FMT={
															ctrl.size.width='165';
															text.style='cs9';
															txtfl.delimiter.type='none';
														}
														<AREA>
															<CTRL_GROUP>
																<CTRLS>
																	<LABEL>
																		TEXT='['
																	</LABEL>
																	<DATA_CTRL>
																		FMT={
																			ctrl.option.noHLinkFmt='true';
																			text.hlink.fmt='none';
																		}
																		<DOC_HLINK>
																			TARGET_KEYS={
																				'contextElement.id';
																				'"usage"';
																			}
																		</DOC_HLINK>
																		DOCFIELD='page-htarget'
																	</DATA_CTRL>
																	<LABEL>
																		TEXT=']'
																	</LABEL>
																</CTRLS>
															</CTRL_GROUP>
														</AREA>
													</PANEL>
												</CTRLS>
											</CTRL_GROUP>
										</AREA>
									</AREA_SEC>
								</BODY>
								<HEADER>
									<AREA_SEC>
										FMT={
											par.style='s6';
										}
										<HTARGET>
											TARGET_KEYS={
												'contextElement.id';
												'"usage-locations"';
											}
										</HTARGET>
										<AREA>
											<CTRL_GROUP>
												<CTRLS>
													<LABEL>
														TEXT='Within embedded complexTypes of elements'
													</LABEL>
													<DATA_CTRL>
														FORMULA='"(" + iterator.numItems + ")"'
													</DATA_CTRL>
													<DELIMITER>
														FMT={
															txtfl.delimiter.type='none';
														}
													</DELIMITER>
													<LABEL>
														TEXT=':'
													</LABEL>
												</CTRLS>
											</CTRL_GROUP>
										</AREA>
									</AREA_SEC>
								</HEADER>
							</ELEMENT_ITER>
						</BODY>
					</FOLDER>
					<FOLDER>
						DESCR='within groups'
						COLLAPSED
						<BODY>
							<ELEMENT_ITER>
								FMT={
									sec.outputStyle='list';
									list.type='delimited';
								}
								TARGET_ET='xs:%element'
								SCOPE='custom'
								ELEMENT_ENUM_EXPR='findElementsByKey ("element-usage", getParam("usageMapKey"))'
								FILTER='findPredecessorByType("xs:%element;xs:group").instanceOf ("xs:group")'
								SORTING='by-expr'
								SORTING_KEY={expr='findPredecessorByType("xs:group").callStockSection("QName")',ascending,case_sensitive}
								<BODY>
									<AREA_SEC>
										<AREA>
											<CTRL_GROUP>
												FMT={
													txtfl.delimiter.type='nbsp';
												}
												<CTRLS>
													<SS_CALL_CTRL>
														SS_NAME='QName'
														PASSED_ELEMENT_EXPR='findPredecessorByType("xs:group")'
														PASSED_ELEMENT_MATCHING_ET='xs:group'
													</SS_CALL_CTRL>
													<PANEL>
														COND='! output.format.supportsPagination &&\n  hyperTargetExists (Array (contextElement.id, "usage"))'
														FMT={
															ctrl.size.width='69';
															txtfl.delimiter.type='none';
														}
														<AREA>
															<CTRL_GROUP>
																<CTRLS>
																	<LABEL>
																		TEXT='['
																	</LABEL>
																	<LABEL>
																		<DOC_HLINK>
																			TARGET_KEYS={
																				'contextElement.id';
																				'"usage"';
																			}
																		</DOC_HLINK>
																		TEXT='def'
																	</LABEL>
																	<LABEL>
																		TEXT=']'
																	</LABEL>
																</CTRLS>
															</CTRL_GROUP>
														</AREA>
													</PANEL>
													<PANEL>
														COND='output.format.supportsPagination &&\ngetBooleanParam("page.refs") &&\nhyperTargetExists (Array (contextElement.id, "usage"))'
														FMT={
															ctrl.size.width='156.8';
															text.style='cs9';
															txtfl.delimiter.type='none';
														}
														<AREA>
															<CTRL_GROUP>
																<CTRLS>
																	<LABEL>
																		TEXT='['
																	</LABEL>
																	<DATA_CTRL>
																		FMT={
																			ctrl.option.noHLinkFmt='true';
																			text.hlink.fmt='none';
																		}
																		<DOC_HLINK>
																			TARGET_KEYS={
																				'contextElement.id';
																				'"usage"';
																			}
																		</DOC_HLINK>
																		DOCFIELD='page-htarget'
																	</DATA_CTRL>
																	<LABEL>
																		TEXT=']'
																	</LABEL>
																</CTRLS>
															</CTRL_GROUP>
														</AREA>
													</PANEL>
												</CTRLS>
											</CTRL_GROUP>
										</AREA>
									</AREA_SEC>
								</BODY>
								<HEADER>
									<AREA_SEC>
										FMT={
											par.style='s6';
										}
										<HTARGET>
											TARGET_KEYS={
												'contextElement.id';
												'"usage-locations"';
											}
										</HTARGET>
										<AREA>
											<CTRL_GROUP>
												<CTRLS>
													<LABEL>
														TEXT='Within model groups'
													</LABEL>
													<DATA_CTRL>
														FORMULA='"(" + iterator.numItems + ")"'
													</DATA_CTRL>
													<DELIMITER>
														FMT={
															txtfl.delimiter.type='none';
														}
													</DELIMITER>
													<LABEL>
														TEXT=':'
													</LABEL>
												</CTRLS>
											</CTRL_GROUP>
										</AREA>
									</AREA_SEC>
								</HEADER>
							</ELEMENT_ITER>
						</BODY>
					</FOLDER>
				</BODY>
				<HEADER>
					<AREA_SEC>
						FMT={
							par.style='s2';
						}
						<AREA>
							<CTRL_GROUP>
								FMT={
									trow.bkgr.color='#CCCCFF';
								}
								<CTRLS>
									<LABEL>
										TEXT='Usage / Definition Locations'
									</LABEL>
								</CTRLS>
							</CTRL_GROUP>
						</AREA>
					</AREA_SEC>
				</HEADER>
			</FOLDER>
		</BODY>
	</FOLDER>
	<FOLDER>
		DESCR='Annotation'
		COND='getBooleanParam("doc.element.annotation")'
		COLLAPSED
		<BODY>
			<TEMPLATE_CALL>
				FMT={
					text.style='cs6';
				}
				TEMPLATE_FILE='../misc/annotation.tpl'
				OUTPUT_TYPE='included'
				DSM_MODE='pass-current-model'
			</TEMPLATE_CALL>
		</BODY>
		<HEADER>
			<AREA_SEC>
				FMT={
					par.style='s2';
				}
				<AREA>
					<CTRL_GROUP>
						FMT={
							trow.bkgr.color='#CCCCFF';
						}
						<CTRLS>
							<LABEL>
								TEXT='Annotation'
							</LABEL>
						</CTRLS>
					</CTRL_GROUP>
				</AREA>
			</AREA_SEC>
		</HEADER>
	</FOLDER>
	<FOLDER>
		DESCR='EMBEDDED TYPE DETAIL'
		COND='getBooleanParam("doc.element.embeddedType")'
		CONTEXT_ELEMENT_EXPR='findChild("xs:complexType | xs:simpleType")'
		MATCHING_ETS={'xs:%complexType';'xs:%simpleType'}
		<HTARGET>
			TARGET_KEYS={
				'contextElement.id';
				'"detail"';
			}
		</HTARGET>
		COLLAPSED
		<BODY>
			<AREA_SEC>
				COND='instanceOf ("xs:%simpleType") ||\ngetValueByLPath (\n  "(xs:simpleContent | xs:complexContent) / (xs:extension | xs:restriction)/@base"\n) != null'
				FMT={
					sec.outputStyle='table';
					sec.spacing.before='10';
					sec.spacing.after='10';
					table.sizing='Relative';
					table.autofit='false';
					table.cellpadding.both='5';
					table.bkgr.color='#F5F5F5';
					table.border.style='solid';
					table.border.color='#999999';
					table.page.keepTogether='true';
					table.option.borderStylesInHTML='true';
				}
				<AREA>
					<CTRL_GROUP>
						<CTRLS>
							<TEMPLATE_CALL_CTRL>
								FMT={
									ctrl.size.width='499.5';
								}
								TEMPLATE_FILE='../type/derivationTree.tpl'
								OUTPUT_TYPE='included'
								DSM_MODE='pass-current-model'
							</TEMPLATE_CALL_CTRL>
						</CTRLS>
					</CTRL_GROUP>
				</AREA>
			</AREA_SEC>
			<TEMPLATE_CALL>
				FMT={
					text.style='cs6';
				}
				TEMPLATE_FILE='../misc/annotation.tpl'
				PASSED_PARAMS={
					'showHeading','true';
				}
				OUTPUT_TYPE='included'
				DSM_MODE='pass-current-model'
			</TEMPLATE_CALL>
			<TEMPLATE_CALL>
				DESCR='in case this type has a simple content, print details about its definition'
				FMT={
					sec.spacing.before='8';
				}
				TEMPLATE_FILE='../type/simpleContentDef.tpl'
				OUTPUT_TYPE='included'
				DSM_MODE='pass-current-model'
			</TEMPLATE_CALL>
		</BODY>
		<HEADER>
			<AREA_SEC>
				FMT={
					par.style='s1';
				}
				<AREA>
					<CTRL_GROUP>
						FMT={
							trow.bkgr.color='#CCCCFF';
						}
						<CTRLS>
							<LABEL>
								TEXT='Embedded Type Detail'
							</LABEL>
						</CTRLS>
					</CTRL_GROUP>
				</AREA>
			</AREA_SEC>
		</HEADER>
	</FOLDER>
	<FOLDER>
		DESCR='XML SOURCE -- only for a top-level element or local element with embedded type'
		COND='getBooleanParam("doc.element.xmlSource") &&\n(instanceOf("xs:%topLevelElement") || getAttrStringValue("type") == "")'
		<HTARGET>
			TARGET_KEYS={
				'contextElement.id';
				'"xml-source"';
			}
		</HTARGET>
		COLLAPSED
		<BODY>
			<AREA_SEC>
				COND='getBooleanParam("sec.xmlSource.box.component")'
				FMT={
					sec.outputStyle='table';
					table.sizing='Relative';
					table.autofit='false';
					table.cellpadding.both='5';
					table.bkgr.color='#F5F5F5';
					table.border.style='solid';
					table.border.color='#999999';
					table.option.borderStylesInHTML='true';
				}
				<AREA>
					<CTRL_GROUP>
						<CTRLS>
							<TEMPLATE_CALL_CTRL>
								FMT={
									ctrl.size.width='499.5';
									ctrl.size.height='17.3';
								}
								TEMPLATE_FILE='../misc/nodeSource.tpl'
								OUTPUT_TYPE='included'
								DSM_MODE='pass-current-model'
							</TEMPLATE_CALL_CTRL>
						</CTRLS>
					</CTRL_GROUP>
				</AREA>
			</AREA_SEC>
			<TEMPLATE_CALL>
				COND='! getBooleanParam("sec.xmlSource.box.component")'
				TEMPLATE_FILE='../misc/nodeSource.tpl'
				OUTPUT_TYPE='included'
				DSM_MODE='pass-current-model'
			</TEMPLATE_CALL>
		</BODY>
		<HEADER>
			<AREA_SEC>
				FMT={
					par.style='s1';
				}
				<AREA>
					<CTRL_GROUP>
						FMT={
							trow.bkgr.color='#CCCCFF';
						}
						<CTRLS>
							<LABEL>
								TEXT='XML Source'
							</LABEL>
						</CTRLS>
					</CTRL_GROUP>
				</AREA>
			</AREA_SEC>
		</HEADER>
	</FOLDER>
	<TEMPLATE_CALL>
		DESCR='ATTRIBUTE DETAIL'
		COND='getBooleanParam("doc.element.attributes")'
		TEMPLATE_FILE='../attribute/attributes.tpl'
		OUTPUT_TYPE='included'
		DSM_MODE='pass-current-model'
	</TEMPLATE_CALL>
	<TEMPLATE_CALL>
		DESCR='CONTENT ELEMENT DETAIL'
		COND='getBooleanParam("doc.element.contentElements")'
		TEMPLATE_FILE='contentElements.tpl'
		OUTPUT_TYPE='included'
		DSM_MODE='pass-current-model'
	</TEMPLATE_CALL>
	<TEMPLATE_CALL>
		DESCR='Bottom Message'
		COND='output.type == "document"'
		TEMPLATE_FILE='../about.tpl'
		OUTPUT_TYPE='included'
		DSM_MODE='pass-current-model'
	</TEMPLATE_CALL>
</ROOT>
<STOCK_SECTIONS>
	<ELEMENT_ITER>
		DESCR='params[0]: vector of column elements; \nparams[1]: true if this is the last part of the whole list (to avoid printing comma after last item)'
		FMT={
			sec.outputStyle='pars';
			txtfl.delimiter.type='text';
			txtfl.delimiter.text=', ';
			par.option.nowrap='true';
			list.style.type='none';
		}
		TARGET_ET='xs:%element'
		SCOPE='custom'
		ELEMENT_ENUM_EXPR='toEnum (stockSection.param)'
		SS_NAME='Element List Column'
		<BODY>
			<AREA_SEC>
				<AREA>
					<CTRL_GROUP>
						FMT={
							txtfl.delimiter.type='none';
						}
						<CTRLS>
							<SS_CALL_CTRL>
								SS_NAME='Element Location'
							</SS_CALL_CTRL>
							<PANEL>
								COND='output.format.supportsPagination &&\ngetBooleanParam("page.refs") &&\nhyperTargetExists (Array (contextElement.id,  "detail"))'
								FMT={
									ctrl.size.width='191.3';
								}
								<AREA>
									<CTRL_GROUP>
										<CTRLS>
											<DELIMITER>
												FMT={
													txtfl.delimiter.type='nbsp';
												}
											</DELIMITER>
											<LABEL>
												FMT={
													text.style='cs9';
												}
												TEXT='['
											</LABEL>
											<DATA_CTRL>
												FMT={
													ctrl.option.noHLinkFmt='true';
													text.style='cs9';
													text.hlink.fmt='none';
												}
												<DOC_HLINK>
													TARGET_KEYS={
														'contextElement.id';
														'"detail"';
													}
												</DOC_HLINK>
												DOCFIELD='page-htarget'
											</DATA_CTRL>
											<LABEL>
												FMT={
													text.style='cs9';
												}
												TEXT=']'
											</LABEL>
										</CTRLS>
									</CTRL_GROUP>
								</AREA>
							</PANEL>
							<LABEL>
								COND='! iterator.isLastItem ||\n! stockSection.params[1].toBoolean()'
								TEXT=','
							</LABEL>
						</CTRLS>
					</CTRL_GROUP>
				</AREA>
			</AREA_SEC>
		</BODY>
	</ELEMENT_ITER>
	<AREA_SEC>
		MATCHING_ET='xs:%element'
		FMT={
			sec.outputStyle='text-par';
			txtfl.delimiter.type='none';
		}
		SS_NAME='Element Location'
		<AREA>
			<CTRL_GROUP>
				<CTRLS>
					<SS_CALL_CTRL>
						SS_NAME='QName'
					</SS_CALL_CTRL>
					<SS_CALL_CTRL>
						SS_NAME='localElementExt'
					</SS_CALL_CTRL>
				</CTRLS>
			</CTRL_GROUP>
		</AREA>
	</AREA_SEC>
	<FOLDER>
		MATCHING_ET='xs:%localElement'
		SS_NAME='localElementExt'
		<BODY>
			<TEMPLATE_CALL>
				TEMPLATE_FILE='localElementExt.tpl'
				OUTPUT_TYPE='included'
				DSM_MODE='pass-current-model'
			</TEMPLATE_CALL>
		</BODY>
	</FOLDER>
	<FOLDER>
		MATCHING_ETS={'xs:%element';'xs:complexType';'xs:group'}
		SS_NAME='Location'
		<BODY>
			<AREA_SEC>
				MATCHING_ET='xs:%element'
				<AREA>
					<CTRL_GROUP>
						<CTRLS>
							<SS_CALL_CTRL>
								FMT={
									text.style='cs2';
								}
								SS_NAME='Element Location'
							</SS_CALL_CTRL>
							<LABEL>
								MATCHING_ET='xs:%element'
								TEXT='element'
							</LABEL>
						</CTRLS>
					</CTRL_GROUP>
				</AREA>
			</AREA_SEC>
			<AREA_SEC>
				MATCHING_ET='xs:complexType'
				<AREA>
					<CTRL_GROUP>
						<CTRLS>
							<SS_CALL_CTRL>
								FMT={
									text.style='cs2';
								}
								SS_NAME='QName'
							</SS_CALL_CTRL>
							<LABEL>
								TEXT='complexType'
							</LABEL>
						</CTRLS>
					</CTRL_GROUP>
				</AREA>
			</AREA_SEC>
			<AREA_SEC>
				MATCHING_ET='xs:group'
				<AREA>
					<CTRL_GROUP>
						<CTRLS>
							<SS_CALL_CTRL>
								FMT={
									text.style='cs2';
								}
								SS_NAME='QName'
							</SS_CALL_CTRL>
							<LABEL>
								TEXT='group'
							</LABEL>
						</CTRLS>
					</CTRL_GROUP>
				</AREA>
			</AREA_SEC>
		</BODY>
	</FOLDER>
	<AREA_SEC>
		FMT={
			par.option.nowrap='true';
		}
		SS_NAME='QName'
		<AREA>
			<CTRL_GROUP>
				<CTRLS>
					<DATA_CTRL>
						<DOC_HLINK>
							TARGET_KEYS={
								'contextElement.id';
								'"detail"';
							}
						</DOC_HLINK>
						FORMULA='name = getAttrStringValue("name");\n\nschema = getXMLDocument().findChild ("xs:schema");\nnsURI = schema.getAttrStringValue("targetNamespace");\n\ninstanceOf ("xs:%localElement") ? \n{\n  ((form = getAttrStringValue("form")) == "") ? {\n    form = schema.getAttrStringValue ("elementFormDefault");\n  };\n\n  (form != "qualified") ? name : QName (nsURI, name)\n} \n: QName (nsURI, name, Enum (rootElement, contextElement))'
					</DATA_CTRL>
				</CTRLS>
			</CTRL_GROUP>
		</AREA>
	</AREA_SEC>
</STOCK_SECTIONS>
CHECKSUM='FyHbeRIDV2WfuZcRcx+jWw'
</DOCFLEX_TEMPLATE>