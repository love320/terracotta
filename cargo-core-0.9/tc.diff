Index: containers/jboss/src/main/java/org/codehaus/cargo/container/jboss/JBossPropertySet.java
===================================================================
--- containers/jboss/src/main/java/org/codehaus/cargo/container/jboss/JBossPropertySet.java	(revision 1546)
+++ containers/jboss/src/main/java/org/codehaus/cargo/container/jboss/JBossPropertySet.java	(working copy)
@@ -30,4 +30,9 @@
      * The JBoss configuration selected. Examples of valid values: "default", "all", "minimal".
      */
     String CONFIGURATION = "cargo.jboss.configuration";
+    
+    /**
+     * Whether the JBoss Configuration should be clustered.
+     */
+    String CLUSTERED = "cargo.jboss.clustered";
 }
Index: containers/jboss/src/main/java/org/codehaus/cargo/container/jboss/JBossStandaloneLocalConfiguration.java
===================================================================
--- containers/jboss/src/main/java/org/codehaus/cargo/container/jboss/JBossStandaloneLocalConfiguration.java	(revision 1546)
+++ containers/jboss/src/main/java/org/codehaus/cargo/container/jboss/JBossStandaloneLocalConfiguration.java	(working copy)
@@ -258,6 +258,22 @@
         getAntUtils().addTokenToFilterChain(filterChain, "cargo.server.deploy.url",
             buffer.toString());
 
+        // Terracotta: setting jvmRoute
+        String[] jvmarg = getPropertyValue(GeneralPropertySet.JVMARGS).split("\\s");
+        String jvmroute = getPropertyValue(GeneralPropertySet.HOSTNAME);
+        for (int i = 0; i < jvmarg.length; i++) 
+        {
+            if (jvmarg[i].indexOf("jvmroute") >= 0) 
+            {
+                String[] tokens = jvmarg[i].split("=");
+                if (tokens.length == 2) 
+                {
+                    jvmroute = tokens[1];
+                }
+            }
+        }
+        getAntUtils().addTokenToFilterChain(filterChain, "jboss.jvmroute", jvmroute);
+        
         return filterChain;
     }
 
Index: containers/jboss/src/main/java/org/codehaus/cargo/container/jboss/JBoss42xInstalledLocalContainer.java
===================================================================
--- containers/jboss/src/main/java/org/codehaus/cargo/container/jboss/JBoss42xInstalledLocalContainer.java	(revision 0)
+++ containers/jboss/src/main/java/org/codehaus/cargo/container/jboss/JBoss42xInstalledLocalContainer.java	(revision 0)
@@ -0,0 +1,62 @@
+/*
+ * ========================================================================
+ * 
+ * Copyright 2005-2006 Vincent Massol.
+ * 
+ * Licensed under the Apache License, Version 2.0 (the "License"); you may not
+ * use this file except in compliance with the License. You may obtain a copy of
+ * the License at
+ * 
+ * http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
+ * License for the specific language governing permissions and limitations under
+ * the License.
+ * 
+ * ========================================================================
+ */
+package org.codehaus.cargo.container.jboss;
+
+import org.codehaus.cargo.container.configuration.LocalConfiguration;
+import org.codehaus.cargo.container.jboss.internal.AbstractJBossInstalledLocalContainer;
+/**
+ * JBoss 4.2.x series container implementation.
+ * 
+ * @version $Id$
+ */
+public class JBoss42xInstalledLocalContainer extends AbstractJBossInstalledLocalContainer
+{
+    /**
+     * JBoss 4.2.x series unique id.
+     */
+    public static final String ID = "jboss42x";
+
+    /**
+     * {@inheritDoc}
+     * @see AbstractJBossInstalledLocalContainer#AbstractJBossInstalledLocalContainer(org.codehaus.cargo.container.configuration.LocalConfiguration)
+     */
+    public JBoss42xInstalledLocalContainer(LocalConfiguration configuration)
+    {
+        super(configuration);
+    }
+
+    /**
+     * {@inheritDoc}
+     * @see org.codehaus.cargo.container.Container#getId()
+     */
+    public String getId()
+    {
+        return ID;
+    }
+
+    /**
+     * {@inheritDoc}
+     * @see org.codehaus.cargo.container.Container#getName()
+     */
+    public String getName()
+    {
+        return "JBoss " + getVersion("42x");
+    }
+}

Property changes on: containers/jboss/src/main/java/org/codehaus/cargo/container/jboss/JBoss42xInstalledLocalContainer.java
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:mime-type
   + text/x-java
Added: svn:keywords
   + Date Revision Author HeadURL Id
Added: svn:eol-style
   + native

Index: containers/jboss/src/main/java/org/codehaus/cargo/container/jboss/JBoss42xRemoteContainer.java
===================================================================
--- containers/jboss/src/main/java/org/codehaus/cargo/container/jboss/JBoss42xRemoteContainer.java	(revision 0)
+++ containers/jboss/src/main/java/org/codehaus/cargo/container/jboss/JBoss42xRemoteContainer.java	(revision 0)
@@ -0,0 +1,63 @@
+/* 
+ * ========================================================================
+ * 
+ * Copyright 2006 Vincent Massol.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * 
+ * ========================================================================
+ */
+package org.codehaus.cargo.container.jboss;
+
+import org.codehaus.cargo.container.configuration.RuntimeConfiguration;
+import org.codehaus.cargo.container.jboss.internal.AbstractJBossRemoteContainer;
+
+/**
+ * Special container support for wrapping a running instance of JBoss 4.2.x.
+ * 
+ * @version $Id$
+ */
+public class JBoss42xRemoteContainer extends AbstractJBossRemoteContainer
+{
+    /**
+     * Unique container id.
+     */
+    public static final String ID = "jboss42x";
+
+    /**
+     * {@inheritDoc}
+     * @see AbstractJBossRemoteContainer#AbstractJBossRemoteContainer(org.codehaus.cargo.container.configuration.RuntimeConfiguration)
+     */
+    public JBoss42xRemoteContainer(RuntimeConfiguration configuration)
+    {
+        super(configuration);
+    }
+
+    /**
+     * {@inheritDoc}
+     * @see org.codehaus.cargo.container.Container#getName()
+     */
+    public final String getName()
+    {
+        return "JBoss 4.2.x Remote";
+    }
+
+    /**
+     * {@inheritDoc}
+     * @see org.codehaus.cargo.container.Container#getId()
+     */
+    public final String getId()
+    {
+        return ID;
+    }
+}

Property changes on: containers/jboss/src/main/java/org/codehaus/cargo/container/jboss/JBoss42xRemoteContainer.java
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:mime-type
   + text/x-java
Added: svn:keywords
   + Date Revision Author HeadURL Id
Added: svn:eol-style
   + native

Index: containers/jboss/src/main/resources/org/codehaus/cargo/container/internal/resources/jboss3x/cargo-binding.xml
===================================================================
--- containers/jboss/src/main/resources/org/codehaus/cargo/container/internal/resources/jboss3x/cargo-binding.xml	(revision 1546)
+++ containers/jboss/src/main/resources/org/codehaus/cargo/container/internal/resources/jboss3x/cargo-binding.xml	(working copy)
@@ -1,223 +1,241 @@
-<service-bindings>
-
-   <!-- ********************************************************** -->
-   <!-- *                       cargo-binding                    * -->
-   <!-- ********************************************************** -->
-   <server name="cargo-binding">
-
-      <!-- ********************* jboss-service.xml ****************** -->
-
-      <service-config name="jboss:service=Naming"
-         delegateClass="org.jboss.services.binding.AttributeMappingDelegate"
-         >
-         <delegate-config portName="Port" hostName="BindAddress">
-            <attribute name="RmiPort">1298</attribute>
-         </delegate-config>
-         <binding port="@cargo.rmi.port@" host="${jboss.bind.address}"/>
-      </service-config>
-
-
-      <service-config name="jboss:service=WebService"
-         delegateClass="org.jboss.services.binding.AttributeMappingDelegate"
-         >
-         <delegate-config portName="Port"/>
-         <binding port="8283"/>
-      </service-config>
-
-
-      <service-config name="jboss:service=invoker,type=jrmp"
-         delegateClass="org.jboss.services.binding.AttributeMappingDelegate"
-         >
-         <delegate-config portName="RMIObjectPort"/>
-         <binding port="4644"/>
-      </service-config>
-
-
-      <service-config name="jboss:service=invoker,type=pooled"
-         delegateClass="org.jboss.services.binding.AttributeMappingDelegate"
-         >
-         <delegate-config portName="ServerBindPort"/>
-         <binding port="4645"/>
-      </service-config>
-
-
-      <!-- ********************* cluster-service.xml **************** -->
-
-      <service-config name="jboss:service=HAJNDI"
-         delegateClass="org.jboss.services.binding.AttributeMappingDelegate"
-         >
-         <delegate-config portName="RmiPort"/>
-         <binding port="1298"/>
-      </service-config>
-
-      <service-config name="jboss:service=HAJNDI"
-         delegateClass="org.jboss.services.binding.AttributeMappingDelegate"
-         >
-         <delegate-config portName="Port"/>
-         <binding port="1300"/>
-      </service-config>
-
-      <service-config name="jboss:service=invoker,type=jrmpha"
-         delegateClass="org.jboss.services.binding.AttributeMappingDelegate"
-         >
-         <delegate-config portName="RMIObjectPort"/>
-         <binding port="4644"/>
-      </service-config>
-
-
-      <!-- ********************* iiop-service.xml ****************** -->
-
-      <service-config name="jboss:service=CorbaORB"
-         delegateClass="org.jboss.services.binding.AttributeMappingDelegate"
-         >
-         <delegate-config portName="Port"/>
-         <binding port="3728"/>
-      </service-config>      
-   
-
-      <!-- ********************* jmx-rmi-adaptor.sar **************** -->
-
-      <service-config name="jboss.jmx:type=Connector,name=RMI"
-         delegateClass="org.jboss.services.binding.AttributeMappingDelegate"
-         >
-         <delegate-config portName="RMIObjectPort"/>
-         <binding port="19201"/>
-      </service-config>
-
-
-      <!-- ********************* snmp-adaptor.sar ****************** -->
-
-      <service-config name="jboss.jmx:name=SnmpAgent,service=trapd,type=logger"
-         delegateClass="org.jboss.services.binding.AttributeMappingDelegate"
-         >
-         <delegate-config portName="Port"/>
-         <binding port="1362"/>
-      </service-config>
-
-      <service-config name="jboss.jmx:name=SnmpAgent,service=snmp,type=adaptor"
-         delegateClass="org.jboss.services.binding.AttributeMappingDelegate"
-         >
-         <delegate-config portName="Port"/>
-         <binding port="1361"/>
-      </service-config>
-
-
-      <!-- ********************* jbossmq-service.xml **************** -->
-
-      <!-- JMS related services -->
-      <service-config name="jboss.mq:service=InvocationLayer,type=UIL2"
-         delegateClass="org.jboss.services.binding.AttributeMappingDelegate"
-         >
-         <delegate-config portName="ServerBindPort"/>
-         <binding port="8293"/>
-      </service-config>
-
-
-      <!-- ********************* hsqldb-ds.xml ********************** -->
-
-      <!-- Hypersonic related services
-      
-            Only if using TCP setup (local file setup by default)
-
-      <service-config name="jboss.jca:service=ManagedConnectionFactory,name=DefaultDS"
-         delegateClass="org.jboss.services.binding.XSLTConfigDelegate"
-      >
-         <delegate-config>
-         <xslt-config configName="ManagedConnectionFactoryProperties"><![CDATA[
-<xsl:stylesheet
-      xmlns:xsl='http://www.w3.org/1999/XSL/Transform' version='1.0'>
-
-  <xsl:output method="xml" />
-  <xsl:param name="host"/>
-  <xsl:param name="port"/>
-
-  <xsl:template match="/">
-    <xsl:apply-templates/>
-  </xsl:template>
-
-  <xsl:template match="config-property[@name='ConnectionURL']">
-    <config-property type="java.lang.String" name="ConnectionURL">jdbc:hsqldb:hsql://<xsl:value-of select='$host'/>:<xsl:value-of select='$port'/></config-property>
-  </xsl:template>
-
-  <xsl:template match="*|@*">
-    <xsl:copy>
-      <xsl:apply-templates select="@*|node()"/>
-    </xsl:copy>
-  </xsl:template>
-</xsl:stylesheet>
-]]>
-         </xslt-config>
-         </delegate-config>
-         <binding host="localhost" port="1901" />
-      </service-config>
-
-      <service-config name="jboss:service=Hypersonic"
-         delegateClass="org.jboss.services.binding.AttributeMappingDelegate"
-      >
-         <delegate-config portName="Port" />
-         <binding port="1901" />
-      </service-config>
-
-       -->
-
-
-      <!-- ********************* tomcat ***************** -->
-      
-      <service-config name="jboss.web:service=WebServer"
-         delegateClass="org.jboss.services.binding.XSLTFileDelegate"
-         >
-         <delegate-config>
-            <xslt-config configName="ConfigFile"><![CDATA[
-   <xsl:stylesheet
-         xmlns:xsl='http://www.w3.org/1999/XSL/Transform' version='1.0'>
-
-     <xsl:output method="xml" />
-     <xsl:param name="port"/>
-
-     <xsl:variable name="portAJP" select="$port - 71"/>
-     <xsl:variable name="portHttps" select="$port + 363"/>
-
-     <xsl:template match="/">
-       <xsl:apply-templates/>
-     </xsl:template>
-
-      <xsl:template match = "Connector">
-         <Connector>
-            <xsl:for-each select="@*">
-            <xsl:choose>
-               <xsl:when test="(name() = 'port' and . = '8080')">
-                  <xsl:attribute name="port"><xsl:value-of select="$port" /></xsl:attribute>
-               </xsl:when>
-               <xsl:when test="(name() = 'port' and . = '8009')">
-                  <xsl:attribute name="port"><xsl:value-of select="$portAJP" /></xsl:attribute>
-               </xsl:when>
-               <xsl:when test="(name() = 'redirectPort')">
-                  <xsl:attribute name="redirectPort"><xsl:value-of select="$portHttps" /></xsl:attribute>
-               </xsl:when>
-               <xsl:when test="(name() = 'port' and . = '8443')">
-                  <xsl:attribute name="port"><xsl:value-of select="$portHttps" /></xsl:attribute>
-               </xsl:when>
-               <xsl:otherwise>
-                  <xsl:attribute name="{name()}"><xsl:value-of select="." /></xsl:attribute>
-               </xsl:otherwise>
-            </xsl:choose>
-            </xsl:for-each>
-            <xsl:apply-templates/>
-         </Connector>
-      </xsl:template>
-
-     <xsl:template match="*|@*">
-       <xsl:copy>
-         <xsl:apply-templates select="@*|node()"/>
-       </xsl:copy>
-     </xsl:template>
-   </xsl:stylesheet>
-   ]]>
-            </xslt-config>
-         </delegate-config>
-         <binding port="@cargo.servlet.port@"/>
-      </service-config>
-
-   </server>
-
-</service-bindings>
+<service-bindings>
+
+   <!-- ********************************************************** -->
+   <!-- *                       cargo-binding                    * -->
+   <!-- ********************************************************** -->
+   <server name="cargo-binding">
+
+      <!-- ********************* jboss-service.xml ****************** -->
+
+      <service-config name="jboss:service=Naming"
+         delegateClass="org.jboss.services.binding.AttributeMappingDelegate"
+         >
+         <delegate-config portName="Port" hostName="BindAddress">
+            <attribute name="RmiPort">1298</attribute>
+         </delegate-config>
+         <binding port="@cargo.rmi.port@" host="${jboss.bind.address}"/>
+      </service-config>
+
+
+      <service-config name="jboss:service=WebService"
+         delegateClass="org.jboss.services.binding.AttributeMappingDelegate"
+         >
+         <delegate-config portName="Port"/>
+         <binding port="8283"/>
+      </service-config>
+
+
+      <service-config name="jboss:service=invoker,type=jrmp"
+         delegateClass="org.jboss.services.binding.AttributeMappingDelegate"
+         >
+         <delegate-config portName="RMIObjectPort"/>
+         <binding port="4644"/>
+      </service-config>
+
+
+      <service-config name="jboss:service=invoker,type=pooled"
+         delegateClass="org.jboss.services.binding.AttributeMappingDelegate"
+         >
+         <delegate-config portName="ServerBindPort"/>
+         <binding port="4645"/>
+      </service-config>
+
+
+      <!-- ********************* cluster-service.xml **************** -->
+
+      <service-config name="jboss:service=HAJNDI"
+         delegateClass="org.jboss.services.binding.AttributeMappingDelegate"
+         >
+         <delegate-config portName="RmiPort"/>
+         <binding port="1298"/>
+      </service-config>
+
+      <service-config name="jboss:service=HAJNDI"
+         delegateClass="org.jboss.services.binding.AttributeMappingDelegate"
+         >
+         <delegate-config portName="Port"/>
+         <binding port="1300"/>
+      </service-config>
+
+      <service-config name="jboss:service=invoker,type=jrmpha"
+         delegateClass="org.jboss.services.binding.AttributeMappingDelegate"
+         >
+         <delegate-config portName="RMIObjectPort"/>
+         <binding port="4644"/>
+      </service-config>
+
+
+      <!-- ********************* iiop-service.xml ****************** -->
+
+      <service-config name="jboss:service=CorbaORB"
+         delegateClass="org.jboss.services.binding.AttributeMappingDelegate"
+         >
+         <delegate-config portName="Port"/>
+         <binding port="3728"/>
+      </service-config>      
+   
+
+      <!-- ********************* jmx-rmi-adaptor.sar **************** -->
+
+      <service-config name="jboss.jmx:type=Connector,name=RMI"
+         delegateClass="org.jboss.services.binding.AttributeMappingDelegate"
+         >
+         <delegate-config portName="RMIObjectPort"/>
+         <binding port="19201"/>
+      </service-config>
+
+
+      <!-- ********************* snmp-adaptor.sar ****************** -->
+
+      <service-config name="jboss.jmx:name=SnmpAgent,service=trapd,type=logger"
+         delegateClass="org.jboss.services.binding.AttributeMappingDelegate"
+         >
+         <delegate-config portName="Port"/>
+         <binding port="1362"/>
+      </service-config>
+
+      <service-config name="jboss.jmx:name=SnmpAgent,service=snmp,type=adaptor"
+         delegateClass="org.jboss.services.binding.AttributeMappingDelegate"
+         >
+         <delegate-config portName="Port"/>
+         <binding port="1361"/>
+      </service-config>
+
+
+      <!-- ********************* jbossmq-service.xml **************** -->
+
+      <!-- JMS related services -->
+      <service-config name="jboss.mq:service=InvocationLayer,type=UIL2"
+         delegateClass="org.jboss.services.binding.AttributeMappingDelegate"
+         >
+         <delegate-config portName="ServerBindPort"/>
+         <binding port="8293"/>
+      </service-config>
+
+
+      <!-- ********************* hsqldb-ds.xml ********************** -->
+
+      <!-- Hypersonic related services
+      
+            Only if using TCP setup (local file setup by default)
+
+      <service-config name="jboss.jca:service=ManagedConnectionFactory,name=DefaultDS"
+         delegateClass="org.jboss.services.binding.XSLTConfigDelegate"
+      >
+         <delegate-config>
+         <xslt-config configName="ManagedConnectionFactoryProperties"><![CDATA[
+<xsl:stylesheet
+      xmlns:xsl='http://www.w3.org/1999/XSL/Transform' version='1.0'>
+
+  <xsl:output method="xml" />
+  <xsl:param name="host"/>
+  <xsl:param name="port"/>
+
+  <xsl:template match="/">
+    <xsl:apply-templates/>
+  </xsl:template>
+
+  <xsl:template match="config-property[@name='ConnectionURL']">
+    <config-property type="java.lang.String" name="ConnectionURL">jdbc:hsqldb:hsql://<xsl:value-of select='$host'/>:<xsl:value-of select='$port'/></config-property>
+  </xsl:template>
+
+  <xsl:template match="*|@*">
+    <xsl:copy>
+      <xsl:apply-templates select="@*|node()"/>
+    </xsl:copy>
+  </xsl:template>
+</xsl:stylesheet>
+]]>
+         </xslt-config>
+         </delegate-config>
+         <binding host="localhost" port="1901" />
+      </service-config>
+
+      <service-config name="jboss:service=Hypersonic"
+         delegateClass="org.jboss.services.binding.AttributeMappingDelegate"
+      >
+         <delegate-config portName="Port" />
+         <binding port="1901" />
+      </service-config>
+
+       -->
+
+
+      <!-- ********************* tomcat ***************** -->
+      
+      <service-config name="jboss.web:service=WebServer"
+         delegateClass="org.jboss.services.binding.XSLTFileDelegate"
+         >
+         <delegate-config>
+            <xslt-config configName="ConfigFile"><![CDATA[
+   <xsl:stylesheet
+         xmlns:xsl='http://www.w3.org/1999/XSL/Transform' version='1.0'>
+
+     <xsl:output method="xml" />
+     <xsl:param name="port"/>
+     
+     <!-- added for Terracotta - hhuynh -->
+     <xsl:param name="jvmRoute"/>
+
+     <xsl:variable name="portAJP" select="$port - 71"/>
+     <xsl:variable name="portHttps" select="$port + 363"/>
+
+     <xsl:template match="/">
+       <xsl:apply-templates/>
+     </xsl:template>
+
+      <xsl:template match = "Connector">
+         <Connector>
+            <xsl:for-each select="@*">
+            <xsl:choose>
+               <xsl:when test="(name() = 'port' and . = '8080')">
+                  <xsl:attribute name="port"><xsl:value-of select="$port" /></xsl:attribute>
+               </xsl:when>
+               <xsl:when test="(name() = 'port' and . = '8009')">
+                  <xsl:attribute name="port"><xsl:value-of select="$portAJP" /></xsl:attribute>
+               </xsl:when>
+               <xsl:when test="(name() = 'redirectPort')">
+                  <xsl:attribute name="redirectPort"><xsl:value-of select="$portHttps" /></xsl:attribute>
+               </xsl:when>
+               <xsl:when test="(name() = 'port' and . = '8443')">
+                  <xsl:attribute name="port"><xsl:value-of select="$portHttps" /></xsl:attribute>
+               </xsl:when>
+               <xsl:otherwise>
+                  <xsl:attribute name="{name()}"><xsl:value-of select="." /></xsl:attribute>
+               </xsl:otherwise>
+            </xsl:choose>
+            </xsl:for-each>
+            <xsl:apply-templates/>
+         </Connector>
+      </xsl:template>
+
+	<!-- added for Terracotta - hhuynh -->
+     <xsl:template match="Engine">
+       <Engine>
+         <xsl:attribute name="jvmRoute">@jboss.jvmroute@</xsl:attribute>
+         <xsl:for-each select="@*">
+           <xsl:attribute name="{name()}"><xsl:value-of select="." /></xsl:attribute>
+         </xsl:for-each>
+         <xsl:apply-templates/>
+       </Engine>
+     </xsl:template>
+     
+     <xsl:template match="*|@*">
+       <xsl:copy>
+         <xsl:apply-templates select="@*|node()"/>
+       </xsl:copy>
+     </xsl:template>
+   </xsl:stylesheet>
+   ]]>
+            </xslt-config>
+         </delegate-config>
+         <binding port="@cargo.servlet.port@"/>
+         
+         <!-- added for Terracotta - hhuynh -->
+         <binding jvmRoute="@jboss.jvmroute@"/>
+         
+      </service-config>
+
+   </server>
+
+</service-bindings>
Index: containers/jboss/src/main/resources/org/codehaus/cargo/container/internal/resources/jboss4x/cargo-binding.xml
===================================================================
--- containers/jboss/src/main/resources/org/codehaus/cargo/container/internal/resources/jboss4x/cargo-binding.xml	(revision 1546)
+++ containers/jboss/src/main/resources/org/codehaus/cargo/container/internal/resources/jboss4x/cargo-binding.xml	(working copy)
@@ -1,223 +1,241 @@
-<service-bindings>
-
-   <!-- ********************************************************** -->
-   <!-- *                       cargo-binding                    * -->
-   <!-- ********************************************************** -->
-   <server name="cargo-binding">
-
-      <!-- ********************* jboss-service.xml ****************** -->
-
-      <service-config name="jboss:service=Naming"
-         delegateClass="org.jboss.services.binding.AttributeMappingDelegate"
-         >
-         <delegate-config portName="Port" hostName="BindAddress">
-            <attribute name="RmiPort">1298</attribute>
-         </delegate-config>
-         <binding port="@cargo.rmi.port@" host="${jboss.bind.address}"/>
-      </service-config>
-
-
-      <service-config name="jboss:service=WebService"
-         delegateClass="org.jboss.services.binding.AttributeMappingDelegate"
-         >
-         <delegate-config portName="Port"/>
-         <binding port="8283"/>
-      </service-config>
-
-
-      <service-config name="jboss:service=invoker,type=jrmp"
-         delegateClass="org.jboss.services.binding.AttributeMappingDelegate"
-         >
-         <delegate-config portName="RMIObjectPort"/>
-         <binding port="4644"/>
-      </service-config>
-
-
-      <service-config name="jboss:service=invoker,type=pooled"
-         delegateClass="org.jboss.services.binding.AttributeMappingDelegate"
-         >
-         <delegate-config portName="ServerBindPort"/>
-         <binding port="4645"/>
-      </service-config>
-
-
-      <!-- ********************* cluster-service.xml **************** -->
-
-      <service-config name="jboss:service=HAJNDI"
-         delegateClass="org.jboss.services.binding.AttributeMappingDelegate"
-         >
-         <delegate-config portName="RmiPort"/>
-         <binding port="1298"/>
-      </service-config>
-
-      <service-config name="jboss:service=HAJNDI"
-         delegateClass="org.jboss.services.binding.AttributeMappingDelegate"
-         >
-         <delegate-config portName="Port"/>
-         <binding port="1300"/>
-      </service-config>
-
-      <service-config name="jboss:service=invoker,type=jrmpha"
-         delegateClass="org.jboss.services.binding.AttributeMappingDelegate"
-         >
-         <delegate-config portName="RMIObjectPort"/>
-         <binding port="4644"/>
-      </service-config>
-
-
-      <!-- ********************* iiop-service.xml ****************** -->
-
-      <service-config name="jboss:service=CorbaORB"
-         delegateClass="org.jboss.services.binding.AttributeMappingDelegate"
-         >
-         <delegate-config portName="Port"/>
-         <binding port="3728"/>
-      </service-config>      
-   
-
-      <!-- ********************* jmx-rmi-adaptor.sar **************** -->
-
-      <service-config name="jboss.jmx:type=Connector,name=RMI"
-         delegateClass="org.jboss.services.binding.AttributeMappingDelegate"
-         >
-         <delegate-config portName="RMIObjectPort"/>
-         <binding port="19201"/>
-      </service-config>
-
-
-      <!-- ********************* snmp-adaptor.sar ****************** -->
-
-      <service-config name="jboss.jmx:name=SnmpAgent,service=trapd,type=logger"
-         delegateClass="org.jboss.services.binding.AttributeMappingDelegate"
-         >
-         <delegate-config portName="Port"/>
-         <binding port="1362"/>
-      </service-config>
-
-      <service-config name="jboss.jmx:name=SnmpAgent,service=snmp,type=adaptor"
-         delegateClass="org.jboss.services.binding.AttributeMappingDelegate"
-         >
-         <delegate-config portName="Port"/>
-         <binding port="1361"/>
-      </service-config>
-
-
-      <!-- ********************* jbossmq-service.xml **************** -->
-
-      <!-- JMS related services -->
-      <service-config name="jboss.mq:service=InvocationLayer,type=UIL2"
-         delegateClass="org.jboss.services.binding.AttributeMappingDelegate"
-         >
-         <delegate-config portName="ServerBindPort"/>
-         <binding port="8293"/>
-      </service-config>
-
-
-      <!-- ********************* hsqldb-ds.xml ********************** -->
-
-      <!-- Hypersonic related services
-      
-            Only if using TCP setup (local file setup by default)
-
-      <service-config name="jboss.jca:service=ManagedConnectionFactory,name=DefaultDS"
-         delegateClass="org.jboss.services.binding.XSLTConfigDelegate"
-      >
-         <delegate-config>
-         <xslt-config configName="ManagedConnectionFactoryProperties"><![CDATA[
-<xsl:stylesheet
-      xmlns:xsl='http://www.w3.org/1999/XSL/Transform' version='1.0'>
-
-  <xsl:output method="xml" />
-  <xsl:param name="host"/>
-  <xsl:param name="port"/>
-
-  <xsl:template match="/">
-    <xsl:apply-templates/>
-  </xsl:template>
-
-  <xsl:template match="config-property[@name='ConnectionURL']">
-    <config-property type="java.lang.String" name="ConnectionURL">jdbc:hsqldb:hsql://<xsl:value-of select='$host'/>:<xsl:value-of select='$port'/></config-property>
-  </xsl:template>
-
-  <xsl:template match="*|@*">
-    <xsl:copy>
-      <xsl:apply-templates select="@*|node()"/>
-    </xsl:copy>
-  </xsl:template>
-</xsl:stylesheet>
-]]>
-         </xslt-config>
-         </delegate-config>
-         <binding host="localhost" port="1901" />
-      </service-config>
-
-      <service-config name="jboss:service=Hypersonic"
-         delegateClass="org.jboss.services.binding.AttributeMappingDelegate"
-      >
-         <delegate-config portName="Port" />
-         <binding port="1901" />
-      </service-config>
-
-       -->
-
-
-      <!-- ********************* tomcat ***************** -->
-      
-      <service-config name="jboss.web:service=WebServer"
-         delegateClass="org.jboss.services.binding.XSLTFileDelegate"
-         >
-         <delegate-config>
-            <xslt-config configName="ConfigFile"><![CDATA[
-   <xsl:stylesheet
-         xmlns:xsl='http://www.w3.org/1999/XSL/Transform' version='1.0'>
-
-     <xsl:output method="xml" />
-     <xsl:param name="port"/>
-
-     <xsl:variable name="portAJP" select="$port - 71"/>
-     <xsl:variable name="portHttps" select="$port + 363"/>
-
-     <xsl:template match="/">
-       <xsl:apply-templates/>
-     </xsl:template>
-
-      <xsl:template match = "Connector">
-         <Connector>
-            <xsl:for-each select="@*">
-            <xsl:choose>
-               <xsl:when test="(name() = 'port' and . = '8080')">
-                  <xsl:attribute name="port"><xsl:value-of select="$port" /></xsl:attribute>
-               </xsl:when>
-               <xsl:when test="(name() = 'port' and . = '8009')">
-                  <xsl:attribute name="port"><xsl:value-of select="$portAJP" /></xsl:attribute>
-               </xsl:when>
-               <xsl:when test="(name() = 'redirectPort')">
-                  <xsl:attribute name="redirectPort"><xsl:value-of select="$portHttps" /></xsl:attribute>
-               </xsl:when>
-               <xsl:when test="(name() = 'port' and . = '8443')">
-                  <xsl:attribute name="port"><xsl:value-of select="$portHttps" /></xsl:attribute>
-               </xsl:when>
-               <xsl:otherwise>
-                  <xsl:attribute name="{name()}"><xsl:value-of select="." /></xsl:attribute>
-               </xsl:otherwise>
-            </xsl:choose>
-            </xsl:for-each>
-            <xsl:apply-templates/>
-         </Connector>
-      </xsl:template>
-
-     <xsl:template match="*|@*">
-       <xsl:copy>
-         <xsl:apply-templates select="@*|node()"/>
-       </xsl:copy>
-     </xsl:template>
-   </xsl:stylesheet>
-   ]]>
-            </xslt-config>
-         </delegate-config>
-         <binding port="@cargo.servlet.port@"/>
-      </service-config>
-
-   </server>
-
-</service-bindings>
+<service-bindings>
+
+   <!-- ********************************************************** -->
+   <!-- *                       cargo-binding                    * -->
+   <!-- ********************************************************** -->
+   <server name="cargo-binding">
+
+      <!-- ********************* jboss-service.xml ****************** -->
+
+      <service-config name="jboss:service=Naming"
+         delegateClass="org.jboss.services.binding.AttributeMappingDelegate"
+         >
+         <delegate-config portName="Port" hostName="BindAddress">
+            <attribute name="RmiPort">1298</attribute>
+         </delegate-config>
+         <binding port="@cargo.rmi.port@" host="${jboss.bind.address}"/>
+      </service-config>
+
+
+      <service-config name="jboss:service=WebService"
+         delegateClass="org.jboss.services.binding.AttributeMappingDelegate"
+         >
+         <delegate-config portName="Port"/>
+         <binding port="8283"/>
+      </service-config>
+
+
+      <service-config name="jboss:service=invoker,type=jrmp"
+         delegateClass="org.jboss.services.binding.AttributeMappingDelegate"
+         >
+         <delegate-config portName="RMIObjectPort"/>
+         <binding port="4644"/>
+      </service-config>
+
+
+      <service-config name="jboss:service=invoker,type=pooled"
+         delegateClass="org.jboss.services.binding.AttributeMappingDelegate"
+         >
+         <delegate-config portName="ServerBindPort"/>
+         <binding port="4645"/>
+      </service-config>
+
+
+      <!-- ********************* cluster-service.xml **************** -->
+
+      <service-config name="jboss:service=HAJNDI"
+         delegateClass="org.jboss.services.binding.AttributeMappingDelegate"
+         >
+         <delegate-config portName="RmiPort"/>
+         <binding port="1298"/>
+      </service-config>
+
+      <service-config name="jboss:service=HAJNDI"
+         delegateClass="org.jboss.services.binding.AttributeMappingDelegate"
+         >
+         <delegate-config portName="Port"/>
+         <binding port="1300"/>
+      </service-config>
+
+      <service-config name="jboss:service=invoker,type=jrmpha"
+         delegateClass="org.jboss.services.binding.AttributeMappingDelegate"
+         >
+         <delegate-config portName="RMIObjectPort"/>
+         <binding port="4644"/>
+      </service-config>
+
+
+      <!-- ********************* iiop-service.xml ****************** -->
+
+      <service-config name="jboss:service=CorbaORB"
+         delegateClass="org.jboss.services.binding.AttributeMappingDelegate"
+         >
+         <delegate-config portName="Port"/>
+         <binding port="3728"/>
+      </service-config>      
+   
+
+      <!-- ********************* jmx-rmi-adaptor.sar **************** -->
+
+      <service-config name="jboss.jmx:type=Connector,name=RMI"
+         delegateClass="org.jboss.services.binding.AttributeMappingDelegate"
+         >
+         <delegate-config portName="RMIObjectPort"/>
+         <binding port="19201"/>
+      </service-config>
+
+
+      <!-- ********************* snmp-adaptor.sar ****************** -->
+
+      <service-config name="jboss.jmx:name=SnmpAgent,service=trapd,type=logger"
+         delegateClass="org.jboss.services.binding.AttributeMappingDelegate"
+         >
+         <delegate-config portName="Port"/>
+         <binding port="1362"/>
+      </service-config>
+
+      <service-config name="jboss.jmx:name=SnmpAgent,service=snmp,type=adaptor"
+         delegateClass="org.jboss.services.binding.AttributeMappingDelegate"
+         >
+         <delegate-config portName="Port"/>
+         <binding port="1361"/>
+      </service-config>
+
+
+      <!-- ********************* jbossmq-service.xml **************** -->
+
+      <!-- JMS related services -->
+      <service-config name="jboss.mq:service=InvocationLayer,type=UIL2"
+         delegateClass="org.jboss.services.binding.AttributeMappingDelegate"
+         >
+         <delegate-config portName="ServerBindPort"/>
+         <binding port="8293"/>
+      </service-config>
+
+
+      <!-- ********************* hsqldb-ds.xml ********************** -->
+
+      <!-- Hypersonic related services
+      
+            Only if using TCP setup (local file setup by default)
+
+      <service-config name="jboss.jca:service=ManagedConnectionFactory,name=DefaultDS"
+         delegateClass="org.jboss.services.binding.XSLTConfigDelegate"
+      >
+         <delegate-config>
+         <xslt-config configName="ManagedConnectionFactoryProperties"><![CDATA[
+<xsl:stylesheet
+      xmlns:xsl='http://www.w3.org/1999/XSL/Transform' version='1.0'>
+
+  <xsl:output method="xml" />
+  <xsl:param name="host"/>
+  <xsl:param name="port"/>
+
+  <xsl:template match="/">
+    <xsl:apply-templates/>
+  </xsl:template>
+
+  <xsl:template match="config-property[@name='ConnectionURL']">
+    <config-property type="java.lang.String" name="ConnectionURL">jdbc:hsqldb:hsql://<xsl:value-of select='$host'/>:<xsl:value-of select='$port'/></config-property>
+  </xsl:template>
+
+  <xsl:template match="*|@*">
+    <xsl:copy>
+      <xsl:apply-templates select="@*|node()"/>
+    </xsl:copy>
+  </xsl:template>
+</xsl:stylesheet>
+]]>
+         </xslt-config>
+         </delegate-config>
+         <binding host="localhost" port="1901" />
+      </service-config>
+
+      <service-config name="jboss:service=Hypersonic"
+         delegateClass="org.jboss.services.binding.AttributeMappingDelegate"
+      >
+         <delegate-config portName="Port" />
+         <binding port="1901" />
+      </service-config>
+
+       -->
+
+
+      <!-- ********************* tomcat ***************** -->
+      
+      <service-config name="jboss.web:service=WebServer"
+         delegateClass="org.jboss.services.binding.XSLTFileDelegate"
+         >
+         <delegate-config>
+            <xslt-config configName="ConfigFile"><![CDATA[
+   <xsl:stylesheet
+         xmlns:xsl='http://www.w3.org/1999/XSL/Transform' version='1.0'>
+
+     <xsl:output method="xml" />
+     <xsl:param name="port"/>
+     
+     <!-- added for Terracotta - hhuynh -->
+     <xsl:param name="jvmRoute"/>
+
+     <xsl:variable name="portAJP" select="$port - 71"/>
+     <xsl:variable name="portHttps" select="$port + 363"/>
+
+     <xsl:template match="/">
+       <xsl:apply-templates/>
+     </xsl:template>
+
+      <xsl:template match = "Connector">
+         <Connector>
+            <xsl:for-each select="@*">
+            <xsl:choose>
+               <xsl:when test="(name() = 'port' and . = '8080')">
+                  <xsl:attribute name="port"><xsl:value-of select="$port" /></xsl:attribute>
+               </xsl:when>
+               <xsl:when test="(name() = 'port' and . = '8009')">
+                  <xsl:attribute name="port"><xsl:value-of select="$portAJP" /></xsl:attribute>
+               </xsl:when>
+               <xsl:when test="(name() = 'redirectPort')">
+                  <xsl:attribute name="redirectPort"><xsl:value-of select="$portHttps" /></xsl:attribute>
+               </xsl:when>
+               <xsl:when test="(name() = 'port' and . = '8443')">
+                  <xsl:attribute name="port"><xsl:value-of select="$portHttps" /></xsl:attribute>
+               </xsl:when>
+               <xsl:otherwise>
+                  <xsl:attribute name="{name()}"><xsl:value-of select="." /></xsl:attribute>
+               </xsl:otherwise>
+            </xsl:choose>
+            </xsl:for-each>
+            <xsl:apply-templates/>
+         </Connector>
+      </xsl:template>
+
+     <!-- added for Terracotta - hhuynh -->
+     <xsl:template match="Engine">
+       <Engine>
+         <xsl:attribute name="jvmRoute">@jboss.jvmroute@</xsl:attribute>
+         <xsl:for-each select="@*">
+           <xsl:attribute name="{name()}"><xsl:value-of select="." /></xsl:attribute>
+         </xsl:for-each>
+         <xsl:apply-templates/>
+       </Engine>
+     </xsl:template>
+     
+     <xsl:template match="*|@*">
+       <xsl:copy>
+         <xsl:apply-templates select="@*|node()"/>
+       </xsl:copy>
+     </xsl:template>
+   </xsl:stylesheet>
+   ]]>
+            </xslt-config>
+         </delegate-config>
+         <binding port="@cargo.servlet.port@"/>
+         
+         <!-- added for Terracotta - hhuynh -->
+         <binding jvmRoute="@jboss.jvmroute@"/>
+         
+      </service-config>
+
+   </server>
+
+</service-bindings>
Index: containers/jboss/src/main/resources/org/codehaus/cargo/container/internal/resources/jboss42x/cargo-binding.xml
===================================================================
--- containers/jboss/src/main/resources/org/codehaus/cargo/container/internal/resources/jboss42x/cargo-binding.xml	(revision 0)
+++ containers/jboss/src/main/resources/org/codehaus/cargo/container/internal/resources/jboss42x/cargo-binding.xml	(revision 0)
@@ -0,0 +1,400 @@
+<service-bindings>
+
+   <!-- ********************************************************** -->
+   <!-- *                        cargo-binding                   * -->
+   <!-- ********************************************************** -->
+   <server name="cargo-binding">
+
+      <!-- ********************* jboss-service.xml ****************** -->
+
+      <service-config name="jboss:service=Naming"
+         delegateClass="org.jboss.services.binding.AttributeMappingDelegate"
+         >
+         <delegate-config portName="Port" hostName="BindAddress">
+            <attribute name="RmiPort">1098</attribute>
+         </delegate-config>
+         <binding port="@cargo.rmi.port@" host="${jboss.bind.address}"/>
+      </service-config>
+
+
+      <service-config name="jboss:service=WebService"
+         delegateClass="org.jboss.services.binding.AttributeMappingDelegate"
+         >
+         <delegate-config portName="Port"/>
+         <binding port="8083"/>
+      </service-config>
+
+
+      <service-config name="jboss:service=invoker,type=jrmp"
+         delegateClass="org.jboss.services.binding.AttributeMappingDelegate"
+         >
+         <delegate-config portName="RMIObjectPort"/>
+         <binding port="4444"/>
+      </service-config>
+
+      <service-config name="jboss:service=invoker,type=pooled"
+         delegateClass="org.jboss.services.binding.AttributeMappingDelegate"
+         >
+         <delegate-config portName="ServerBindPort"/>
+         <binding port="4445"/>
+      </service-config>
+
+
+      <!-- ********************* cluster-service.xml **************** -->
+
+      <service-config name="jboss:service=HAJNDI"
+         delegateClass="org.jboss.services.binding.AttributeMappingDelegate">
+         <delegate-config portName="Port" hostName="BindAddress">
+            <attribute name="RmiPort">1101</attribute>
+         </delegate-config>
+         <binding port="1100" host="${jboss.bind.address}"/>
+      </service-config>
+
+      <service-config name="jboss:service=invoker,type=jrmpha"
+         delegateClass="org.jboss.services.binding.AttributeMappingDelegate">
+         <delegate-config portName="RMIObjectPort"/>
+         <binding port="4444"/>
+      </service-config>
+
+      <service-config name="jboss:service=invoker,type=pooledha"
+         delegateClass="org.jboss.services.binding.AttributeMappingDelegate">
+         <delegate-config portName="ServerBindPort"/>
+         <binding port="4448"/>
+      </service-config>
+
+      <!-- ********************* iiop-service.xml ****************** -->
+
+      <service-config name="jboss:service=CorbaORB"
+         delegateClass="org.jboss.services.binding.AttributeMappingDelegate"
+         >
+         <delegate-config portName="Port"/>
+         <binding port="3528"/>
+      </service-config>
+
+
+      <!-- ********************* jmx-rmi-adaptor.sar **************** -->
+
+      <service-config name="jboss.jmx:type=Connector,name=RMI"
+         delegateClass="org.jboss.services.binding.AttributeMappingDelegate"
+         >
+         <delegate-config portName="RMIObjectPort"/>
+         <binding port="19001"/>
+      </service-config>
+
+
+      <!-- ********************* snmp-adaptor.sar ****************** -->
+
+      <service-config name="jboss.jmx:name=SnmpAgent,service=trapd,type=logger"
+         delegateClass="org.jboss.services.binding.AttributeMappingDelegate"
+         >
+         <delegate-config portName="Port"/>
+         <binding port="1162"/>
+      </service-config>
+
+      <service-config name="jboss.jmx:name=SnmpAgent,service=snmp,type=adaptor"
+         delegateClass="org.jboss.services.binding.AttributeMappingDelegate"
+         >
+         <delegate-config portName="Port"/>
+         <binding port="1161"/>
+      </service-config>
+
+
+      <!-- ********************* jbossmq-service.xml **************** -->
+
+      <!-- JMS related services -->
+      <service-config name="jboss.mq:service=InvocationLayer,type=UIL2"
+         delegateClass="org.jboss.services.binding.AttributeMappingDelegate"
+         >
+         <delegate-config portName="ServerBindPort"/>
+         <binding port="8093"/>
+      </service-config>
+
+
+      <!-- ********************* jbossmq-httpil.sar **************** -->
+      <service-config name="jboss.mq:service=InvocationLayer,type=HTTP"
+         delegateClass="org.jboss.services.binding.AttributeMappingDelegate"
+         >
+         <delegate-config portName="URLPort"/>
+         <binding port="8080"/>
+      </service-config>
+
+      <!-- ********************* hajndi-jms-ds.xml **************** -->
+
+      <!-- The JMS provider loader -->
+      <service-config name="jboss.mq:service=JMSProviderLoader,name=HAJNDIJMSProvider"
+         delegateClass="org.jboss.services.binding.AttributeMappingDelegate">
+         <!--
+              MAKE SURE java.naming.provider.url
+              PORT IS SAME AS HA-JNDI ABOVE !!!
+         -->
+         <delegate-config>
+            <attribute name="Properties"><![CDATA[
+                java.naming.factory.initial=org.jnp.interfaces.NamingContextFactory
+                java.naming.factory.url.pkgs=org.jboss.naming:org.jnp.interfaces
+                java.naming.provider.url=${jboss.bind.address:localhost}:1100
+                jnp.disableDiscovery=false
+                jnp.partitionName=${jboss.partition.name:DefaultPartition}
+                jnp.discoveryGroup=${jboss.partition.udpGroup:230.0.0.4}
+                jnp.discoveryPort=1102
+                jnp.discoveryTTL=16
+                jnp.discoveryTimeout=5000
+                jnp.maxRetries=1
+           ]]>
+           </attribute>
+        </delegate-config>
+        <!-- NOTE: YOU MUST ADD THIS ELEMENT, BUT THE VALUE DOESN'T MATTER
+             BE SURE THE CORRECT VALUE IS IN java.naming.provider.url ABOVE -->
+        <binding port="1100"/>
+      </service-config>
+
+      <!-- **************** http-invoker.sar & httpha-invoker.sar*************** -->
+      <!-- EJBInvoker -->
+      <service-config name="jboss:service=invoker,type=http"
+         delegateClass="org.jboss.services.binding.AttributeMappingDelegate"
+         >
+         <delegate-config>
+            <attribute name="InvokerURLSuffix">:${port}/invoker/EJBInvokerServlet</attribute>
+        </delegate-config>
+         <!--
+            MUST BE THE SAME AS
+            TOMCAT HTTP CONNECTOR BELOW !!!
+             -->
+         <binding port="8080"/>
+      </service-config>
+
+      <!-- EJB3 Remoting Connector ejb3.deployer/META-INF/jboss-service.xml -->
+
+      <service-config name="jboss.remoting:type=Connector,name=DefaultEjb3Connector,handler=ejb3"
+         delegateClass="org.jboss.services.binding.AttributeMappingDelegate">
+        <delegate-config>
+           <attribute name="InvokerLocator">socket://${jboss.bind.address}:3873</attribute>
+        </delegate-config>
+         <binding port="3873"/>
+      </service-config>
+
+        <!-- JMXInvoker -->
+      <service-config name="jboss:service=invoker,type=http,target=Naming"
+         delegateClass="org.jboss.services.binding.AttributeMappingDelegate"
+         >
+         <delegate-config>
+            <attribute name="InvokerURLSuffix">:${port}/invoker/JMXInvokerServlet</attribute>
+        </delegate-config>
+         <!--
+            MUST BE THE SAME AS
+            TOMCAT HTTP CONNECTOR BELOW !!!
+             -->
+         <binding port="8080"/>
+      </service-config>
+
+        <!-- readonly JMXInvoker -->
+      <service-config name="jboss:service=invoker,type=http,target=Naming,readonly=true"
+         delegateClass="org.jboss.services.binding.AttributeMappingDelegate"
+         >
+         <delegate-config>
+            <attribute name="InvokerURLSuffix">:${port}/invoker/readonly/JMXInvokerServlet</attribute>
+        </delegate-config>
+         <!--
+            MUST BE THE SAME AS
+            TOMCAT HTTP CONNECTOR BELOW !!!
+             -->
+         <binding port="8080"/>
+      </service-config>
+
+    <!-- **************** httpha-invoker.sar*************** -->
+      <!-- EJBInvokerHA -->
+      <service-config name="jboss:service=invoker,type=httpHA"
+         delegateClass="org.jboss.services.binding.AttributeMappingDelegate"
+         >
+         <delegate-config>
+            <attribute name="InvokerURLSuffix">:${port}/invoker/EJBInvokerHAServlet</attribute>
+        </delegate-config>
+         <binding port="8080"/>
+      </service-config>
+
+      <!-- JMXInvokerHA -->
+      <service-config name="jboss:service=invoker,type=http,target=HAJNDI"
+         delegateClass="org.jboss.services.binding.AttributeMappingDelegate"
+         >
+         <delegate-config>
+            <attribute name="InvokerURLSuffix">:${port}/invoker/JMXInvokerHAServlet</attribute>
+        </delegate-config>
+         <binding port="8080"/>
+      </service-config>
+
+
+    <!-- ********************* jboss-ws4ee.sar **************** -->
+
+      <!-- Web Service related services -->
+      <service-config name="jboss.ws4ee:service=AxisService"
+         delegateClass="org.jboss.services.binding.AttributeMappingDelegate"
+         >
+        <delegate-config portName="WebServicePort" hostName="WebServiceHost"/>
+        <binding port="8080" host="${jboss.bind.address}"/>
+      </service-config>
+
+      <!-- ********************* remoting **************** -->
+
+       <!-- *** remoting connector *** -->
+       <service-config name="jboss.remoting:service=Connector,transport=socket"
+          delegateClass="org.jboss.services.binding.XSLTConfigDelegate">
+          <delegate-config>
+             <xslt-config configName="Configuration"><![CDATA[
+               <xsl:stylesheet xmlns:xsl='http://www.w3.org/1999/XSL/Transform' version='1.0'>
+
+                  <xsl:output method="xml" />
+                  <xsl:param name="port"/>
+
+                  <xsl:template match="/">
+                     <xsl:apply-templates/>
+                  </xsl:template>
+
+                  <xsl:template match="attribute[@name='serverBindPort']">
+                     <attribute type="java.lang.String" name="serverBindPort"><xsl:value-of select='$port'/></attribute>
+                  </xsl:template>
+
+                  <xsl:template match="*|@*">
+                     <xsl:copy>
+                        <xsl:apply-templates select="@*|node()"/>
+                     </xsl:copy>
+                  </xsl:template>
+               </xsl:stylesheet>
+          ]]>
+          </xslt-config>
+          </delegate-config>
+          <binding port="4446" />
+       </service-config>
+
+
+      <!-- ********************* hsqldb-ds.xml ********************** -->
+
+      <!-- Hypersonic related services when using the tcp/ip access
+      <service-config name="jboss.jca:service=ManagedConnectionFactory,name=DefaultDS"
+         delegateClass="org.jboss.services.binding.XSLTConfigDelegate"
+      >
+         <delegate-config>
+         <xslt-config configName="ManagedConnectionFactoryProperties"><![CDATA[
+<xsl:stylesheet
+      xmlns:xsl='http://www.w3.org/1999/XSL/Transform' version='1.0'>
+
+  <xsl:output method="xml" />
+  <xsl:param name="host"/>
+  <xsl:param name="port"/>
+
+  <xsl:template match="/">
+    <xsl:apply-templates/>
+  </xsl:template>
+
+  <xsl:template match="config-property[@name='ConnectionURL']">
+    <config-property type="java.lang.String" name="ConnectionURL">jdbc:hsqldb:hsql://<xsl:value-of select='$host'/>:<xsl:value-of select='$port'/></config-property>
+  </xsl:template>
+
+  <xsl:template match="*|@*">
+    <xsl:copy>
+      <xsl:apply-templates select="@*|node()"/>
+    </xsl:copy>
+  </xsl:template>
+</xsl:stylesheet>
+]]>
+         </xslt-config>
+         </delegate-config>
+         <binding host="localhost" port="1701" />
+      </service-config>
+
+      <service-config name="jboss:service=Hypersonic"
+         delegateClass="org.jboss.services.binding.AttributeMappingDelegate"
+      >
+         <delegate-config portName="Port" />
+         <binding port="1701" />
+      </service-config>
+      -->
+
+
+      <!-- ********************* tomcat ********************** -->
+
+      <service-config name="jboss.web:service=WebServer"
+         delegateClass="org.jboss.services.binding.XSLTFileDelegate"
+         >
+         <delegate-config>
+            <xslt-config configName="ConfigFile"><![CDATA[
+   <xsl:stylesheet
+         xmlns:xsl='http://www.w3.org/1999/XSL/Transform' version='1.0'>
+
+     <xsl:output method="xml" />
+     <xsl:param name="port"/>
+
+     <!-- added for Terracotta - hhuynh -->
+     <xsl:param name="jvmRoute"/>
+     
+     <xsl:variable name="portAJP" select="$port - 71"/>
+     <xsl:variable name="portHttps" select="$port + 363"/>
+
+     <xsl:template match="/">
+       <xsl:apply-templates/>
+     </xsl:template>
+
+      <xsl:template match = "Connector">
+         <Connector>
+            <xsl:for-each select="@*">
+            <xsl:choose>
+               <xsl:when test="(name() = 'port' and . = '8080')">
+                  <xsl:attribute name="port"><xsl:value-of select="$port" /></xsl:attribute>
+               </xsl:when>
+               <xsl:when test="(name() = 'port' and . = '8009')">
+                  <xsl:attribute name="port"><xsl:value-of select="$portAJP" /></xsl:attribute>
+               </xsl:when>
+               <xsl:when test="(name() = 'redirectPort')">
+                  <xsl:attribute name="redirectPort"><xsl:value-of select="$portHttps" /></xsl:attribute>
+               </xsl:when>
+               <xsl:when test="(name() = 'port' and . = '8443')">
+                  <xsl:attribute name="port"><xsl:value-of select="$portHttps" /></xsl:attribute>
+               </xsl:when>
+               <xsl:otherwise>
+                  <xsl:attribute name="{name()}"><xsl:value-of select="." /></xsl:attribute>
+               </xsl:otherwise>
+            </xsl:choose>
+            </xsl:for-each>
+            <xsl:apply-templates/>
+         </Connector>
+      </xsl:template>
+
+     <!-- added for Terracotta - hhuynh -->
+     <xsl:template match="Engine">
+       <Engine>
+         <xsl:attribute name="jvmRoute">@jboss.jvmroute@</xsl:attribute>
+         <xsl:for-each select="@*">
+           <xsl:attribute name="{name()}"><xsl:value-of select="." /></xsl:attribute>
+         </xsl:for-each>
+         <xsl:apply-templates/>
+       </Engine>
+     </xsl:template>
+     
+     <xsl:template match="*|@*">
+       <xsl:copy>
+         <xsl:apply-templates select="@*|node()"/>
+       </xsl:copy>
+     </xsl:template>
+   </xsl:stylesheet>
+   ]]>
+            </xslt-config>
+         </delegate-config>
+         <binding port="@cargo.servlet.port@"/>
+         
+         <!-- added for Terracotta - hhuynh -->
+         <binding jvmRoute="@jboss.jvmroute@"/>
+         
+      </service-config>
+      
+
+      <!-- ********************* jboss messaging ********************** -->
+
+      <service-config name="jboss.messaging:service=Connector,transport=socket"
+                      delegateClass="org.jboss.services.binding.AttributeMappingDelegate">
+         <delegate-config>
+            <attribute name="InvokerLocator">socket://${jboss.bind.address}:4457/?dataType=jms&amp;serializationtype=jms&amp;timeout=0&amp;leasePeriod=20000&amp;socket.check_connection=false&amp;marshaller=org.jboss.jms.server.remoting.JMSWireFormat&amp;unmarshaller=org.jboss.jms.server.remoting.JMSWireFormat</attribute>
+         </delegate-config>
+         <binding port="4457"/>
+      </service-config>
+
+   </server>
+
+</service-bindings>

Property changes on: containers/jboss/src/main/resources/org/codehaus/cargo/container/internal/resources/jboss42x/cargo-binding.xml
___________________________________________________________________
Added: svn:mime-type
   + text/xml
Added: svn:keywords
   + Date Revision Author HeadURL Id
Added: svn:eol-style
   + native

Index: containers/jboss/src/main/resources/org/codehaus/cargo/container/internal/resources/jboss42x/jboss-service.xml
===================================================================
--- containers/jboss/src/main/resources/org/codehaus/cargo/container/internal/resources/jboss42x/jboss-service.xml	(revision 0)
+++ containers/jboss/src/main/resources/org/codehaus/cargo/container/internal/resources/jboss42x/jboss-service.xml	(revision 0)
@@ -0,0 +1,698 @@
+<?xml version="1.0" encoding="UTF-8"?>
+
+<!-- $Id$ -->
+
+<!-- ===================================================================== -->
+<!--  JBoss Server Configuration                                           -->
+<!-- ===================================================================== -->
+
+<server>
+
+   <!-- Load all jars from the JBOSS_DIST/server/<config>/lib directory. This
+     can be restricted to specific jars by specifying them in the archives
+     attribute.
+    -->
+   <classpath codebase="@cargo.server.lib.url@" archives="*"/>
+   @jboss.shared.classpath@
+   
+
+   <!-- ==================================================================== -->
+   <!-- JSR-77 Single JBoss Server Management Domain                         -->
+   <!-- ==================================================================== -->
+   <mbean code="org.jboss.management.j2ee.LocalJBossServerDomain"
+      name="jboss.management.local:j2eeType=J2EEDomain,name=Manager">
+      <attribute name="MainDeployer">jboss.system:service=MainDeployer</attribute>
+      <attribute name="SARDeployer">jboss.system:service=ServiceDeployer</attribute>
+      <attribute name="EARDeployer">jboss.j2ee:service=EARDeployer</attribute>
+      <attribute name="EJBDeployer">jboss.ejb:service=EJBDeployer</attribute>
+      <attribute name="RARDeployer">jboss.jca:service=RARDeployer</attribute>
+      <attribute name="CMDeployer">jboss.jca:service=ConnectionFactoryDeployer</attribute>
+      <attribute name="WARDeployer">jboss.web:service=WebServer</attribute>
+      <attribute name="CARDeployer">jboss.j2ee:service=ClientDeployer</attribute>
+      <attribute name="MailService">jboss:service=Mail</attribute>
+      <attribute name="JMSService">jboss.mq:service=DestinationManager</attribute>
+      <attribute name="JNDIService">jboss:service=Naming</attribute>
+      <attribute name="JTAService">jboss:service=TransactionManager</attribute>
+      <attribute name="UserTransactionService">jboss:service=ClientUserTransaction</attribute>
+      <attribute name="RMI_IIOPService">jboss:service=CorbaORB</attribute>
+   </mbean>
+
+   <!-- ==================================================================== -->
+   <!-- XMBean Persistence                                                   -->
+   <!-- ==================================================================== -->
+   <mbean code="org.jboss.system.pm.AttributePersistenceService"
+      name="jboss:service=AttributePersistenceService"
+      xmbean-dd="resource:xmdesc/AttributePersistenceService-xmbean.xml">
+      <!-- the AttributePersistenceService is persistent, itself -->
+
+      <!--
+      <attribute name="AttributePersistenceManagerClass">org.jboss.system.pm.XMLAttributePersistenceManager</attribute>
+      <attribute name="AttributePersistenceManagerConfig">
+         <data-directory>data/xmbean-attrs</data-directory>
+      </attribute>
+      <attribute name="ApmDestroyOnServiceStop">false</attribute>
+      <attribute name="VersionTag"></attribute>
+      -->
+   </mbean>
+
+   <!-- ==================================================================== -->
+   <!-- Thread Pool                                                          -->
+   <!-- ==================================================================== -->
+
+   <!-- A Thread pool service -->
+   <mbean code="org.jboss.util.threadpool.BasicThreadPool"
+      name="jboss.system:service=ThreadPool">
+      <attribute name="Name">JBoss System Threads</attribute>
+      <attribute name="ThreadGroupName">System Threads</attribute>
+      <!-- How long a thread will live without any tasks in MS -->
+      <attribute name="KeepAliveTime">60000</attribute>
+      <!-- The max number of threads in the pool -->
+      <attribute name="MaximumPoolSize">10</attribute>
+      <!-- The max number of tasks before the queue is full -->
+      <attribute name="MaximumQueueSize">1000</attribute>
+      <!-- The behavior of the pool when a task is added and the queue is full.
+      abort - a RuntimeException is thrown
+      run - the calling thread executes the task
+      wait - the calling thread blocks until the queue has room
+      discard - the task is silently discarded without being run
+      discardOldest - check to see if a task is about to complete and enque
+         the new task if possible, else run the task in the calling thread
+      -->
+      <attribute name="BlockingMode">run</attribute>
+   </mbean>
+
+   <!-- Preload all custom editors for VMs that don't use the thread
+        context class loader when searching for PropertyEditors. Uncomment
+        if your JDK 1.3.0 VM fails to find JBoss PropertyEditors.
+   <mbean code="org.jboss.varia.property.PropertyEditorManagerService"
+     name="jboss:type=Service,name=BootstrapEditors">
+     <attribute name="BootstrapEditors">
+       java.math.BigDecimal=org.jboss.util.propertyeditor.BigDecimalEditor
+       java.lang.Boolean=org.jboss.util.propertyeditor.BooleanEditor
+       java.lang.Class=org.jboss.util.propertyeditor.ClassEditor
+       java.util.Date=org.jboss.util.propertyeditor.DateEditor
+       java.io.File=org.jboss.util.propertyeditor.FileEditor
+       java.net.InetAddress=org.jboss.util.propertyeditor.InetAddressEditor
+       java.lang.Integer=org.jboss.util.propertyeditor.IntegerEditor
+       javax.management.ObjectName=org.jboss.mx.util.propertyeditor.ObjectNameEditor
+       java.util.Properties=org.jboss.util.propertyeditor.PropertiesEditor
+       [Ljava.lang.String;=org.jboss.util.propertyeditor.StringArrayEditor
+       java.net.URL=org.jboss.util.propertyeditor.URLEditor
+     </attribute>
+   </mbean>
+   -->
+
+   <!-- ==================================================================== -->
+   <!-- Log4j Initialization                                                 -->
+   <!-- ==================================================================== -->
+
+   <mbean code="org.jboss.logging.Log4jService"
+      name="jboss.system:type=Log4jService,service=Logging"
+	  xmbean-dd="resource:xmdesc/Log4jService-xmbean.xml">
+      <attribute name="ConfigurationURL">resource:jboss-log4j.xml</attribute>
+      <!-- Set the org.apache.log4j.helpers.LogLog.setQuiteMode. As of log4j1.2.8
+      this needs to be set to avoid a possible deadlock on exception at the
+      appender level. See bug#696819.
+      -->
+      <attribute name="Log4jQuietMode">true</attribute>
+      <!-- How frequently in seconds the ConfigurationURL is checked for changes -->
+      <attribute name="RefreshPeriod">60</attribute>
+   </mbean>
+
+   <!-- ==================================================================== -->
+   <!-- Active Alarm Table                                                   -->
+   <!-- ==================================================================== -->
+
+   <!--
+      | The ActiveAlarmTable service is a simple JMX notification listener
+      | that maintains a table with the received notifications (alarms).
+      | The alarms can be acknowledged through the jmx or the web console.
+      | Modify the SubscriptionList below to subscribe for any notification
+      | in the system and treat it as an alarm.
+      | The JMXNotificationAppender is a log4j Appender that can be configured
+      | in log4j.xml, that trasforms logging events to JMX notification so they
+      | can be fed back into the table. By storing the WARN or higher level logging
+      | events you can have a quick view of important system faults.
+      |
+      | The following attributes may be set:
+      |
+      | MaxTableSize (default 1000)
+      |  - set an upper limit to the number of stored alarms
+      | LogLevel (default DEBUG)
+      |  - the log level to use for received notification, can be set to NONE
+      | ServerId (default jboss)
+      |  - used to construct unique alarm ids
+      | SubscriptionList
+      |  - subscribe for the notifications to be stored in the table
+
+   <mbean code="org.jboss.monitor.services.ActiveAlarmTable"
+          name="jboss.monitor:service=ActiveAlarmTable">
+      <attribute name="SubscriptionList">
+         <subscription-list>
+            <mbean name="jboss.monitor:*">
+               <notification type="jboss.alarm"/>
+               <notification type="JBOSS_MONITOR_NOTIFICATION"/>
+            </mbean>
+            <mbean name="jboss.system:service=Logging,type=JMXNotificationAppender"/>
+         </subscription-list>
+      </attribute>
+   </mbean>
+   -->
+
+   <!-- ==================================================================== -->
+   <!-- JBoss RMI Classloader - only install when available                  -->
+   <!-- ==================================================================== -->
+   <mbean code="org.jboss.util.property.jmx.SystemPropertyClassValue"
+      name="jboss.rmi:type=RMIClassLoader">
+      <attribute name="Property">java.rmi.server.RMIClassLoaderSpi</attribute>
+      <attribute name="ClassName">org.jboss.system.JBossRMIClassLoader</attribute>
+   </mbean>
+
+   <!-- ==================================================================== -->
+   <!-- Service Binding                                                      -->
+   <!-- ==================================================================== -->
+
+   <!-- Automatically activated when generatting the clustering environment -->
+   <!-- @TESTSUITE_CLUSTER_CONFIG@ -->
+
+   <!--
+      | Binding service manager for port/host mapping. This is a sample
+      | config that demonstrates a JBoss instances with a server name 'ports-01'
+      | loading its bindings from an XML file using the ServicesStoreFactory
+      | implementation returned by the XMLServicesStoreFactory.
+      |
+      | ServerName: The unique name assigned to a JBoss server instance for
+      | lookup purposes. This allows a single ServicesStore to handle mulitiple
+      | JBoss servers.
+      |
+      | StoreURL: The URL string passed to org.jboss.services.binding.ServicesStore
+      | during initialization that specifies how to connect to the bindings store.
+      | StoreFactory: The org.jboss.services.binding.ServicesStoreFactory interface
+      | implementation to create to obtain the ServicesStore instance.
+   -->
+
+   <mbean code="org.jboss.services.binding.ServiceBindingManager"
+     name="jboss.system:service=ServiceBindingManager">
+     <attribute name="ServerName">cargo-binding</attribute>
+     <attribute name="StoreURL">@cargo.jboss.binding.url@</attribute>
+     <attribute name="StoreFactoryClassName">
+       org.jboss.services.binding.XMLServicesStoreFactory
+     </attribute>
+   </mbean>
+
+   <!-- ==================================================================== -->
+   <!-- Class Loading                                                        -->
+   <!-- ==================================================================== -->
+
+   <!-- A mini webserver used for dynamic and class and resource loading -->
+   <mbean code="org.jboss.web.WebService"
+      name="jboss:service=WebService">
+      <!-- The Bind address and Port -->
+      <attribute name="BindAddress">${jboss.bind.address}</attribute>
+      <attribute name="Port">8083</attribute>
+      <!--  The address to use for the host portion of the RMI codebase URL -->
+      <attribute name="Host">${java.rmi.server.hostname}</attribute>
+      <!-- Should non-EJB .class files be downloadable -->
+      <attribute name="DownloadServerClasses">true</attribute>
+      <!-- Should resources other than .class files be downloadable. Both
+         DownloadServerClasses and DownloadResources must be true for resources
+         to be downloadable. This is false by default because its generally a
+         bad idea as server configuration files that container security
+         information can be accessed.
+       -->
+      <attribute name="DownloadResources">false</attribute>
+
+      <!-- Use the default thread pool for dynamic class loading -->
+      <depends optional-attribute-name="ThreadPool"
+         proxy-type="attribute">jboss.system:service=ThreadPool</depends>
+   </mbean>
+
+   <!-- ==================================================================== -->
+   <!-- JNDI                                                                 -->
+   <!-- ==================================================================== -->
+
+   <!-- A simple mbean wrapper around the jndi Naming object. This
+   only handles an in memory instance. The NamingService uses this
+   as the JNDI store and exposes it remotely.
+   -->
+   <mbean code="org.jnp.server.NamingBeanImpl"
+      name="jboss:service=NamingBeanImpl"
+      xmbean-dd="resource:xmdesc/NamingBean-xmbean.xml">
+   </mbean>
+
+   <mbean code="org.jboss.naming.NamingService"
+      name="jboss:service=Naming"
+      xmbean-dd="resource:xmdesc/NamingService-xmbean.xml">
+      <!-- The call by value mode. true if all lookups are unmarshalled using
+         the caller's TCL, false if in VM lookups return the value by reference.
+      -->
+      <attribute name="CallByValue">false</attribute>
+      <!-- The listening port for the bootstrap JNP service. Set this to -1
+         to run the NamingService without the JNP invoker listening port.
+      -->
+      <attribute name="Port">1099</attribute>
+      <!-- The bootstrap JNP server bind address. This also sets the default
+         RMI service bind address. Empty == all addresses
+      -->
+      <attribute name="BindAddress">${jboss.bind.address}</attribute>
+      <!-- The port of the RMI naming service, 0 == anonymous -->
+      <attribute name="RmiPort">1098</attribute>
+      <!-- The RMI service bind address. Empty == all addresses
+      -->
+      <attribute name="RmiBindAddress">${jboss.bind.address}</attribute>
+      <!-- The thread pool service used to control the bootstrap lookups -->
+      <depends optional-attribute-name="LookupPool"
+         proxy-type="attribute">jboss.system:service=ThreadPool</depends>
+      <!-- An example of using the unifed invoker as the transport.
+         <depends optional-attribute-name="InvokerProxyFactory"
+         proxy-type="attribute">jboss:service=proxyFactory,type=unified,target=Naming</depends>
+      -->
+      <depends optional-attribute-name="Naming"
+         proxy-type="attribute">jboss:service=NamingBeanImpl</depends>
+   </mbean>
+
+   <mbean code="org.jboss.naming.JNDIView"
+   	name="jboss:service=JNDIView"
+   	xmbean-dd="resource:xmdesc/JNDIView-xmbean.xml">
+   	<!-- The HANamingService service name -->
+   	<attribute name="HANamingService">jboss:service=HAJNDI</attribute>
+   </mbean>
+
+   <!-- ==================================================================== -->
+   <!-- Security                                                             -->
+   <!-- ==================================================================== -->
+
+   <mbean code="org.jboss.security.plugins.SecurityConfig"
+      name="jboss.security:service=SecurityConfig">
+      <attribute name="LoginConfig">jboss.security:service=XMLLoginConfig</attribute>
+   </mbean>
+   <mbean code="org.jboss.security.auth.login.XMLLoginConfig"
+      name="jboss.security:service=XMLLoginConfig">
+      <attribute name="ConfigResource">login-config.xml</attribute>
+   </mbean>
+
+   <!-- JAAS security manager and realm mapping -->
+   <mbean code="org.jboss.security.plugins.JaasSecurityManagerService"
+      name="jboss.security:service=JaasSecurityManager">
+      <!-- A flag which indicates whether the SecurityAssociation server mode
+      is set on service creation. This is true by default since the
+      SecurityAssociation should be thread local for multi-threaded server
+      operation.
+      -->
+      <attribute name="ServerMode">true</attribute>
+      <attribute name="SecurityManagerClassName">org.jboss.security.plugins.JaasSecurityManager</attribute>
+      <attribute name="DefaultUnauthenticatedPrincipal">anonymous</attribute>
+      <!-- DefaultCacheTimeout: Specifies the default timed cache policy timeout
+      in seconds.
+      If you want to disable caching of security credentials, set this to 0 to
+      force authentication to occur every time. This has no affect if the
+      AuthenticationCacheJndiName has been changed from the default value.
+      -->
+      <attribute name="DefaultCacheTimeout">1800</attribute>
+      <!-- DefaultCacheResolution: Specifies the default timed cache policy
+      resolution in seconds. This controls the interval at which the cache
+      current timestamp is updated and should be less than the DefaultCacheTimeout
+      in order for the timeout to be meaningful. This has no affect if the
+      AuthenticationCacheJndiName has been changed from the default value.
+      -->
+      <attribute name="DefaultCacheResolution">60</attribute>
+      <!-- DeepCopySubjectMode: This set the copy mode of subjects done by the
+      security managers to be deep copies that makes copies of the subject
+      principals and credentials if they are cloneable. It should be set to
+      true if subject include mutable content that can be corrupted when
+      multiple threads have the same identity and cache flushes/logout clearing
+      the subject in one thread results in subject references affecting other
+      threads.
+      -->
+      <attribute name="DeepCopySubjectMode">false</attribute>
+   </mbean>
+
+   <!-- ==================================================================== -->
+   <!-- Transactions                                                         -->
+   <!-- ==================================================================== -->
+
+   <!-- The configurable Xid factory.  For use with Oracle, set pad to true -->
+   <mbean code="org.jboss.tm.XidFactory"
+      name="jboss:service=XidFactory">
+      <!--attribute name="Pad">true</attribute-->
+   </mbean>
+
+   <!--
+      | The fast in-memory transaction manager.
+      | Deprecated in JBossAS v4.2. Use JBossTS JTA instead.
+    - ->
+   <mbean code="org.jboss.tm.TransactionManagerService"
+      name="jboss:service=TransactionManager"
+      xmbean-dd="resource:xmdesc/TransactionManagerService-xmbean.xml">
+      <attribute name="TransactionTimeout">300</attribute>
+      <!- - set to false to disable transaction demarcation over IIOP - ->
+      <attribute name="GlobalIdsEnabled">true</attribute>
+      <depends optional-attribute-name="XidFactory">jboss:service=XidFactory</depends>
+
+      <!- - Transaction Integrity Checking - ->
+      <!- - Force a rollback if another thread is associated with the transaction at commit - ->
+      <!- - <depends optional-attribute-name="TransactionIntegrityFactory"
+               proxy-type="org.jboss.tm.integrity.TransactionIntegrityFactory">
+         <mbean code="org.jboss.tm.integrity.FailIncompleteTransaction"
+                name="jboss:service=TransactionManager,plugin=TransactionIntegrity"/>
+      </depends> - ->
+   </mbean>
+   -->
+
+   <!-- JBoss Transactions JTA -->
+   <mbean code="com.arjuna.ats.jbossatx.jta.TransactionManagerService"
+      name="jboss:service=TransactionManager">
+      <attribute name="TransactionTimeout">300</attribute>
+      <attribute name="ObjectStoreDir">${jboss.server.data.dir}/tx-object-store</attribute>
+   </mbean>
+
+   <!--
+      | UserTransaction support.
+    -->
+   <mbean code="org.jboss.tm.usertx.server.ClientUserTransactionService"
+      name="jboss:service=ClientUserTransaction"
+      xmbean-dd="resource:xmdesc/ClientUserTransaction-xmbean.xml">
+      <depends>
+         <mbean code="org.jboss.invocation.jrmp.server.JRMPProxyFactory"
+            name="jboss:service=proxyFactory,target=ClientUserTransactionFactory">
+            <attribute name="InvokerName">jboss:service=invoker,type=jrmp</attribute>
+            <attribute name="TargetName">jboss:service=ClientUserTransaction</attribute>
+            <attribute name="JndiName">UserTransactionSessionFactory</attribute>
+            <attribute name="ExportedInterface">org.jboss.tm.usertx.interfaces.UserTransactionSessionFactory</attribute>
+            <attribute name="ClientInterceptors">
+               <interceptors>
+                  <interceptor>org.jboss.proxy.ClientMethodInterceptor</interceptor>
+                  <interceptor>org.jboss.invocation.InvokerInterceptor</interceptor>
+               </interceptors>
+            </attribute>
+            <depends>jboss:service=invoker,type=jrmp</depends>
+         </mbean>
+      </depends>
+      <depends optional-attribute-name="TxProxyName">
+         <mbean code="org.jboss.invocation.jrmp.server.JRMPProxyFactory"
+            name="jboss:service=proxyFactory,target=ClientUserTransaction">
+            <attribute name="InvokerName">jboss:service=invoker,type=jrmp</attribute>
+            <attribute name="TargetName">jboss:service=ClientUserTransaction</attribute>
+            <attribute name="JndiName"></attribute>
+            <attribute name="ExportedInterface">org.jboss.tm.usertx.interfaces.UserTransactionSession</attribute>
+            <attribute name="ClientInterceptors">
+               <interceptors>
+                  <interceptor>org.jboss.proxy.ClientMethodInterceptor</interceptor>
+                  <interceptor>org.jboss.invocation.InvokerInterceptor</interceptor>
+               </interceptors>
+            </attribute>
+            <depends>jboss:service=invoker,type=jrmp</depends>
+         </mbean>
+      </depends>
+   </mbean>
+
+   <!-- ==================================================================== -->
+   <!-- Invokers to the JMX node                                             -->
+   <!-- ==================================================================== -->
+
+   <!-- Unified invoker (based on remoting) -->
+   <mbean code="org.jboss.invocation.unified.server.UnifiedInvoker"
+      name="jboss:service=invoker,type=unified">
+      <!-- To turn on strict RMI exception propagation uncomment block below -->
+      <!-- This will cause the UnifiedInvokerProxy to wrap RemoteExceptions  -->
+      <!-- within a ServerException, otherwise will throw root exception     -->
+      <!-- (not RemoteException)                                             -->
+      <!-- <attribute name="StrictRMIException">true</attribute> -->
+      <depends>jboss:service=TransactionManager</depends>
+      <depends>jboss.remoting:service=Connector,transport=socket</depends>
+   </mbean>
+
+   <!-- RMI/JRMP invoker -->
+   <mbean code="org.jboss.invocation.jrmp.server.JRMPInvoker"
+      name="jboss:service=invoker,type=jrmp">
+      <attribute name="RMIObjectPort">4444</attribute>
+      <attribute name="ServerAddress">${jboss.bind.address}</attribute>
+      <!--
+      <attribute name="RMIClientSocketFactory">custom</attribute>
+      <attribute name="RMIServerSocketFactory">custom</attribute>
+      <attribute name="RMIServerSocketAddr">custom</attribute>
+      <attribute name="SecurityDomain">ssl-domain-name</attribute>
+      -->
+      <depends>jboss:service=TransactionManager</depends>
+   </mbean>
+
+   <mbean code="org.jboss.invocation.local.LocalInvoker"
+      name="jboss:service=invoker,type=local">
+
+      <depends>jboss:service=TransactionManager</depends>
+   </mbean>
+
+   <mbean code="org.jboss.invocation.pooled.server.PooledInvoker"
+      name="jboss:service=invoker,type=pooled">
+      <attribute name="NumAcceptThreads">1</attribute>
+      <attribute name="MaxPoolSize">300</attribute>
+      <attribute name="ClientMaxPoolSize">300</attribute>
+      <attribute name="SocketTimeout">60000</attribute>
+      <attribute name="ServerBindAddress">${jboss.bind.address}</attribute>
+      <attribute name="ServerBindPort">4445</attribute>
+      <attribute name="ClientConnectAddress">${jboss.bind.address}</attribute>
+      <attribute name="ClientConnectPort">0</attribute>
+      <attribute name="ClientRetryCount">1</attribute>
+      <attribute name="EnableTcpNoDelay">false</attribute>
+
+      <!-- Customized socket factory attributes
+      <attribute name="ClientSocketFactoryName">custom.client.factory</attribute>
+      <attribute name="ServerSocketFactoryName">custom.server.factory</attribute>
+      <attribute name="SslDomain">java:/jaas/pooledInvoker</attribute>
+      -->
+      <depends optional-attribute-name="TransactionManagerService">jboss:service=TransactionManager</depends>
+   </mbean>
+
+   <!-- ==================================================================== -->
+   <!-- Remoting services 						                                   -->
+   <!-- ==================================================================== -->
+
+   <!-- For detailed description of all these configuration attributes, please see the -->
+   <!-- JBoss Remoting User's Guide or wiki (http://labs.jboss.com/portal/jbossremoting/docs/guide/index.html) -->
+
+    <!-- The NetworkRegistry contains all the local and remote -->
+    <!-- servers that it recognizes.  The remote ones registered -->
+    <!-- are dependant on the detectors running and which domains -->
+    <!-- they are configured to identify.                         -->
+    <mbean code="org.jboss.remoting.network.NetworkRegistry"
+           name="jboss.remoting:service=NetworkRegistry"/>
+
+   <!-- The Connector is the core component of the remoting server service. -->
+   <!-- It binds the remoting invoker (transport protocol, callback configuration, -->
+   <!-- data marshalling, etc.) with the invocation handlers.  -->
+   <mbean code="org.jboss.remoting.transport.Connector"
+          name="jboss.remoting:service=Connector,transport=socket"
+          display-name="Socket transport Connector">
+
+       <!-- Can either just specify the InvokerLocator attribute and not the invoker element in the -->
+       <!-- Configuration attribute, or do the full invoker configuration in the in invoker element -->
+       <!-- of the Configuration attribute. -->
+
+       <!-- Remember that if you do use more than one param on the uri, will have to include as a CDATA, -->
+       <!-- otherwise, parser will complain. -->
+       <!-- <attribute name="InvokerLocator"><![CDATA[socket://${jboss.bind.address}:4446/?datatype=invocation]]></attribute> -->
+
+      <attribute name="Configuration">
+         <!-- Using the following <invoker> element instead of the InvokerLocator above because specific attributes needed. -->
+         <!-- If wanted to use any of the parameters below, can just add them as parameters to the url above if wanted use the InvokerLocator attribute. -->
+         <config>
+            <!-- Other than transport type and handler, none of these configurations are required (will just use defaults). -->
+            <invoker transport="socket">
+               <attribute name="dataType" isParam="true">invocation</attribute>
+               <attribute name="marshaller" isParam="true">org.jboss.invocation.unified.marshall.InvocationMarshaller</attribute>
+               <attribute name="unmarshaller" isParam="true">org.jboss.invocation.unified.marshall.InvocationUnMarshaller</attribute>
+               <!-- This will be port on which the marshall loader port runs on.  -->
+               <!-- <attribute name="loaderport" isParam="true">4447</attribute> -->
+               <!-- The following are specific to socket invoker -->
+               <!-- <attribute name="numAcceptThreads">1</attribute>-->
+               <!-- <attribute name="maxPoolSize">303</attribute>-->
+               <!-- <attribute name="clientMaxPoolSize" isParam="true">304</attribute>-->
+               <attribute name="socketTimeout" isParam="true">600000</attribute>
+               <attribute name="serverBindAddress">${jboss.bind.address}</attribute>
+               <attribute name="serverBindPort">4446</attribute>
+               <!-- <attribute name="clientConnectAddress">216.23.33.2</attribute> -->
+               <!-- <attribute name="clientConnectPort">7777</attribute> -->
+               <attribute name="enableTcpNoDelay" isParam="true">true</attribute>
+               <!-- <attribute name="backlog">200</attribute>-->
+               <!-- The following is for callback configuration and is independant of invoker type -->
+               <!-- <attribute name="callbackMemCeiling">30</attribute>-->
+               <!-- indicates callback store by fully qualified class name -->
+               <!-- <attribute name="callbackStore">org.jboss.remoting.CallbackStore</attribute>-->
+               <!-- indicates callback store by object name -->
+               <!-- <attribute name="callbackStore">jboss.remoting:service=CallbackStore,type=Serializable</attribute> -->
+               <!-- config params for callback store.  if were declaring callback store via object name, -->
+               <!-- could have specified these config params there. -->
+               <!-- StoreFilePath indicates to which directory to write the callback objects. -->
+               <!-- The default value is the property value of 'jboss.server.data.dir' and if this is not set, -->
+               <!-- then will be 'data'. Will then append 'remoting' and the callback client's session id. -->
+               <!-- An example would be 'data\remoting\5c4o05l-9jijyx-e5b6xyph-1-e5b6xyph-2'. -->
+               <!-- <attribute name="StoreFilePath">callback</attribute>-->
+               <!-- StoreFileSuffix indicates the file suffix to use for the callback objects written to disk. -->
+               <!-- The default value for file suffix is 'ser'. -->
+               <!-- <attribute name="StoreFileSuffix">cst</attribute>-->
+            </invoker>
+
+            <!-- At least one handler is required by the connector.  If have more than one, must decalre -->
+            <!-- different subsystem values.  Otherwise, all invocations will be routed to the only one -->
+            <!-- that is declared. -->
+            <handlers>
+               <!-- can also specify handler by fully qualified classname -->
+               <handler subsystem="invoker">jboss:service=invoker,type=unified</handler>
+            </handlers>
+         </config>
+      </attribute>
+      <depends>jboss.remoting:service=NetworkRegistry</depends>
+   </mbean>
+
+
+   <!-- <mbean code="org.jboss.remoting.detection.jndi.JNDIDetector"-->
+   <!--      name="jboss.remoting:service=Detector,transport=jndi">-->
+   <!-- host to which the detector will connect to for the JNDI server. -->
+   <!-- <attribute name="Host">localhost</attribute>-->
+   <!-- port to which detector will connect to for the JNDI server. -->
+   <!-- <attribute name="Port">5555</attribute>-->
+   <!-- context factory string used when connecting to the JNDI server. -->
+   <!-- The default is org.jnp.interfaces.NamingContextFactory. -->
+   <!-- <attribute name="ContextFactory">org.acme.NamingContextFactory</attribute> -->
+   <!-- url package string to use when connecting to the JNDI server. -->
+   <!-- The default is org.jboss.naming:org.jnp.interfaces. -->
+   <!-- <attribute name="URLPackage">org.acme.naming</attribute> -->
+   <!-- Sets the number of detection iterations before manually pinging -->
+   <!-- remote server to make sure still alive. This is needed since remote server -->
+   <!-- could crash and yet still have an entry in the JNDI server, -->
+   <!-- thus making it appear that it is still there. The default value is 5. -->
+   <!-- <attribute name="CleanDetectionNumber">20</attribute>-->
+
+   <!-- Specifies the domains in which the detector will recognize -->
+   <!-- detections.  If servers are not configured to be in these -->
+   <!-- domains, they will not be added to NetworkRegistry. -->
+   <!--      <attribute name="Configuration">-->
+   <!--         <domains>-->
+   <!--            <domain>roxanne</domain>-->
+   <!--            <domain>sparky</domain>-->
+   <!--         </domains>-->
+   <!--      </attribute>-->
+   <!--   </mbean>-->
+
+
+   <!-- ==================================================================== -->
+   <!-- Monitoring and Management                                            -->
+   <!-- ==================================================================== -->
+
+   <!-- Uncomment to enable JMX monitoring of the bean cache
+   <mbean code="org.jboss.monitor.BeanCacheMonitor"
+          name="jboss.monitor:name=BeanCacheMonitor"/>
+   -->
+
+   <!-- Uncomment to enable JMX monitoring of the entity bean locking
+   <mbean code="org.jboss.monitor.EntityLockMonitor"
+          name="jboss.monitor:name=EntityLockMonitor"/>
+   -->
+
+   <!-- ==================================================================== -->
+   <!-- An MBean that is a registry for JDBC type-mapping metadata           -->
+   <!-- ==================================================================== -->
+
+   <mbean code="org.jboss.ejb.plugins.cmp.jdbc.metadata.MetaDataLibrary"
+      name="jboss.jdbc:service=metadata"/>
+
+   <!-- ==================================================================== -->
+   <!-- Deployment Scanning                                                  -->
+   <!-- ==================================================================== -->
+
+   <!-- An mbean for hot deployment/undeployment of archives.
+   -->
+   <mbean code="org.jboss.deployment.scanner.URLDeploymentScanner"
+      name="jboss.deployment:type=DeploymentScanner,flavor=URL">
+
+      <!-- Uncomment (and comment/remove version below) to enable usage of the
+        DeploymentCache
+      <depends optional-attribute-name="Deployer">jboss.deployment:type=DeploymentCache</depends>
+      -->
+      <depends optional-attribute-name="Deployer">jboss.system:service=MainDeployer</depends>
+
+      <!-- The URLComparator can be used to specify a deployment ordering
+           for deployments found in a scanned directory.  The class specified
+           must be an implementation of java.util.Comparator, it must be able
+           to compare two URL objects, and it must have a no-arg constructor.
+           Two deployment comparators are shipped with JBoss:
+             - org.jboss.deployment.DeploymentSorter
+               Sorts by file extension, as follows:
+                 "sar", "service.xml", "rar", "jar", "war", "wsr", "ear", "zip",
+                 "*"
+             - org.jboss.deployment.scanner.PrefixDeploymentSorter
+               If the name portion of the url begins with 1 or more digits, those
+               digits are converted to an int (ignoring leading zeroes), and
+               files are deployed in that order.  Files that do not start with
+               any digits will be deployed first, and they will be sorted by
+               extension as above with DeploymentSorter.
+      -->
+      <attribute name="URLComparator">org.jboss.deployment.DeploymentSorter</attribute>
+
+      <!--
+      <attribute name="URLComparator">org.jboss.deployment.scanner.PrefixDeploymentSorter</attribute>
+      -->
+
+      <!-- The FilterInstance specifies a URLLister.URLFilter for scanned
+           directories. This DeploymentFilter is initialized with the given
+           prefixes, suffixes and matches that define which URLs should be
+           ignored.
+      -->
+      <attribute name="FilterInstance"
+         attributeClass="org.jboss.deployment.scanner.DeploymentFilter"
+         serialDataType="javaBean">
+         <!-- Files starting with theses strings are ignored -->
+         <property name="prefixes">#,%,\,,.,_$</property>
+         <!-- Files ending with theses strings are ignored -->
+         <property name="suffixes">#,$,%,~,\,v,.BAK,.bak,.old,.orig,.tmp,.rej,.sh</property>
+         <!-- Files matching with theses strings are ignored -->
+         <property name="matches">.make.state,.nse_depinfo,CVS,CVS.admin,RCS,RCSLOG,SCCS,TAGS,core,tags</property>
+      </attribute>
+
+      <!-- Frequency in milliseconds to rescan the URLs for changes -->
+      <attribute name="ScanPeriod">5000</attribute>
+
+      <!-- A flag to disable the scans -->
+      <attribute name="ScanEnabled">true</attribute>
+
+      <!-- URLs are comma separated and resolve relative to the server home URL
+         unless the given path is absolute. If the URL ends in "/" it is
+         considered a collection and scanned, otherwise it is simply deployed;
+         this follows RFC2518 convention and allows discrimination between
+         collections and directories that are simply unpacked archives.
+
+         URLs may be local (file:) or remote (http:). Scanning is supported
+         for remote URLs but unpacked deployment units are not.
+
+         Example URLs:
+            deploy/
+                 scans ${jboss.server.url}/deploy/, which is local or remote
+                 depending on the URL used to boot the server
+            ${jboss.server.home}/deploy/
+                 scans ${jboss.server.home)/deploy, which is always local
+            file:/var/opt/myapp.ear
+                 deploy myapp.ear from a local location
+            file:/var/opt/apps/
+                 scans the specified directory
+            http://www.test.com/netboot/myapp.ear
+                 deploys myapp.ear from a remote location
+            http://www.test.com/netboot/apps/
+                 scans the specified WebDAV location
+       -->
+      <attribute name="URLs">
+         @cargo.server.deploy.url@
+      </attribute>
+
+      <!-- Indicates if the scanner should recursively scan directories that
+      contain no "." in their names. This can be used to group applications
+      and services that must be deployed and that have the same
+      logical function in the same directory i.e.
+        deploy/JMX/
+        deploy/JMS/
+        ...
+      -->
+      <attribute name="RecursiveSearch">True</attribute>
+
+   </mbean>
+
+</server>

Property changes on: containers/jboss/src/main/resources/org/codehaus/cargo/container/internal/resources/jboss42x/jboss-service.xml
___________________________________________________________________
Added: svn:mime-type
   + text/xml
Added: svn:keywords
   + Date Revision Author HeadURL Id
Added: svn:eol-style
   + native

Index: containers/jboss/src/main/resources/org/codehaus/cargo/container/internal/resources/jboss42x/log4j.xml
===================================================================
--- containers/jboss/src/main/resources/org/codehaus/cargo/container/internal/resources/jboss42x/log4j.xml	(revision 0)
+++ containers/jboss/src/main/resources/org/codehaus/cargo/container/internal/resources/jboss42x/log4j.xml	(revision 0)
@@ -0,0 +1,596 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE log4j:configuration SYSTEM "log4j.dtd">
+
+<!-- ===================================================================== -->
+<!--                                                                       -->
+<!--  Log4j Configuration                                                  -->
+<!--                                                                       -->
+<!-- ===================================================================== -->
+
+<!-- $Id$ -->
+
+<!--
+   | For more configuration infromation and examples see the Jakarta Log4j
+   | owebsite: http://jakarta.apache.org/log4j
+ -->
+
+<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/" debug="false">
+
+   <!-- ================================= -->
+   <!-- Preserve messages in a local file -->
+   <!-- ================================= -->
+
+   <!-- A time/date based rolling appender -->
+   <appender name="FILE" class="org.jboss.logging.appender.DailyRollingFileAppender">
+      <errorHandler class="org.jboss.logging.util.OnlyOnceErrorHandler"/>
+      <param name="File" value="${jboss.server.log.dir}/server.log"/>
+      <param name="Append" value="false"/>
+      <param name="Threshold" value="@cargo.logging@"/>
+
+      <!-- Rollover at midnight each day -->
+      <param name="DatePattern" value="'.'yyyy-MM-dd"/>
+
+      <!-- Rollover at the top of each hour
+      <param name="DatePattern" value="'.'yyyy-MM-dd-HH"/>
+      -->
+
+      <layout class="org.apache.log4j.PatternLayout">
+         <!-- The default pattern: Date Priority [Category] Message\n -->
+         <param name="ConversionPattern" value="%d %-5p [%c] %m%n"/>
+
+         <!-- The full pattern: Date MS Priority [Category] (Thread:NDC) Message\n
+         <param name="ConversionPattern" value="%d %-5r %-5p [%c] (%t:%x) %m%n"/>
+          -->
+      </layout>
+   </appender>
+
+   <!-- A size based file rolling appender
+   <appender name="FILE" class="org.jboss.logging.appender.RollingFileAppender">
+     <errorHandler class="org.jboss.logging.util.OnlyOnceErrorHandler"/>
+     <param name="File" value="${jboss.server.log.dir}/server.log"/>
+     <param name="Append" value="false"/>
+     <param name="MaxFileSize" value="500KB"/>
+     <param name="MaxBackupIndex" value="1"/>
+
+     <layout class="org.apache.log4j.PatternLayout">
+       <param name="ConversionPattern" value="%d %-5p [%c] %m%n"/>
+     </layout>
+   </appender>
+   -->
+
+   <!-- ============================== -->
+   <!-- Append messages to the console -->
+   <!-- ============================== -->
+
+   <appender name="CONSOLE" class="org.apache.log4j.ConsoleAppender">
+      <errorHandler class="org.jboss.logging.util.OnlyOnceErrorHandler"/>
+      <param name="Target" value="System.out"/>
+      <param name="Threshold" value="@cargo.logging@"/>
+
+      <layout class="org.apache.log4j.PatternLayout">
+         <!-- The default pattern: Date Priority [Category] Message\n -->
+         <param name="ConversionPattern" value="%d{ABSOLUTE} %-5p [%c{1}] %m%n"/>
+      </layout>
+   </appender>
+
+   <!-- ====================== -->
+   <!-- More Appender examples -->
+   <!-- ====================== -->
+
+   <!-- Buffer events and log them asynchronously
+   <appender name="ASYNC" class="org.apache.log4j.AsyncAppender">
+     <errorHandler class="org.jboss.logging.util.OnlyOnceErrorHandler"/>
+     <appender-ref ref="FILE"/>
+     <appender-ref ref="CONSOLE"/>
+     <appender-ref ref="SMTP"/>
+   </appender>
+   -->
+
+   <!-- EMail events to an administrator
+   <appender name="SMTP" class="org.apache.log4j.net.SMTPAppender">
+     <errorHandler class="org.jboss.logging.util.OnlyOnceErrorHandler"/>
+     <param name="Threshold" value="ERROR"/>
+     <param name="To" value="admin@myhost.domain.com"/>
+     <param name="From" value="nobody@myhost.domain.com"/>
+     <param name="Subject" value="JBoss Sever Errors"/>
+     <param name="SMTPHost" value="localhost"/>
+     <param name="BufferSize" value="10"/>
+     <layout class="org.apache.log4j.PatternLayout">
+       <param name="ConversionPattern" value="[%d{ABSOLUTE},%c{1}] %m%n"/>
+     </layout>
+   </appender>
+   -->
+
+   <!-- Syslog events
+   <appender name="SYSLOG" class="org.apache.log4j.net.SyslogAppender">
+     <errorHandler class="org.jboss.logging.util.OnlyOnceErrorHandler"/>
+     <param name="Facility" value="LOCAL7"/>
+     <param name="FacilityPrinting" value="true"/>
+     <param name="SyslogHost" value="localhost"/>
+     <layout class="org.apache.log4j.PatternLayout">
+       <param name="ConversionPattern" value="[%d{ABSOLUTE},%c{1}] %m%n"/>
+     </layout>
+   </appender>
+   -->
+
+   <!-- Log events to JMS (requires a topic to be created)
+   <appender name="JMS" class="org.apache.log4j.net.JMSAppender">
+     <errorHandler class="org.jboss.logging.util.OnlyOnceErrorHandler"/>
+     <param name="Threshold" value="ERROR"/>
+     <param name="TopicConnectionFactoryBindingName" value="java:/ConnectionFactory"/>
+     <param name="TopicBindingName" value="topic/MyErrorsTopic"/>
+   </appender>
+   -->
+
+   <!-- Log events through SNMP
+   <appender name="TRAP_LOG" class="org.apache.log4j.ext.SNMPTrapAppender">
+     <errorHandler class="org.jboss.logging.util.OnlyOnceErrorHandler"/>
+     <param name="ImplementationClassName" value="org.apache.log4j.ext.JoeSNMPTrapSender"/>
+     <param name="ManagementHost" value="127.0.0.1"/>
+     <param name="ManagementHostTrapListenPort" value="162"/>
+     <param name="EnterpriseOID" value="1.3.6.1.4.1.24.0"/>
+     <param name="LocalIPAddress" value="127.0.0.1"/>
+     <param name="LocalTrapSendPort" value="161"/>
+     <param name="GenericTrapType" value="6"/>
+     <param name="SpecificTrapType" value="12345678"/>
+     <param name="CommunityString" value="public"/>
+     <param name="ForwardStackTraceWithTrap" value="true"/>
+     <param name="Threshold" value="DEBUG"/>
+     <param name="ApplicationTrapOID" value="1.3.6.1.4.1.24.12.10.22.64"/>
+     <layout class="org.apache.log4j.PatternLayout">
+            <param name="ConversionPattern" value="%d,%p,[%t],[%c],%m%n"/>
+     </layout>
+   </appender>
+   -->
+
+   <!--  Emit events as JMX notifications
+   <appender name="JMX" class="org.jboss.monitor.services.JMXNotificationAppender">
+      <errorHandler class="org.jboss.logging.util.OnlyOnceErrorHandler"/>
+
+      <param name="Threshold" value="WARN"/>
+      <param name="ObjectName" value="jboss.system:service=Logging,type=JMXNotificationAppender"/>
+
+      <layout class="org.apache.log4j.PatternLayout">
+         <param name="ConversionPattern" value="%d %-5p [%c] %m"/>
+      </layout>
+   </appender>
+   -->
+
+   <!-- ================ -->
+   <!-- Limit categories -->
+   <!-- ================ -->
+
+   <!-- Limit the org.apache category to INFO as its DEBUG is verbose -->
+   <category name="org.apache">
+      <priority value="INFO"/>
+   </category>
+
+   <!-- Limit the org.jboss.serial (jboss-serialization) to INFO as its DEBUG is verbose -->
+   <category name="org.jboss.serial">
+      <priority value="INFO"/>
+   </category>
+
+   <!-- Limit the org.jgroups category to WARN as its INFO is verbose -->
+   <category name="org.jgroups">
+      <priority value="WARN"/>
+   </category>
+
+   <!-- Limit the jacorb category to WARN as its INFO is verbose -->
+   <category name="jacorb">
+      <priority value="WARN"/>
+   </category>
+
+   <!-- Limit JBoss categories
+   <category name="org.jboss">
+      <priority value="INFO"/>
+   </category>
+   -->
+
+   <!-- Limit the JSR77 categories -->
+   <category name="org.jboss.management">
+      <priority value="INFO"/>
+   </category>
+
+   <!-- Enable JBossWS message tracing
+   <category name="jbossws.SOAPMessage">
+    <priority value="TRACE"/>
+   </category>
+   -->
+
+   <!-- Decrease the priority threshold for the org.jboss.varia category
+   <category name="org.jboss.varia">
+     <priority value="DEBUG"/>
+   </category>
+   -->
+
+   <!-- Show the evolution of the DataSource pool in the logs [inUse/Available/Max]
+   <category name="org.jboss.resource.connectionmanager.JBossManagedConnectionPool">
+     <priority value="TRACE"/>
+   </category>
+   -->
+
+   <!--
+      | An example of enabling the custom TRACE level priority that is used
+      | by the JBoss internals to diagnose low level details. This example
+      | turns on TRACE level msgs for the org.jboss.ejb.plugins package and its
+      | subpackages. This will produce A LOT of logging output.
+      |
+      | Note: since jboss AS 4.2.x, the trace level is supported natively by
+      | log4j, so although the custom org.jboss.logging.XLevel priority will
+      | still work, there is no need to use it. The two examples that follow
+      | will both enable trace logging.
+   <category name="org.jboss.system">
+     <priority value="TRACE" class="org.jboss.logging.XLevel"/>
+   </category>
+   <category name="org.jboss.ejb.plugins">
+     <priority value="TRACE"/>
+   </category>
+   -->
+
+   <!--
+       | Logs these events to SNMP:
+           - server starts/stops
+           - cluster evolution (node death/startup)
+           - When an EJB archive is deployed (and associated verified messages)
+           - When an EAR archive is deployed
+
+   <category name="org.jboss.system.server.Server">
+     <priority value="INFO" />
+     <appender-ref ref="TRAP_LOG"/>
+   </category>
+
+   <category name="org.jboss.ha.framework.interfaces.HAPartition.lifecycle">
+     <priority value="INFO" />
+     <appender-ref ref="TRAP_LOG"/>
+   </category>
+
+   <category name="org.jboss.deployment.MainDeployer">
+     <priority value="ERROR" />
+     <appender-ref ref="TRAP_LOG"/>
+   </category>
+
+   <category name="org.jboss.ejb.EJBDeployer">
+     <priority value="INFO" />
+     <appender-ref ref="TRAP_LOG"/>
+   </category>
+
+   <category name="org.jboss.deployment.EARDeployer">
+     <priority value="INFO" />
+     <appender-ref ref="TRAP_LOG"/>
+   </category>
+
+   -->
+
+   <!-- ======================= -->
+   <!-- Setup the Root category -->
+   <!-- ======================= -->
+
+   <root>
+      <appender-ref ref="CONSOLE"/>
+      <appender-ref ref="FILE"/>
+   </root>
+
+   <!-- Clustering logging -->
+   <!-- Uncomment the following to redirect the org.jgroups and
+      org.jboss.ha categories to a cluster.log file.
+
+   <appender name="CLUSTER" class="org.jboss.logging.appender.RollingFileAppender">
+     <errorHandler class="org.jboss.logging.util.OnlyOnceErrorHandler"/>
+     <param name="File" value="${jboss.server.log.dir}/cluster.log"/>
+     <param name="Append" value="false"/>
+     <param name="MaxFileSize" value="500KB"/>
+     <param name="MaxBackupIndex" value="1"/>
+
+     <layout class="org.apache.log4j.PatternLayout">
+       <param name="ConversionPattern" value="%d %-5p [%c] %m%n"/>
+     </layout>
+   </appender>
+   <category name="org.jgroups">
+     <priority value="DEBUG" />
+     <appender-ref ref="CLUSTER"/>
+   </category>
+   <category name="org.jboss.ha">
+     <priority value="DEBUG" />
+     <appender-ref ref="CLUSTER"/>
+   </category>
+   -->
+
+</log4j:configuration>
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE log4j:configuration SYSTEM "log4j.dtd">
+
+<!-- ===================================================================== -->
+<!--                                                                       -->
+<!--  Log4j Configuration                                                  -->
+<!--                                                                       -->
+<!-- ===================================================================== -->
+
+<!-- $Id$ -->
+
+<!--
+   | For more configuration infromation and examples see the Jakarta Log4j
+   | owebsite: http://jakarta.apache.org/log4j
+ -->
+
+<log4j:configuration xmlns:log4j="http://jakarta.apache.org/log4j/" debug="false">
+
+   <!-- ================================= -->
+   <!-- Preserve messages in a local file -->
+   <!-- ================================= -->
+
+   <!-- A time/date based rolling appender -->
+   <appender name="FILE" class="org.jboss.logging.appender.DailyRollingFileAppender">
+      <errorHandler class="org.jboss.logging.util.OnlyOnceErrorHandler"/>
+      <param name="File" value="${jboss.server.log.dir}/server.log"/>
+      <param name="Append" value="false"/>
+      <param name="Threshold" value="@cargo.logging@"/>
+
+      <!-- Rollover at midnight each day -->
+      <param name="DatePattern" value="'.'yyyy-MM-dd"/>
+
+      <!-- Rollover at the top of each hour
+      <param name="DatePattern" value="'.'yyyy-MM-dd-HH"/>
+      -->
+
+      <layout class="org.apache.log4j.PatternLayout">
+         <!-- The default pattern: Date Priority [Category] Message\n -->
+         <param name="ConversionPattern" value="%d %-5p [%c] %m%n"/>
+
+         <!-- The full pattern: Date MS Priority [Category] (Thread:NDC) Message\n
+         <param name="ConversionPattern" value="%d %-5r %-5p [%c] (%t:%x) %m%n"/>
+          -->
+      </layout>
+   </appender>
+
+   <!-- A size based file rolling appender
+   <appender name="FILE" class="org.jboss.logging.appender.RollingFileAppender">
+     <errorHandler class="org.jboss.logging.util.OnlyOnceErrorHandler"/>
+     <param name="File" value="${jboss.server.log.dir}/server.log"/>
+     <param name="Append" value="false"/>
+     <param name="MaxFileSize" value="500KB"/>
+     <param name="MaxBackupIndex" value="1"/>
+
+     <layout class="org.apache.log4j.PatternLayout">
+       <param name="ConversionPattern" value="%d %-5p [%c] %m%n"/>
+     </layout>
+   </appender>
+   -->
+
+   <!-- ============================== -->
+   <!-- Append messages to the console -->
+   <!-- ============================== -->
+
+   <appender name="CONSOLE" class="org.apache.log4j.ConsoleAppender">
+      <errorHandler class="org.jboss.logging.util.OnlyOnceErrorHandler"/>
+      <param name="Target" value="System.out"/>
+      <param name="Threshold" value="@cargo.logging@"/>
+
+      <layout class="org.apache.log4j.PatternLayout">
+         <!-- The default pattern: Date Priority [Category] Message\n -->
+         <param name="ConversionPattern" value="%d{ABSOLUTE} %-5p [%c{1}] %m%n"/>
+      </layout>
+   </appender>
+
+   <!-- ====================== -->
+   <!-- More Appender examples -->
+   <!-- ====================== -->
+
+   <!-- Buffer events and log them asynchronously
+   <appender name="ASYNC" class="org.apache.log4j.AsyncAppender">
+     <errorHandler class="org.jboss.logging.util.OnlyOnceErrorHandler"/>
+     <appender-ref ref="FILE"/>
+     <appender-ref ref="CONSOLE"/>
+     <appender-ref ref="SMTP"/>
+   </appender>
+   -->
+
+   <!-- EMail events to an administrator
+   <appender name="SMTP" class="org.apache.log4j.net.SMTPAppender">
+     <errorHandler class="org.jboss.logging.util.OnlyOnceErrorHandler"/>
+     <param name="Threshold" value="ERROR"/>
+     <param name="To" value="admin@myhost.domain.com"/>
+     <param name="From" value="nobody@myhost.domain.com"/>
+     <param name="Subject" value="JBoss Sever Errors"/>
+     <param name="SMTPHost" value="localhost"/>
+     <param name="BufferSize" value="10"/>
+     <layout class="org.apache.log4j.PatternLayout">
+       <param name="ConversionPattern" value="[%d{ABSOLUTE},%c{1}] %m%n"/>
+     </layout>
+   </appender>
+   -->
+
+   <!-- Syslog events
+   <appender name="SYSLOG" class="org.apache.log4j.net.SyslogAppender">
+     <errorHandler class="org.jboss.logging.util.OnlyOnceErrorHandler"/>
+     <param name="Facility" value="LOCAL7"/>
+     <param name="FacilityPrinting" value="true"/>
+     <param name="SyslogHost" value="localhost"/>
+     <layout class="org.apache.log4j.PatternLayout">
+       <param name="ConversionPattern" value="[%d{ABSOLUTE},%c{1}] %m%n"/>
+     </layout>
+   </appender>
+   -->
+
+   <!-- Log events to JMS (requires a topic to be created)
+   <appender name="JMS" class="org.apache.log4j.net.JMSAppender">
+     <errorHandler class="org.jboss.logging.util.OnlyOnceErrorHandler"/>
+     <param name="Threshold" value="ERROR"/>
+     <param name="TopicConnectionFactoryBindingName" value="java:/ConnectionFactory"/>
+     <param name="TopicBindingName" value="topic/MyErrorsTopic"/>
+   </appender>
+   -->
+
+   <!-- Log events through SNMP
+   <appender name="TRAP_LOG" class="org.apache.log4j.ext.SNMPTrapAppender">
+     <errorHandler class="org.jboss.logging.util.OnlyOnceErrorHandler"/>
+     <param name="ImplementationClassName" value="org.apache.log4j.ext.JoeSNMPTrapSender"/>
+     <param name="ManagementHost" value="127.0.0.1"/>
+     <param name="ManagementHostTrapListenPort" value="162"/>
+     <param name="EnterpriseOID" value="1.3.6.1.4.1.24.0"/>
+     <param name="LocalIPAddress" value="127.0.0.1"/>
+     <param name="LocalTrapSendPort" value="161"/>
+     <param name="GenericTrapType" value="6"/>
+     <param name="SpecificTrapType" value="12345678"/>
+     <param name="CommunityString" value="public"/>
+     <param name="ForwardStackTraceWithTrap" value="true"/>
+     <param name="Threshold" value="DEBUG"/>
+     <param name="ApplicationTrapOID" value="1.3.6.1.4.1.24.12.10.22.64"/>
+     <layout class="org.apache.log4j.PatternLayout">
+            <param name="ConversionPattern" value="%d,%p,[%t],[%c],%m%n"/>
+     </layout>
+   </appender>
+   -->
+
+   <!--  Emit events as JMX notifications
+   <appender name="JMX" class="org.jboss.monitor.services.JMXNotificationAppender">
+      <errorHandler class="org.jboss.logging.util.OnlyOnceErrorHandler"/>
+
+      <param name="Threshold" value="WARN"/>
+      <param name="ObjectName" value="jboss.system:service=Logging,type=JMXNotificationAppender"/>
+
+      <layout class="org.apache.log4j.PatternLayout">
+         <param name="ConversionPattern" value="%d %-5p [%c] %m"/>
+      </layout>
+   </appender>
+   -->
+
+   <!-- ================ -->
+   <!-- Limit categories -->
+   <!-- ================ -->
+
+   <!-- Limit the org.apache category to INFO as its DEBUG is verbose -->
+   <category name="org.apache">
+      <priority value="INFO"/>
+   </category>
+
+   <!-- Limit the org.jboss.serial (jboss-serialization) to INFO as its DEBUG is verbose -->
+   <category name="org.jboss.serial">
+      <priority value="INFO"/>
+   </category>
+
+   <!-- Limit the org.jgroups category to WARN as its INFO is verbose -->
+   <category name="org.jgroups">
+      <priority value="WARN"/>
+   </category>
+
+   <!-- Limit the jacorb category to WARN as its INFO is verbose -->
+   <category name="jacorb">
+      <priority value="WARN"/>
+   </category>
+
+   <!-- Limit JBoss categories
+   <category name="org.jboss">
+      <priority value="INFO"/>
+   </category>
+   -->
+
+   <!-- Limit the JSR77 categories -->
+   <category name="org.jboss.management">
+      <priority value="INFO"/>
+   </category>
+
+   <!-- Enable JBossWS message tracing
+   <category name="jbossws.SOAPMessage">
+    <priority value="TRACE"/>
+   </category>
+   -->
+
+   <!-- Decrease the priority threshold for the org.jboss.varia category
+   <category name="org.jboss.varia">
+     <priority value="DEBUG"/>
+   </category>
+   -->
+
+   <!-- Show the evolution of the DataSource pool in the logs [inUse/Available/Max]
+   <category name="org.jboss.resource.connectionmanager.JBossManagedConnectionPool">
+     <priority value="TRACE"/>
+   </category>
+   -->
+
+   <!--
+      | An example of enabling the custom TRACE level priority that is used
+      | by the JBoss internals to diagnose low level details. This example
+      | turns on TRACE level msgs for the org.jboss.ejb.plugins package and its
+      | subpackages. This will produce A LOT of logging output.
+      |
+      | Note: since jboss AS 4.2.x, the trace level is supported natively by
+      | log4j, so although the custom org.jboss.logging.XLevel priority will
+      | still work, there is no need to use it. The two examples that follow
+      | will both enable trace logging.
+   <category name="org.jboss.system">
+     <priority value="TRACE" class="org.jboss.logging.XLevel"/>
+   </category>
+   <category name="org.jboss.ejb.plugins">
+     <priority value="TRACE"/>
+   </category>
+   -->
+
+   <!--
+       | Logs these events to SNMP:
+           - server starts/stops
+           - cluster evolution (node death/startup)
+           - When an EJB archive is deployed (and associated verified messages)
+           - When an EAR archive is deployed
+
+   <category name="org.jboss.system.server.Server">
+     <priority value="INFO" />
+     <appender-ref ref="TRAP_LOG"/>
+   </category>
+
+   <category name="org.jboss.ha.framework.interfaces.HAPartition.lifecycle">
+     <priority value="INFO" />
+     <appender-ref ref="TRAP_LOG"/>
+   </category>
+
+   <category name="org.jboss.deployment.MainDeployer">
+     <priority value="ERROR" />
+     <appender-ref ref="TRAP_LOG"/>
+   </category>
+
+   <category name="org.jboss.ejb.EJBDeployer">
+     <priority value="INFO" />
+     <appender-ref ref="TRAP_LOG"/>
+   </category>
+
+   <category name="org.jboss.deployment.EARDeployer">
+     <priority value="INFO" />
+     <appender-ref ref="TRAP_LOG"/>
+   </category>
+
+   -->
+
+   <!-- ======================= -->
+   <!-- Setup the Root category -->
+   <!-- ======================= -->
+
+   <root>
+      <appender-ref ref="CONSOLE"/>
+      <appender-ref ref="FILE"/>
+   </root>
+
+   <!-- Clustering logging -->
+   <!-- Uncomment the following to redirect the org.jgroups and
+      org.jboss.ha categories to a cluster.log file.
+
+   <appender name="CLUSTER" class="org.jboss.logging.appender.RollingFileAppender">
+     <errorHandler class="org.jboss.logging.util.OnlyOnceErrorHandler"/>
+     <param name="File" value="${jboss.server.log.dir}/cluster.log"/>
+     <param name="Append" value="false"/>
+     <param name="MaxFileSize" value="500KB"/>
+     <param name="MaxBackupIndex" value="1"/>
+
+     <layout class="org.apache.log4j.PatternLayout">
+       <param name="ConversionPattern" value="%d %-5p [%c] %m%n"/>
+     </layout>
+   </appender>
+   <category name="org.jgroups">
+     <priority value="DEBUG" />
+     <appender-ref ref="CLUSTER"/>
+   </category>
+   <category name="org.jboss.ha">
+     <priority value="DEBUG" />
+     <appender-ref ref="CLUSTER"/>
+   </category>
+   -->
+
+</log4j:configuration>

Property changes on: containers/jboss/src/main/resources/org/codehaus/cargo/container/internal/resources/jboss42x/log4j.xml
___________________________________________________________________
Added: svn:mime-type
   + text/xml
Added: svn:keywords
   + Date Revision Author HeadURL Id
Added: svn:eol-style
   + native

Index: containers/resin/src/main/java/org/codehaus/cargo/container/resin/ResinPropertySet.java
===================================================================
--- containers/resin/src/main/java/org/codehaus/cargo/container/resin/ResinPropertySet.java	(revision 0)
+++ containers/resin/src/main/java/org/codehaus/cargo/container/resin/ResinPropertySet.java	(revision 0)
@@ -0,0 +1,13 @@
+package org.codehaus.cargo.container.resin;
+
+/**
+ * Terracotta
+ * @author hhuynh
+ *
+ */
+public interface ResinPropertySet
+{
+    String KEEP_ALIVE_SOCKET_PORT = "resin.keepalive.port";
+    String CLUSTER_PORT = "resin.cluster.port";
+    String INTERNAL_SOCKET_PORT = "resin.internal.port";
+}

Property changes on: containers/resin/src/main/java/org/codehaus/cargo/container/resin/ResinPropertySet.java
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:mime-type
   + text/x-java
Added: svn:keywords
   + Date Revision Author HeadURL Id
Added: svn:eol-style
   + native

Index: containers/resin/src/main/java/org/codehaus/cargo/container/resin/Resin3xStandaloneLocalConfiguration.java
===================================================================
--- containers/resin/src/main/java/org/codehaus/cargo/container/resin/Resin3xStandaloneLocalConfiguration.java	(revision 1546)
+++ containers/resin/src/main/java/org/codehaus/cargo/container/resin/Resin3xStandaloneLocalConfiguration.java	(working copy)
@@ -105,6 +105,10 @@
         getAntUtils().addTokenToFilterChain(filterChain, "resin3x.logging.level",
             getResinLoggingLevel(getPropertyValue(GeneralPropertySet.LOGGING)));
 
+        // Terracotta
+        getAntUtils().addTokenToFilterChain(filterChain, "resin3x.cluster.port",
+            getPropertyValue(ResinPropertySet.CLUSTER_PORT));
+        
         return filterChain;
     }
 
Index: containers/resin/src/main/java/org/codehaus/cargo/container/resin/internal/AbstractResinInstalledLocalContainer.java
===================================================================
--- containers/resin/src/main/java/org/codehaus/cargo/container/resin/internal/AbstractResinInstalledLocalContainer.java	(revision 1546)
+++ containers/resin/src/main/java/org/codehaus/cargo/container/resin/internal/AbstractResinInstalledLocalContainer.java	(working copy)
@@ -29,6 +29,7 @@
 import org.codehaus.cargo.container.configuration.LocalConfiguration;
 import org.codehaus.cargo.container.internal.AntContainerExecutorThread;
 import org.codehaus.cargo.container.internal.ServletContainerCapability;
+import org.codehaus.cargo.container.resin.ResinPropertySet;
 import org.codehaus.cargo.container.spi.AbstractInstalledLocalContainer;
 import org.codehaus.cargo.container.spi.util.DefaultServerRun;
 import org.codehaus.cargo.util.CargoException;
@@ -87,6 +88,14 @@
         File confDir = new File(getConfiguration().getHome(), "conf");
         java.createArg().setFile(new File(confDir, "resin.conf"));
 
+        // Terracotta
+        java.createArg().setValue("-keepaliveport");
+        java.createArg().setValue(
+            getConfiguration().getPropertyValue(ResinPropertySet.KEEP_ALIVE_SOCKET_PORT));
+        java.createArg().setValue("-port");
+        java.createArg().setValue(
+            getConfiguration().getPropertyValue(ResinPropertySet.INTERNAL_SOCKET_PORT));
+
         // Add settings specific to a given container version
         startUpAdditions(java, classpath);
 
@@ -104,6 +113,14 @@
 
         java.createArg().setValue("-stop");
 
+        // Terracotta
+        java.createArg().setValue("-keepaliveport");
+        java.createArg().setValue(
+            getConfiguration().getPropertyValue(ResinPropertySet.KEEP_ALIVE_SOCKET_PORT));
+        java.createArg().setValue("-port");
+        java.createArg().setValue(
+            getConfiguration().getPropertyValue(ResinPropertySet.INTERNAL_SOCKET_PORT));
+
         AntContainerExecutorThread resinRunner = new AntContainerExecutorThread(java);
         resinRunner.start();
     }
Index: containers/resin/src/main/java/org/codehaus/cargo/container/resin/internal/ResinRun.java
===================================================================
--- containers/resin/src/main/java/org/codehaus/cargo/container/resin/internal/ResinRun.java	(revision 1546)
+++ containers/resin/src/main/java/org/codehaus/cargo/container/resin/internal/ResinRun.java	(working copy)
@@ -26,6 +26,7 @@
 import java.lang.reflect.Method;
 import java.net.ServerSocket;
 import java.util.ArrayList;
+import java.util.List;
 
 import org.codehaus.cargo.container.ContainerException;
 import org.codehaus.cargo.container.spi.util.DefaultServerRun;
@@ -38,11 +39,12 @@
 public class ResinRun extends DefaultServerRun
 {
     /**
-     * Default keepalive socket port for Resin 3.x. We create a server socket on this port that
-     * acts as a keepalive for Resin. When this socket closes Resin stops. This is a Resin feature.
+     * Default keepalive socket port for Resin 3.x. We create a server socket on this port that acts
+     * as a keepalive for Resin. When this socket closes Resin stops. This is a Resin feature.
+     * Terracotta modification: to allow multiple instances of resins
      */
-    public static final int DEFAULT_KEEPALIVE_SOCKET_PORT = 7778;
-    
+    private static int KEEP_ALIVE_SOCKET_PORT = 7778;
+
     /**
      * The started Resin server class. We use <code>Object</code> instead of the Resin class so 
      * that we don't need the Resin jars in the classpath to compile this class.
@@ -74,8 +76,22 @@
      */
     public static void main(String[] args)
     {
-        ResinRun resin = new ResinRun(args);
-
+        // Terracotta
+        List modifiedArgs = new ArrayList();
+        for (int i = 0; i < args.length; i++)
+        {
+            if (args[i].equals("-keepaliveport"))
+            {
+                KEEP_ALIVE_SOCKET_PORT = Integer.parseInt(args[i + 1]);
+                i++;
+            }
+            else
+            {
+                modifiedArgs.add(args[i]);
+            }
+        }
+        
+        ResinRun resin = new ResinRun((String[]) modifiedArgs.toArray(new String[0]));
         resin.doRun();
     }
 
@@ -175,8 +191,8 @@
                     // Note: We must not call accept() here as Resin is trying to connect with
                     // us in its waitForExit() loop and if we do, Resin will exit before we tell
                     // it to do so!
-                    resin3xKeepAliveSocket = new ServerSocket(DEFAULT_KEEPALIVE_SOCKET_PORT);
-                }                
+                    resin3xKeepAliveSocket = new ServerSocket(KEEP_ALIVE_SOCKET_PORT);
+                }
                 catch (Exception e)
                 {
                     throw new ContainerException("Failed to create keepalive socket", e);
@@ -306,7 +322,7 @@
                     modifiedArgs[i] = args[i];
                 }
                 modifiedArgs[args.length] = "-socketwait";
-                modifiedArgs[args.length + 1] = "" + DEFAULT_KEEPALIVE_SOCKET_PORT;
+                modifiedArgs[args.length + 1] = "" + KEEP_ALIVE_SOCKET_PORT;
 
                 mainMethod.invoke(null, new Object[] {modifiedArgs});
             }
Index: containers/resin/src/main/resources/org/codehaus/cargo/container/internal/resources/resin3x/resin.conf
===================================================================
--- containers/resin/src/main/resources/org/codehaus/cargo/container/internal/resources/resin3x/resin.conf	(revision 1546)
+++ containers/resin/src/main/resources/org/codehaus/cargo/container/internal/resources/resin3x/resin.conf	(working copy)
@@ -64,11 +64,13 @@
     <!--
        - The local cluster, used for load balancing and distributed
        - backup.
+    -->
+    <!-- Terracotta: randomize cluster port to allow multiple instances -->
     <cluster>
-      <srun id="" host="127.0.0.1" port="6802" index="1"/>
+      <srun id="" host="127.0.0.1" port="@resin3x.cluster.port@" index="1"/>
     </cluster>
-    -->
     
+    
     <!--
        - Enables/disables exceptions when the browser closes a connection.
       -->
Index: containers/tomcat/src/main/java/org/codehaus/cargo/container/tomcat/TomcatCopyingInstalledLocalDeployer.java
===================================================================
--- containers/tomcat/src/main/java/org/codehaus/cargo/container/tomcat/TomcatCopyingInstalledLocalDeployer.java	(revision 1546)
+++ containers/tomcat/src/main/java/org/codehaus/cargo/container/tomcat/TomcatCopyingInstalledLocalDeployer.java	(working copy)
@@ -78,21 +78,14 @@
      */
     protected void deployWar(String deployableDir, WAR war)
     {
-        if (war instanceof TomcatWAR)
-        {
-            TomcatWAR tomcatWar = (TomcatWAR) war;
+        TomcatWAR tomcatWar = new TomcatWAR(war.getFile());
 
-            // If the WAR contains a META-INF/context.xml then it means the user is 
-            // defining how to deploy it.
-            if (tomcatWar.containsContextFile())
-            {
-                // Drop WAR files into the webapps dir, Tomcat will read META-INF/context.xml itself
-                super.deployWar(deployableDir, war);
-            }
-            else if (this.shouldCopyWars)
-            {
-                super.deployWar(deployableDir, war);
-            }
+        // If the WAR contains a META-INF/context.xml then it means the user is 
+        // defining how to deploy it.
+        if (tomcatWar.containsContextFile())
+        {
+            // Drop WAR files into the webapps dir, Tomcat will read META-INF/context.xml itself
+            super.deployWar(deployableDir, war);
         }
         else if (this.shouldCopyWars)
         {
Index: containers/tomcat/src/main/java/org/codehaus/cargo/container/tomcat/Tomcat6xStandaloneLocalConfiguration.java
===================================================================
--- containers/tomcat/src/main/java/org/codehaus/cargo/container/tomcat/Tomcat6xStandaloneLocalConfiguration.java	(revision 0)
+++ containers/tomcat/src/main/java/org/codehaus/cargo/container/tomcat/Tomcat6xStandaloneLocalConfiguration.java	(revision 0)
@@ -0,0 +1,129 @@
+/* 
+ * ========================================================================
+ * 
+ * Copyright 2004-2006 Vincent Massol.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * 
+ * ========================================================================
+ */
+package org.codehaus.cargo.container.tomcat;
+
+import java.io.File;
+
+import org.apache.tools.ant.taskdefs.Copy;
+import org.apache.tools.ant.types.FileSet;
+import org.codehaus.cargo.container.LocalContainer;
+import org.codehaus.cargo.container.InstalledLocalContainer;
+import org.codehaus.cargo.container.EmbeddedLocalContainer;
+import org.codehaus.cargo.container.property.DatasourcePropertySet;
+import org.codehaus.cargo.container.property.DataSource;
+import org.codehaus.cargo.container.tomcat.internal.AbstractCatalinaStandaloneLocalConfiguration;
+
+/**
+ * Catalina standalone {@link org.codehaus.cargo.container.spi.configuration.ContainerConfiguration}
+ * implementation.
+ *
+ * <p>
+ * This code needs to work with both {@link Tomcat6xInstalledLocalContainer}
+ * and {@link Tomcat6xEmbeddedLocalContainer}.
+ *  
+ * @version $Id$
+ */
+public class Tomcat6xStandaloneLocalConfiguration
+    extends AbstractCatalinaStandaloneLocalConfiguration
+{
+    /**
+     * {@inheritDoc}
+     * @see AbstractCatalinaStandaloneLocalConfiguration#AbstractCatalinaStandaloneLocalConfiguration(String)
+     */
+    public Tomcat6xStandaloneLocalConfiguration(String dir)
+    {
+        super(dir);
+    }
+
+    /**
+     * {@inheritDoc}
+     * @see AbstractCatalinaStandaloneLocalConfiguration#setupManager(org.codehaus.cargo.container.LocalContainer)
+     */
+    protected void setupManager(LocalContainer container)
+    {
+        if (container instanceof EmbeddedLocalContainer)
+        {
+            // when running in the embedded mode, there's no need
+            // of any manager application.
+        }
+        else
+        {
+            Copy copy = (Copy) getAntUtils().createAntTask("copy");
+
+            FileSet fileSet = new FileSet();
+            fileSet.setDir(new File(((InstalledLocalContainer) container).getHome()));
+            fileSet.createInclude().setName("conf/Catalina/localhost/manager.xml");
+            fileSet.createInclude().setName("server/lib/catalina.jar");
+            fileSet.createInclude().setName("server/webapps/manager/**");
+            copy.addFileset(fileSet);
+
+            copy.setTodir(new File(getHome()));
+
+            copy.execute();
+        }
+    }
+
+    /**
+     * @return the XML to be put into the server.xml file
+     */
+    protected String createDatasourceTokenValue()
+    {
+        getLogger().debug("Tomcat 6x createDatasourceTokenValue", this.getClass().getName());
+
+        final String dataSourceProperty = getPropertyValue(DatasourcePropertySet.DATASOURCE);
+        getLogger().debug("Datasource property value [" + dataSourceProperty + "]",
+            this.getClass().getName());
+
+        if (dataSourceProperty == null)
+        {
+            // have to return a non-empty string, as Ant's token stuff doesn't work otherwise
+            return " ";
+        }
+        else
+        {
+            DataSource ds = new DataSource(dataSourceProperty);
+            return
+                "<Resource name='" + ds.getJndiLocation() + "'\n"
+                    + "    auth='Container'\n"
+                    + "    type='" + ds.getDataSourceType() + "'\n"
+                    + "    username='" + ds.getUsername() + "'\n"
+                    + "    password='" + ds.getPassword() + "'\n"
+                    + "    driverClassName='" + ds.getDriverClass() + "'\n"
+                    + "    url='" + ds.getUrl() + "'\n"
+                    + "/>\n"
+                    // As we are using a database - we will likely need a transaction factory too.
+                    + "<Resource jotm.timeout='60' " 
+                    + "    factory='org.objectweb.jotm.UserTransactionFactory' "
+                    + "    name='UserTransaction' "
+                    + "    type='javax.transaction.UserTransaction' "
+                    + "    auth='Container'>\n"
+                    + "</Resource>";
+        }
+    }
+
+    /**
+     * {@inheritDoc}
+     * @see Object#toString()
+     */
+    public String toString()
+    {
+        return "Tomcat 6.x Standalone Configuration";
+    }
+}

Property changes on: containers/tomcat/src/main/java/org/codehaus/cargo/container/tomcat/Tomcat6xStandaloneLocalConfiguration.java
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:mime-type
   + text/x-java
Added: svn:keywords
   + Date Revision Author HeadURL Id
Added: svn:eol-style
   + native

Index: containers/tomcat/src/main/java/org/codehaus/cargo/container/tomcat/Tomcat6xInstalledLocalContainer.java
===================================================================
--- containers/tomcat/src/main/java/org/codehaus/cargo/container/tomcat/Tomcat6xInstalledLocalContainer.java	(revision 0)
+++ containers/tomcat/src/main/java/org/codehaus/cargo/container/tomcat/Tomcat6xInstalledLocalContainer.java	(revision 0)
@@ -0,0 +1,68 @@
+/* 
+ * ========================================================================
+ * 
+ * Copyright 2003-2004 The Apache Software Foundation. Code from this file 
+ * was originally imported from the Jakarta Cactus project.
+ * 
+ * Copyright 2004-2006 Vincent Massol.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * 
+ * ========================================================================
+ */
+package org.codehaus.cargo.container.tomcat;
+
+import org.codehaus.cargo.container.configuration.LocalConfiguration;
+import org.codehaus.cargo.container.tomcat.internal.AbstractCatalinaInstalledLocalContainer;
+
+/**
+ * Special container support for the Apache Tomcat 6.x servlet container.
+ * 
+ * hhuynh
+ */
+public class Tomcat6xInstalledLocalContainer extends AbstractCatalinaInstalledLocalContainer
+{
+    /**
+     * Unique container id.
+     */
+    public static final String ID = "tomcat6x";
+
+    /**
+     * Perform Tomcat 6.x-specific initializations.
+     *
+     * {@inheritDoc}
+     * @see AbstractCatalinaInstalledLocalContainer#AbstractCatalinaInstalledLocalContainer(org.codehaus.cargo.container.configuration.LocalConfiguration) 
+     */
+    public Tomcat6xInstalledLocalContainer(LocalConfiguration configuration)
+    {
+        super(configuration);
+    }
+
+    /**
+     * {@inheritDoc}
+     * @see org.codehaus.cargo.container.Container#getId()
+     */
+    public final String getId()
+    {
+        return ID;
+    }
+
+    /**
+     * {@inheritDoc}
+     * @see org.codehaus.cargo.container.Container#getName()
+     */
+    public final String getName()
+    {
+        return "Tomcat " + getVersion("6.x");
+    }
+}

Property changes on: containers/tomcat/src/main/java/org/codehaus/cargo/container/tomcat/Tomcat6xInstalledLocalContainer.java
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:mime-type
   + text/x-java
Added: svn:keywords
   + Date Revision Author HeadURL Id
Added: svn:eol-style
   + native

Index: containers/tomcat/src/main/java/org/codehaus/cargo/container/tomcat/Tomcat6xRemoteContainer.java
===================================================================
--- containers/tomcat/src/main/java/org/codehaus/cargo/container/tomcat/Tomcat6xRemoteContainer.java	(revision 0)
+++ containers/tomcat/src/main/java/org/codehaus/cargo/container/tomcat/Tomcat6xRemoteContainer.java	(revision 0)
@@ -0,0 +1,63 @@
+/* 
+ * ========================================================================
+ * 
+ * Copyright 2005-2006 Vincent Massol.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * 
+ * ========================================================================
+ */
+package org.codehaus.cargo.container.tomcat;
+
+import org.codehaus.cargo.container.configuration.RuntimeConfiguration;
+import org.codehaus.cargo.container.tomcat.internal.AbstractTomcatRemoteContainer;
+
+/**
+ * Special container support for wrapping a running instance of Apache Tomcat.
+ * 
+ * hhuynh
+ */
+public class Tomcat6xRemoteContainer extends AbstractTomcatRemoteContainer
+{
+    /**
+     * Unique container id.
+     */
+    public static final String ID = "tomcat6x";
+
+    /**
+     * {@inheritDoc}
+     * @see org.codehaus.cargo.container.tomcat.internal.AbstractTomcatRemoteContainer#AbstractTomcatRemoteContainer(RuntimeConfiguration)
+     */
+    public Tomcat6xRemoteContainer(RuntimeConfiguration configuration)
+    {
+        super(configuration);
+    }
+
+    /**
+     * {@inheritDoc}
+     * @see org.codehaus.cargo.container.Container#getName()
+     */
+    public final String getName()
+    {
+        return "Tomcat 6.x Remote";
+    }
+
+    /**
+     * {@inheritDoc}
+     * @see org.codehaus.cargo.container.Container#getId()
+     */
+    public final String getId()
+    {
+        return ID;
+    }
+}

Property changes on: containers/tomcat/src/main/java/org/codehaus/cargo/container/tomcat/Tomcat6xRemoteContainer.java
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:mime-type
   + text/x-java
Added: svn:keywords
   + Date Revision Author HeadURL Id
Added: svn:eol-style
   + native

Index: containers/tomcat/src/main/java/org/codehaus/cargo/container/tomcat/Tomcat6xRemoteDeployer.java
===================================================================
--- containers/tomcat/src/main/java/org/codehaus/cargo/container/tomcat/Tomcat6xRemoteDeployer.java	(revision 0)
+++ containers/tomcat/src/main/java/org/codehaus/cargo/container/tomcat/Tomcat6xRemoteDeployer.java	(revision 0)
@@ -0,0 +1,57 @@
+/* 
+ * ========================================================================
+ * 
+ * Copyright 2006 Vincent Massol.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * 
+ * ========================================================================
+ */
+package org.codehaus.cargo.container.tomcat;
+
+import java.io.IOException;
+
+import org.codehaus.cargo.container.RemoteContainer;
+import org.codehaus.cargo.container.deployable.Deployable;
+import org.codehaus.cargo.container.tomcat.internal.AbstractTomcatRemoteDeployer;
+import org.codehaus.cargo.container.tomcat.internal.TomcatManagerException;
+
+/**
+ * A special Tomcat6x manager-based deployer to perform deployment to a remote container.
+ * 
+ * hhuynh
+ */
+public class Tomcat6xRemoteDeployer extends AbstractTomcatRemoteDeployer
+{
+    /**
+     * {@inheritDoc}
+     * @see AbstractTomcatRemoteDeployer#AbstractTomcatRemoteDeployer(org.codehaus.cargo.container.RemoteContainer)
+     */
+    public Tomcat6xRemoteDeployer(RemoteContainer container)
+    {
+        super(container); 
+    }
+
+    /**
+     * {@inheritDoc}
+     *
+     * <p>This is a special implementation of undeploy command for Tomcat 6.x.</p>
+     *
+     * @see Tomcat4xRemoteDeployer#performUndeploy(org.codehaus.cargo.container.deployable.Deployable)
+     * @see org.codehaus.cargo.container.tomcat.internal.AbstractTomcatManagerDeployer#performUndeploy(org.codehaus.cargo.container.deployable.Deployable)
+     */
+    protected void performUndeploy(Deployable deployable) throws TomcatManagerException, IOException
+    {
+        getTomcatManager().undeploy(getPath(deployable));        
+    }
+}

Property changes on: containers/tomcat/src/main/java/org/codehaus/cargo/container/tomcat/Tomcat6xRemoteDeployer.java
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:mime-type
   + text/x-java
Added: svn:keywords
   + Date Revision Author HeadURL Id
Added: svn:eol-style
   + native

Index: containers/tomcat/src/main/java/org/codehaus/cargo/container/tomcat/internal/AbstractCatalinaStandaloneLocalConfiguration.java
===================================================================
--- containers/tomcat/src/main/java/org/codehaus/cargo/container/tomcat/internal/AbstractCatalinaStandaloneLocalConfiguration.java	(revision 1546)
+++ containers/tomcat/src/main/java/org/codehaus/cargo/container/tomcat/internal/AbstractCatalinaStandaloneLocalConfiguration.java	(working copy)
@@ -202,20 +202,35 @@
 
             // Do not create tokens for WARs containing a context file as they
             // are copied to the webapps directory.
-            if (deployable instanceof TomcatWAR)
+            
+            TomcatWAR tomcatWar = new TomcatWAR(deployable.getFile());
+            if (tomcatWar.containsContextFile())
             {
-                TomcatWAR tomcatWar = (TomcatWAR) deployable;
-                if (tomcatWar.containsContextFile())
-                {
-                    continue;
-                }
+                continue;
             }
-
+            
             webappTokenValue.append(createContextToken((WAR) deployable));    
         }
         
         getAntUtils().addTokenToFilterChain(filterChain, "tomcat.webapps",
             webappTokenValue.toString());
+ 
+        // Terracotta: setting jvmRoute
+        String[] jvmarg = getPropertyValue(GeneralPropertySet.JVMARGS).split("\\s+");
+        String catalina_jvmroute = getPropertyValue(GeneralPropertySet.HOSTNAME);
+        for (int i = 0; i < jvmarg.length; i++)
+        {
+            if (jvmarg[i].indexOf("jvmroute") >= 0)
+            {
+                String[] tokens = jvmarg[i].split("=");
+                if (tokens.length == 2)
+                {
+                    catalina_jvmroute = tokens[1];
+                }
+            }
+        }
+        getAntUtils().addTokenToFilterChain(filterChain, "catalina.jvmroute", catalina_jvmroute);
+        // end 
         
         return filterChain;
     }
Index: containers/tomcat/src/main/java/org/codehaus/cargo/container/tomcat/internal/Tomcat6xEmbedded.java
===================================================================
--- containers/tomcat/src/main/java/org/codehaus/cargo/container/tomcat/internal/Tomcat6xEmbedded.java	(revision 0)
+++ containers/tomcat/src/main/java/org/codehaus/cargo/container/tomcat/internal/Tomcat6xEmbedded.java	(revision 0)
@@ -0,0 +1,770 @@
+/*
+ * ========================================================================
+ *
+ * Copyright 2006 Vincent Massol.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ * ========================================================================
+ */
+package org.codehaus.cargo.container.tomcat.internal;
+
+import org.codehaus.cargo.container.ContainerException;
+
+import java.lang.reflect.Method;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Constructor;
+import java.net.InetAddress;
+import java.io.File;
+
+/**
+ * Wrapper classes around Tomcat 6.x embedded API to hide reflection.
+ *
+ * hhuynh
+ */
+public final class Tomcat6xEmbedded
+{
+    /** reflection method. */
+    private Constructor embeddedNew;
+
+    /** reflection method. */
+    private Method embeddedCreateEngine;
+
+    /** reflection method. */
+    private Method embeddedCreateHost;
+
+    /** reflection method. */
+    private Method embeddedStart;
+
+    /** reflection method. */
+    private Method embeddedStop;
+
+    /** reflection method. */
+    private Method embeddedAddEngine;
+
+    /** reflection method. */
+    private Method embeddedCreateConnector;
+
+    /** reflection method. */
+    private Method embeddedAddConnector;
+
+    /** reflection method. */
+    private Method embeddedCreateContext;
+
+    /** reflection method. */
+    private Method embeddedSetRealm;
+
+    /** reflection method. */
+    private Method embeddedSetCatalinaBase;
+
+    /** reflection method. */
+    private Method embeddedSetCatalinaHome;
+
+    /** reflection method. */
+    private Method engineSetName;
+
+    /** reflection method. */
+    private Method engineAddChild;
+
+    /** reflection method. */
+    private Method engineSetDefaultHost;
+
+    /** reflection method. */
+    private Method engineSetParentClassLoader;
+
+    /** reflection method. */
+    private Method standardEngineSetBaseDir;
+
+    /** reflection method. */
+    private Method contextReload;
+
+    /** reflection method. */
+    private Method contextSetAvailable;
+
+    /** reflection method. */
+    private Method contextAddParameter;
+
+    /** reflection method. */
+    private Method hostSetAutoDeploy;
+
+    /** reflection method. */
+    private Method hostGetName;
+
+    /** reflection method. */
+    private Method hostAddChild;
+
+    /** reflection method. */
+    private Method hostRemoveChild;
+
+    /** reflection method. */
+    private Constructor memoryRealmNew;
+
+    /** reflection method. */
+    private Method memoryRealmSetPathname;
+
+    /**
+     * ClassLoader to load Tomcat.
+     */
+    private final ClassLoader classLoader;
+
+    
+    /**
+     * Prepares the reflection access to Tomcat.
+     *
+     * @param classLoader the CL used to load Tomcat 6.x classes. Can be null.
+     * @throws Exception if an error happens when creating the Tomcat objects by reflection
+     */
+    public Tomcat6xEmbedded(ClassLoader classLoader) throws Exception
+    {
+        this.classLoader = classLoader;
+        ClassLoader old = Thread.currentThread().getContextClassLoader();
+        try
+        {
+            // Tomcat uses commons-logging, which tries to use thread context loader
+            // for loading resources. We need that to resolve to classes inside
+            // the tomcat. See http://www.qos.ch/logging/classloader.jsp
+            Thread.currentThread().setContextClassLoader(classLoader);
+
+            preloadEngine(classLoader);
+            preloadMemoryRealm(classLoader);
+            preloadEmbedded(classLoader);
+            preloadContext(classLoader);
+            preloadHost(classLoader);
+        }
+        finally
+        {
+            Thread.currentThread().setContextClassLoader(old);
+        }
+    }
+
+    /**
+     * Preload the methods we'll need from the <code>org.apache.catalina.Engine</code> class.
+     *
+     * @param classLoader Tomcat classes will be loaded from this class loader. Can be null.
+     * @throws Exception If reflection fails.
+     */
+    private void preloadEngine(ClassLoader classLoader) throws Exception
+    {
+        Class engine = Class.forName("org.apache.catalina.Engine", true, classLoader);
+        Class container = Class.forName("org.apache.catalina.Container", true, classLoader);
+
+        engineSetName = engine.getMethod("setName", new Class[]{String.class});
+        engineAddChild = engine.getMethod("addChild", new Class[]{container});
+        engineSetDefaultHost = engine.getMethod("setDefaultHost", new Class[]{String.class});
+        engineSetParentClassLoader = engine.getMethod("setParentClassLoader",
+            new Class[]{ClassLoader.class});
+
+        Class standardEngine =
+            Class.forName("org.apache.catalina.core.StandardEngine", true, classLoader);
+        standardEngineSetBaseDir =
+            standardEngine.getMethod("setBaseDir", new Class[]{String.class});
+    }
+
+    /**
+     * Preload the methods we'll need from the <code>org.apache.catalina.realm.MemoryRealm</code>
+     * class.
+     *
+     * @param classLoader Tomcat classes will be loaded from this class loader. Can be null.
+     * @throws Exception If reflection fails.
+     */
+    private void preloadMemoryRealm(ClassLoader classLoader) throws Exception
+    {
+        Class memoryRealm =
+            Class.forName("org.apache.catalina.realm.MemoryRealm", true, classLoader);
+        memoryRealmNew = memoryRealm.getConstructor(new Class[0]);
+        memoryRealmSetPathname = memoryRealm.getMethod("setPathname", new Class[]{String.class});
+    }
+
+    /**
+     * Preload the methods we'll need from the <code>org.apache.catalina.Context</code> class.
+     *
+     * @param classLoader Tomcat classes will be loaded from this class loader. Can be null.
+     * @throws Exception If reflection fails.
+     */
+    private void preloadContext(ClassLoader classLoader) throws Exception
+    {
+        Class context = Class.forName("org.apache.catalina.Context", true, classLoader);
+        contextReload = context.getMethod("reload", new Class[0]);
+        contextSetAvailable = context.getMethod("setAvailable", new Class[]{boolean.class});
+        contextAddParameter =
+            context.getMethod("addParameter", new Class[]{String.class, String.class});
+    }
+
+    /**
+     * Preload the methods we'll need from the <code>org.apache.catalina.Host</code> class.
+     *
+     * @param classLoader Tomcat classes will be loaded from this class loader. Can be null.
+     * @throws Exception If reflection fails.
+     */
+    private void preloadHost(ClassLoader classLoader) throws Exception
+    {
+        Class container = Class.forName("org.apache.catalina.Container", true, classLoader);
+
+        Class host = Class.forName("org.apache.catalina.Host", true, classLoader);
+        hostSetAutoDeploy = host.getMethod("setAutoDeploy", new Class[]{boolean.class});
+        hostGetName = host.getMethod("getName", new Class[0]);
+        hostAddChild = host.getMethod("addChild", new Class[]{container});
+        hostRemoveChild = host.getMethod("removeChild", new Class[]{container});
+    }
+
+    /**
+     * Preload the methods we'll need from the <code>org.apache.catalina.startup.Embedded</code>
+     * class.
+     *
+     * @param classLoader Tomcat classes will be loaded from this class loader. Can be null.
+     * @throws Exception If reflection fails.
+     */
+    private void preloadEmbedded(ClassLoader classLoader) throws Exception
+    {
+        Class embedded =
+            Class.forName("org.apache.catalina.startup.Embedded", true, classLoader);
+        Class realm = Class.forName("org.apache.catalina.Realm", true, classLoader);
+        Class connector = Class.forName("org.apache.catalina.Connector", true, classLoader);
+        Class engine = Class.forName("org.apache.catalina.Engine", true, classLoader);
+
+        embeddedNew = embedded.getConstructor(new Class[0]);
+        embeddedCreateEngine = embedded.getMethod("createEngine", new Class[0]);
+        embeddedCreateHost =
+            embedded.getMethod("createHost", new Class[]{String.class, String.class});
+        embeddedStart = embedded.getMethod("start", new Class[0]);
+        embeddedStop = embedded.getMethod("stop", new Class[0]);
+        embeddedAddEngine = embedded.getMethod("addEngine", new Class[]{engine});
+        embeddedCreateConnector = embedded
+            .getMethod("createConnector",
+                new Class[]{InetAddress.class, int.class, boolean.class});
+        embeddedAddConnector = embedded.getMethod("addConnector", new Class[]{connector});
+        embeddedCreateContext =
+            embedded.getMethod("createContext", new Class[]{String.class, String.class});
+        embeddedSetRealm = embedded.getMethod("setRealm", new Class[]{realm});
+        embeddedSetCatalinaBase =
+            embedded.getMethod("setCatalinaBase", new Class[]{String.class});
+        embeddedSetCatalinaHome =
+            embedded.getMethod("setCatalinaHome", new Class[]{String.class});
+    }
+
+    /**
+     * Wraps an object and invokes methods through reflection.
+     */
+    private class Wrapper
+    {
+        /**
+         * Wrapped object to be accessed via reflection.
+         */
+        protected final Object core;
+
+        /**
+         * @param core the wrapped object to be accessed via reflection.
+         */
+        public Wrapper(Object core)
+        {
+            this.core = core;
+        }
+
+        /**
+         * Invokes a method on the wrapped object.
+         *
+         * @param method the method to invoke
+         * @return the value from the invocation.
+         */
+        protected Object invoke(Method method)
+        {
+            return invoke(method, new Object[0]);
+        }
+
+        /**
+         * Invokes a method on the wrapped object.
+         *
+         * @param method the method to invoke
+         * @param arg1 the 1st argument for invocations.
+         * @return the value from the invocation.
+         */
+        protected Object invoke(Method method, Object arg1)
+        {
+            return invoke(method, new Object[]{arg1});
+        }
+
+        /**
+         * Invokes a method on the wrapped object.
+         *
+         * @param method the method to invoke
+         * @param arg1 the 1st argument for invocations.
+         * @param arg2 the 2nd argument for invocations.
+         * @return the value from the invocation.
+         */
+        protected Object invoke(Method method, Object arg1, Object arg2)
+        {
+            return invoke(method, new Object[]{arg1, arg2});
+        }
+
+        /**
+         * Invokes a method on the wrapped object.
+         *
+         * @param method the method to invoke
+         * @param arg1 the 1st argument for invocations.
+         * @param arg2 the 2nd argument for invocations.
+         * @param arg3 the 3rd argument for invocations.
+         * @return the value from the invocation.
+         */
+        protected Object invoke(Method method, Object arg1, Object arg2, Object arg3)
+        {
+            return invoke(method, new Object[]{arg1, arg2, arg3});
+        }
+
+        /**
+         * Invokes a method on the wrapped object.
+         *
+         * @param method the method to invoke
+         * @param args the arguments for invocations.
+         * @return the value from the invocation.
+         */
+        protected Object invoke(Method method, Object[] args)
+        {
+            // unwrap everything
+            for (int i = 0; i < args.length; i++)
+            {
+                if (args[i] instanceof Wrapper)
+                {
+                    args[i] = ((Wrapper) args[i]).core;
+                }
+            }
+
+            // why do we set context class loader? see the comment inside the constructor
+            // about commons logging.
+            ClassLoader cl = Thread.currentThread().getContextClassLoader();
+            Thread.currentThread().setContextClassLoader(Tomcat6xEmbedded.this.classLoader);
+            try
+            {
+                return method.invoke(core, args);
+            }
+            catch (IllegalAccessException e)
+            {
+                throw new ContainerException("Tomcat reported an error: " + e.getMessage(), e);
+            }
+            catch (InvocationTargetException e)
+            {
+                throw new ContainerException("Tomcat reported an error: " + e.getMessage(), e);
+            }
+            finally
+            {
+                Thread.currentThread().setContextClassLoader(cl);
+            }
+        }
+    }
+
+    /**
+     * @see org.apache.catalina.Context
+     */
+    public final class Context extends Wrapper
+    {
+        /**
+         * Wraps <tt>org.apache.catalina.Context</tt> object.
+         *
+         * @param context
+         *      object to be wrapped.
+         */
+        public Context(Object context)
+        {
+            super(context);
+        }
+
+        /**
+         * Reloads this web application.
+         */
+        public void reload()
+        {
+            invoke(contextReload);
+        }
+
+        /**
+         * Makes web application available/unavailable.
+         *
+         * @param b
+         *      true to make it available.
+         */
+        public void setAvailable(boolean b)
+        {
+            invoke(contextSetAvailable, Boolean.valueOf(b));
+        }
+
+        /**
+         * Add a new context initialization parameter.
+         *
+         * @param key
+         *      non-null parameter name.
+         * @param value
+         *      value
+         */
+        public void addParameter(String key, String value)
+        {
+            invoke(contextAddParameter, key, value);
+        }
+    }
+
+    /**
+     * @see org.apache.catalina.Host
+     */
+    public final class Host extends Wrapper
+    {
+        /**
+         * Wraps a {@link Host} object.
+         *
+         * @param core
+         *      non-null.
+         */
+        public Host(Object core)
+        {
+            super(core);
+        }
+
+        /**
+         * Supposed to enable auto-deployment of war file.
+         *
+         * @param b
+         *      true to enable.
+         */
+        public void setAutoDeploy(boolean b)
+        {
+            invoke(hostSetAutoDeploy, Boolean.valueOf(b));
+        }
+
+        /**
+         * Gets the name of thist host.
+         *
+         * @return
+         *      host name.
+         */
+        public String getName()
+        {
+            return (String) invoke(hostGetName);
+        }
+
+        /**
+         * Deploys a web application.
+         *
+         * @param context
+         *      context to be deployed.
+         */
+        public void addChild(Context context)
+        {
+            invoke(hostAddChild, context);
+        }
+
+        /**
+         * Removes a web application.
+         *
+         * @param context
+         *      context to be removed.
+         */
+        public void removeChild(Context context)
+        {
+            invoke(hostRemoveChild, context);
+        }
+    }
+
+    /**
+     * @see org.apache.catalina.startup.Embedded
+     */
+    public final class Embedded extends Wrapper
+    {
+        /**
+         * Creates a new {@link Embedded} Tomcat.
+         */
+        public Embedded()
+        {
+            super(newInstance(embeddedNew));
+        }
+
+        /**
+         * Creates a new engine.
+         *
+         * @return non-null
+         */
+        public Engine createEngine()
+        {
+            return new Engine(invoke(embeddedCreateEngine));
+        }
+
+        /**
+         * Creates a new virtual host mapping.
+         *
+         * @param name
+         *      Host name.
+         * @param appBase
+         *      The "webapp" directory.
+         * @return
+         *      Always non-null.
+         */
+        public Host createHost(String name, File appBase)
+        {
+            return new Host(invoke(embeddedCreateHost, name, appBase.getAbsolutePath()));
+        }
+
+        /**
+         * Starts the container.
+         */
+        public void start()
+        {
+            invoke(embeddedStart);
+        }
+
+        /**
+         * Stops the container.
+         */
+        public void stop()
+        {
+            invoke(embeddedStop);
+        }
+
+        /**
+         * Adds a new {@link Engine}.
+         *
+         * @param e
+         *      must be non-null.
+         */
+        public void addEngine(Engine e)
+        {
+            invoke(embeddedAddEngine, e);
+        }
+
+        /**
+         * Creates a new connector.
+         *
+         * @param inetAddress
+         *      non-null if you want to bind to specific interfaces
+         * @param port
+         *      TCP port number.
+         * @param secure
+         *      Not sure what this really is.
+         * @return
+         *      Always non-null.
+         */
+        public Connector createConnector(InetAddress inetAddress, int port, boolean secure)
+        {
+            return new Connector(invoke(embeddedCreateConnector, inetAddress,
+                new Integer(port), Boolean.valueOf(secure)));
+        }
+
+        /**
+         * Adds a connector.
+         *
+         * @param connector
+         *      must be non-null.
+         */
+        public void addConnector(Connector connector)
+        {
+            invoke(embeddedAddConnector, connector);
+        }
+
+        /**
+         * Creates an web application for deployment.
+         *
+         * @param path the context URL
+         * @param docBase the exploded war file image.
+         * @return Always non-null
+         */
+        public Context createContext(String path, String docBase)
+        {
+            return new Context(invoke(embeddedCreateContext, path,
+                new File(docBase).getAbsolutePath()));
+        }
+
+        /**
+         * Associates a realm to Tomcat.
+         *
+         * @param realm
+         *      realm object.
+         */
+        public void setRealm(MemoryRealm realm)
+        {
+            invoke(embeddedSetRealm, realm);
+
+        }
+
+        /**
+         * Sets the Tomcat installation where catalina jars are loaded from.
+         *
+         * @param dir
+         *      the home directory.
+         */
+        public void setCatalinaBase(File dir)
+        {
+            invoke(embeddedSetCatalinaBase, dir.getAbsolutePath());
+        }
+
+        /**
+         * Sets the directory where Tomcat stores data file for the
+         * current running instance.
+         *
+         * @param dir
+         *      the home directory.
+         */
+        public void setCatalinaHome(File dir)
+        {
+            invoke(embeddedSetCatalinaHome, dir.getAbsolutePath());
+        }
+    }
+
+    /**
+     * @see org.apache.catalina.Connector
+     */
+    public final class Connector extends Wrapper
+    {
+        /**
+         * Wraps a connector object.
+         *
+         * @param core
+         *      object to be wrapped.
+         */
+        public Connector(Object core)
+        {
+            super(core);
+        }
+    }
+
+    /**
+     * @see org.apache.catalina.Engine
+     */
+    public final class Engine extends Wrapper
+    {
+        /**
+         * Wraps an engine object.
+         *
+         * @param core
+         *      Must be non-null.
+         */
+        public Engine(Object core)
+        {
+            super(core);
+        }
+
+        /**
+         * Assigns a name to engine.
+         *
+         * @param name
+         *      non-null
+         */
+        public void setName(String name)
+        {
+            invoke(engineSetName, name);
+        }
+
+        /**
+         * Sets the directory that Tomcat will use as a workspace.
+         *
+         * @param baseDir
+         *      The directory name.
+         */
+        public void setBaseDir(String baseDir)
+        {
+            invoke(standardEngineSetBaseDir, baseDir);
+        }
+
+        /**
+         * Adds a new {@link Host} to the engine.
+         *
+         * @param host
+         *      must be non-null.
+         */
+        public void addChild(Host host)
+        {
+            invoke(engineAddChild, host);
+        }
+
+        /**
+         * Don't know what it really does.
+         *
+         * @param name
+         *      host name.
+         */
+        public void setDefaultHost(String name)
+        {
+            invoke(engineSetDefaultHost, name);
+        }
+
+        /**
+         * Sets the {@link ClassLoader} that this engine will delegate to.
+         *
+         * @param cl
+         * This needs to be set to {@link ClassLoader} that can see
+         * classes that implement Tomcat, or else you'll get errors like
+         * "Servlet jsp is not available" (because the system failed to
+         * load <tt>JspServlet</tt> class.)
+         */
+        public void setParentClassLoader(ClassLoader cl)
+        {
+            invoke(engineSetParentClassLoader, cl);
+        }
+    }
+
+    /**
+     * MemoryRealm wrapper.
+     */
+    public final class MemoryRealm extends Wrapper
+    {
+        /**
+         * Creates a new {@link MemoryRealm}.
+         */
+        public MemoryRealm()
+        {
+            super(newInstance(memoryRealmNew));
+        }
+
+        /**
+         * Sets the file to load username/password.
+         *
+         * @param path
+         *      The user database file.
+         */
+        public void setPathname(File path)
+        {
+            invoke(memoryRealmSetPathname, path.toString());
+        }
+    }
+
+    /**
+     * Creates a new instance.
+     *
+     * @param c
+     *      Constructor to invoke.
+     * @return
+     *      The created object.
+     */
+    private Object newInstance(Constructor c)
+    {
+        // why do we set context class loader? see the comment inside the constructor
+        // about commons logging.
+        ClassLoader cl = Thread.currentThread().getContextClassLoader();
+        Thread.currentThread().setContextClassLoader(classLoader);
+
+        try
+        {
+            return c.newInstance(new Object[0]);
+        }
+        catch (InstantiationException e)
+        {
+            throw new ContainerException("Tomcat reported an error: " + e.getMessage(), e);
+        }
+        catch (InvocationTargetException e)
+        {
+            throw new ContainerException("Tomcat reported an error: " + e.getMessage(), e);
+        }
+        catch (IllegalAccessException e)
+        {
+            throw new ContainerException("Tomcat reported an error: " + e.getMessage(), e);
+        }
+        finally
+        {
+            Thread.currentThread().setContextClassLoader(cl);
+        }
+    }
+}

Property changes on: containers/tomcat/src/main/java/org/codehaus/cargo/container/tomcat/internal/Tomcat6xEmbedded.java
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:mime-type
   + text/x-java
Added: svn:keywords
   + Date Revision Author HeadURL Id
Added: svn:eol-style
   + native

Index: containers/tomcat/src/main/java/org/codehaus/cargo/container/tomcat/Tomcat6xEmbeddedLocalContainer.java
===================================================================
--- containers/tomcat/src/main/java/org/codehaus/cargo/container/tomcat/Tomcat6xEmbeddedLocalContainer.java	(revision 0)
+++ containers/tomcat/src/main/java/org/codehaus/cargo/container/tomcat/Tomcat6xEmbeddedLocalContainer.java	(revision 0)
@@ -0,0 +1,226 @@
+/*
+ * ========================================================================
+ *
+ * Copyright 2006 Vincent Massol.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ * ========================================================================
+ */
+package org.codehaus.cargo.container.tomcat;
+
+import java.io.File;
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+
+import org.codehaus.cargo.container.ContainerCapability;
+import org.codehaus.cargo.container.configuration.LocalConfiguration;
+import org.codehaus.cargo.container.deployable.Deployable;
+import org.codehaus.cargo.container.deployer.Deployer;
+import org.codehaus.cargo.container.internal.ServletContainerCapability;
+import org.codehaus.cargo.container.property.ServletPropertySet;
+import org.codehaus.cargo.container.spi.AbstractEmbeddedLocalContainer;
+import org.codehaus.cargo.container.tomcat.internal.Tomcat6xEmbedded;
+
+/**
+ * Embedded Tomcat 6.x container.
+ *
+ * hhuynh
+ */
+public class Tomcat6xEmbeddedLocalContainer extends AbstractEmbeddedLocalContainer
+{
+    /**
+     * Capability of the Tomcat/Catalina container.
+     */
+    private ContainerCapability capability = new ServletContainerCapability();
+
+    /**
+     * Root of the Tomcat object model.
+     */
+    private Tomcat6xEmbedded.Embedded controller;
+
+    /**
+     * Tomcat host object.
+     */
+    private Tomcat6xEmbedded.Host host;
+
+    /**
+     * {@link Deployable}s to be deployed once the container is started.
+     *
+     * One can only deploy to an embedded container after it's started,
+     * but cargo allows you to deploy apps before the container starts.
+     * so we need to remember what's supposed to be deployed.
+     */
+    private final List scheduledDeployables = new ArrayList();
+
+    /**
+     * Creates a Tomcat 6.x {@link org.codehaus.cargo.container.EmbeddedLocalContainer}.
+     *
+     * @param configuration the configuration of the newly created container.
+     */
+    public Tomcat6xEmbeddedLocalContainer(LocalConfiguration configuration)
+    {
+        super(configuration);
+    }
+
+    /**
+     * @return the Tomcat controller object. Always non-null.
+     */
+    /*package*/ Tomcat6xEmbedded.Embedded getController()
+    {
+        return controller;
+    }
+
+    /**
+     * @return the Tomcat host object. Always non-null.
+     */
+    /*package*/ Tomcat6xEmbedded.Host getHost()
+    {
+        return host;
+    }
+
+    /**
+     * {@inheritDoc}
+     * @see AbstractEmbeddedLocalContainer#doStart()
+     */
+    protected void doStart() throws Exception
+    {
+        Tomcat6xEmbedded wrapper = new Tomcat6xEmbedded(getClassLoader());
+
+        controller = wrapper.new Embedded();
+
+        // Tomcat always try to resolve relative path against CATALINA_BASE, so make it absolute
+        // here.
+        File home = new File(getConfiguration().getHome()).getAbsoluteFile();
+
+        // NOTE: the following sets the system properties inside Tomcat (!),
+        // which means you can't run two Tomcat instances inside the same VM.
+        controller.setCatalinaBase(home);
+        controller.setCatalinaHome(new File(getConfiguration().getHome()));
+
+        // unless we set this explicitly, it will be loaded from CATALINA_BASE
+        Tomcat6xEmbedded.MemoryRealm realm = wrapper.new MemoryRealm();
+        realm.setPathname(new File(home, "conf/tomcat-users.xml"));
+        controller.setRealm(realm);
+
+        // no easy way to do this with reflection
+        // controller.setLogger(new LoggerAdapter(getLogger()));
+
+        Tomcat6xEmbedded.Engine engine = controller.createEngine();
+        engine.setName("engine");
+        engine.setBaseDir(home.getPath());
+        engine.setParentClassLoader(getClassLoader());
+
+        // create just one Host
+        host = controller.createHost("localhost", new File(home, "webapps"));
+        host.setAutoDeploy(true);
+        engine.addChild(host);
+        engine.setDefaultHost(host.getName());
+
+        // publish engine
+        controller.addEngine(engine);
+
+        // create HTTP connector
+        controller.addConnector(
+            controller.createConnector(null, getPort(), false));
+
+        controller.start();
+
+        //// ideally Tomcat should be able to auto-expand a war file,
+        //// but I couldn't make it work, so this is a workaround meanwhile
+        if (!scheduledDeployables.isEmpty())
+        {
+            Deployer deployer = new Tomcat6xEmbeddedLocalDeployer(this);
+            for (Iterator itr = scheduledDeployables.iterator(); itr.hasNext();)
+            {
+                Deployable deployable = (Deployable) itr.next();
+                deployer.deploy(deployable);
+            }
+        }
+    }
+
+    /**
+     * Tomcat's start/stop methods are synchronous, so no need for waiting.
+     *
+     * @param waitForStarting never used
+     */
+    protected void waitForCompletion(boolean waitForStarting)
+    {
+        // Nothing to do here as Tomcat start/stop methods are synchronous.
+    }
+
+    /**
+     * Gets the port number for which this Tomcat is configured.
+     *
+     * @return the port number
+     */
+    private int getPort()
+    {
+        return Integer.parseInt(getConfiguration().getPropertyValue(ServletPropertySet.PORT));
+    }
+
+    /**
+     * {@inheritDoc}
+     * @see AbstractEmbeddedLocalContainer#doStop()
+     */
+    protected void doStop() throws Exception
+    {
+        if (controller != null)
+        {
+            // the stop method is allowed to be invoked multiple times
+            controller.stop();
+            controller = null;
+            host = null;
+        }
+    }
+
+    /**
+     * {@inheritDoc}
+     * @see org.codehaus.cargo.container.Container#getId()
+     */
+    public String getId()
+    {
+        return "tomcat6x";
+    }
+
+    /**
+     * {@inheritDoc}
+     * @see org.codehaus.cargo.container.Container#getName()
+     */
+    public String getName()
+    {
+        return "Tomcat 6.x Embedded";
+    }
+
+    /**
+     * {@inheritDoc}
+     * @see org.codehaus.cargo.container.Container#getCapability()
+     */
+    public ContainerCapability getCapability()
+    {
+        return capability;
+    }
+
+    /**
+     * Used by {@link Tomcat6xEmbeddedLocalDeployer} to register {@link Deployable}s
+     * that are to be deployed once the container is started.
+     *
+     * @param deployable
+     *      {@link Deployable} to be deployed later.
+     */
+    void scheduleDeployment(Deployable deployable)
+    {
+        scheduledDeployables.add(deployable);
+    }
+}

Property changes on: containers/tomcat/src/main/java/org/codehaus/cargo/container/tomcat/Tomcat6xEmbeddedLocalContainer.java
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:mime-type
   + text/x-java
Added: svn:keywords
   + Date Revision Author HeadURL Id
Added: svn:eol-style
   + native

Index: containers/tomcat/src/main/java/org/codehaus/cargo/container/tomcat/Tomcat6xEmbeddedLocalDeployer.java
===================================================================
--- containers/tomcat/src/main/java/org/codehaus/cargo/container/tomcat/Tomcat6xEmbeddedLocalDeployer.java	(revision 0)
+++ containers/tomcat/src/main/java/org/codehaus/cargo/container/tomcat/Tomcat6xEmbeddedLocalDeployer.java	(revision 0)
@@ -0,0 +1,253 @@
+/*
+ * ========================================================================
+ *
+ * Copyright 2006 Vincent Massol.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ *
+ * ========================================================================
+ */
+package org.codehaus.cargo.container.tomcat;
+
+import org.codehaus.cargo.container.ContainerException;
+import org.codehaus.cargo.container.EmbeddedLocalContainer;
+import org.codehaus.cargo.container.deployer.DeployerType;
+import org.codehaus.cargo.container.tomcat.internal.Tomcat6xEmbedded;
+import org.codehaus.cargo.container.deployable.Deployable;
+import org.codehaus.cargo.container.deployable.WAR;
+import org.codehaus.cargo.container.spi.deployer.AbstractLocalDeployer;
+import org.codehaus.cargo.module.webapp.tomcat.TomcatWarArchive;
+
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.util.Enumeration;
+import java.util.HashMap;
+import java.util.Map;
+import java.util.Iterator;
+import java.util.jar.JarEntry;
+import java.util.jar.JarFile;
+
+/**
+ * {@link org.codehaus.cargo.container.deployer.Deployer} for deploying to
+ * {@link Tomcat6xEmbeddedLocalContainer embedded Tomcat container}.
+ *
+ * hhuynh
+ */
+public class Tomcat6xEmbeddedLocalDeployer extends AbstractLocalDeployer
+{
+    /**
+     * The container that this deployer acts on.
+     */
+    private final Tomcat6xEmbeddedLocalContainer container;
+
+    /**
+     * Map from {@link Deployable} to {@link Tomcat6xEmbedded.Context}, representing deployed
+     * objects.
+     */
+    private final Map deployed = new HashMap();
+
+    /**
+     * Creates a new deployer for {@link Tomcat6xEmbeddedLocalContainer}.
+     *
+     * @param container The container to which this deployer will work. This parameter is typed
+     *        as {@link EmbeddedLocalContainer} due to the Cargo generic API requirement, but it
+     *        has to be a {@link Tomcat6xEmbeddedLocalContainer}.
+     */
+    public Tomcat6xEmbeddedLocalDeployer(EmbeddedLocalContainer container)
+    {
+        super(container);
+        this.container = (Tomcat6xEmbeddedLocalContainer) container;
+    }
+
+    /**
+     * {@inheritDoc}
+     * @see AbstractLocalDeployer#deploy(org.codehaus.cargo.container.deployable.Deployable) 
+     */
+    public void deploy(Deployable deployable)
+    {
+        if (container.getController() == null)
+        {
+            // not yet started. defer the deployment until the container is started
+            container.scheduleDeployment(deployable);
+            return;
+        }
+
+        WAR war = (WAR) deployable;
+        String docBase;
+
+        if (!war.isExpandedWar())
+        {
+            String home = container.getConfiguration().getHome();
+            try
+            {
+                docBase = getFileHandler().append(home, "webapps/" + war.getContext());
+                explode(war.getFile(), docBase);
+            }
+            catch (IOException e)
+            {
+                throw new ContainerException("Failed to expand " + war.getFile(), e);
+            }
+        }
+        else
+        {
+            docBase = war.getFile();
+        }
+
+        Tomcat6xEmbedded.Context context = container.getController().createContext(
+            '/' + war.getContext(), docBase);
+
+        try
+        {
+            TomcatWarArchive twar = new TomcatWarArchive(docBase);
+            if (twar.getTomcatContextXml() != null)
+            {
+                Map params = twar.getTomcatContextXml().getParameters();
+                for (Iterator itr = params.entrySet().iterator(); itr.hasNext();)
+                {
+                    Map.Entry param = (Map.Entry) itr.next();
+                    context.addParameter((String) param.getKey(), (String) param.getValue());
+                }
+            }
+        }
+        catch (Exception e)
+        {
+            throw new ContainerException("Failed to parse Tomcat WAR file "
+                + "in [" + docBase + "]", e);
+        }
+
+
+        container.getHost().addChild(context);
+        deployed.put(deployable, context);
+    }
+
+    /**
+     * {@inheritDoc}
+     * @see AbstractLocalDeployer#undeploy(org.codehaus.cargo.container.deployable.Deployable)
+     */
+    public void undeploy(Deployable deployable)
+    {
+        Tomcat6xEmbedded.Context context = getExistingContext(deployable);
+        container.getHost().removeChild(context);
+        deployed.remove(deployable);
+    }
+
+    /**
+     * {@inheritDoc}
+     * @see AbstractLocalDeployer#redeploy(org.codehaus.cargo.container.deployable.Deployable)
+     */
+    public void redeploy(Deployable deployable)
+    {
+        Tomcat6xEmbedded.Context context = getExistingContext(deployable);
+        context.reload();
+    }
+
+    /**
+     * {@inheritDoc}
+     * @see AbstractLocalDeployer#start(org.codehaus.cargo.container.deployable.Deployable)
+     */
+    public void start(Deployable deployable)
+    {
+        getExistingContext(deployable).setAvailable(true);
+    }
+
+    /**
+     * {@inheritDoc}
+     * @see AbstractLocalDeployer#stop(org.codehaus.cargo.container.deployable.Deployable)
+     */
+    public void stop(Deployable deployable)
+    {
+        getExistingContext(deployable).setAvailable(false);
+    }
+
+    /**
+     * {@inheritDoc}
+     * @see org.codehaus.cargo.container.spi.deployer.AbstractLocalDeployer#getType()
+     */
+    public DeployerType getType()
+    {
+        return DeployerType.EMBEDDED;
+    }
+
+    /**
+     * Gets the context that represents a deployed {@link Deployable}.
+     *
+     * @param deployable the deployable object that has deployed on Tomcat.
+     * @return always non-null
+     */
+    private Tomcat6xEmbedded.Context getExistingContext(Deployable deployable)
+    {
+        Tomcat6xEmbedded.Context context = (Tomcat6xEmbedded.Context) deployed.get(deployable);
+        if (context == null)
+        {
+            throw new ContainerException("Not deployed yet: " + deployable);
+        }
+        return context;
+    }
+
+    /**
+     * Extracts a war file into a directory.
+     *
+     * @param war the War archive to be extracted.
+     * @param exploded the directory that receives files.
+     * @throws IOException any file operation failure
+     */
+    private void explode(String war, String exploded) throws IOException
+    {
+        if (getFileHandler().exists(exploded))
+        {
+            getFileHandler().delete(exploded);
+        }
+
+        byte[] buf = new byte[1024];
+
+        JarFile archive = new JarFile(new File(war).getAbsoluteFile());
+        Enumeration e = archive.entries();
+        while (e.hasMoreElements())
+        {
+            JarEntry j = (JarEntry) e.nextElement();
+            String dst = getFileHandler().append(exploded, j.getName());
+
+            if (j.isDirectory())
+            {
+                getFileHandler().mkdirs(dst);
+                continue;
+            }
+
+            getFileHandler().mkdirs(getFileHandler().getParent(dst));
+
+            InputStream in = archive.getInputStream(j);
+            FileOutputStream out = new FileOutputStream(dst);
+            try
+            {
+                while (true)
+                {
+                    int sz = in.read(buf);
+                    if (sz < 0)
+                    {
+                        break;
+                    }
+                    out.write(buf, 0, sz);
+                }
+            }
+            finally
+            {
+                in.close();
+                out.close();
+            }
+        }
+
+        archive.close();
+    }
+}

Property changes on: containers/tomcat/src/main/java/org/codehaus/cargo/container/tomcat/Tomcat6xEmbeddedLocalDeployer.java
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:mime-type
   + text/x-java
Added: svn:keywords
   + Date Revision Author HeadURL Id
Added: svn:eol-style
   + native

Index: containers/tomcat/src/main/resources/org/codehaus/cargo/container/internal/resources/tomcat5x/server.xml
===================================================================
--- containers/tomcat/src/main/resources/org/codehaus/cargo/container/internal/resources/tomcat5x/server.xml	(revision 1546)
+++ containers/tomcat/src/main/resources/org/codehaus/cargo/container/internal/resources/tomcat5x/server.xml	(working copy)
@@ -10,7 +10,7 @@
         debug="@catalina.logging.level@"/>
 
     <Engine name="Catalina" defaultHost="@cargo.hostname@" 
-        debug="@catalina.logging.level@">
+        debug="@catalina.logging.level@" jvmRoute="@catalina.jvmroute@">
 
       <Realm className="org.apache.catalina.realm.MemoryRealm" />
 
Index: containers/tomcat/src/main/resources/org/codehaus/cargo/container/internal/resources/tomcat6x/server.xml
===================================================================
--- containers/tomcat/src/main/resources/org/codehaus/cargo/container/internal/resources/tomcat6x/server.xml	(revision 0)
+++ containers/tomcat/src/main/resources/org/codehaus/cargo/container/internal/resources/tomcat6x/server.xml	(revision 0)
@@ -0,0 +1,38 @@
+<Server port="@cargo.rmi.port@" shutdown="SHUTDOWN" debug="@catalina.logging.level@">
+
+  <Service name="Catalina" debug="@catalina.logging.level@">
+
+    <Connector port="@cargo.servlet.port@"
+        maxThreads="150" minSpareThreads="25" maxSpareThreads="75"
+        enableLookups="false" redirectPort="8443" acceptCount="100"
+        connectionTimeout="20000" disableUploadTimeout="true"
+        scheme="@cargo.protocol@" secure="@catalina.secure@"
+        debug="@catalina.logging.level@"/>
+
+    <Engine name="Catalina" defaultHost="@cargo.hostname@" 
+        debug="@catalina.logging.level@" jvmRoute="@catalina.jvmroute@">
+
+      <Realm className="org.apache.catalina.realm.MemoryRealm" />
+
+      <!-- Note: There seems to be a bug in Tomcat 5.x if the debug attribute 
+           is present. Ideally we would have written:
+               debug="@catalina.logging.level@"
+           However, doing this result in a NullPointerException in 
+           ExpandWar.java at line 145. -->
+      <Host name="@cargo.hostname@" appBase="webapps" unpackWARs="true"
+          autoDeploy="true" xmlValidation="false" xmlNamespaceAware="false">
+
+        <!-- Contexts to explicitely point to where the wars are located -->
+        @tomcat.webapps@
+
+        <Valve className="org.apache.catalina.valves.AccessLogValve"
+            directory="logs" prefix="@cargo.hostname@_access_log." suffix=".txt"
+            pattern="common" resolveHosts="false"/>
+          
+      </Host>
+
+    </Engine>
+
+  </Service>
+
+</Server>

Property changes on: containers/tomcat/src/main/resources/org/codehaus/cargo/container/internal/resources/tomcat6x/server.xml
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:mime-type
   + text/xml
Added: svn:keywords
   + Date Revision Author HeadURL Id
Added: svn:eol-style
   + native

Index: containers/tomcat/src/main/resources/org/codehaus/cargo/container/internal/resources/tomcat6x/tomcat-users.xml
===================================================================
--- containers/tomcat/src/main/resources/org/codehaus/cargo/container/internal/resources/tomcat6x/tomcat-users.xml	(revision 0)
+++ containers/tomcat/src/main/resources/org/codehaus/cargo/container/internal/resources/tomcat6x/tomcat-users.xml	(revision 0)
@@ -0,0 +1,3 @@
+<tomcat-users>
+  @tomcat.users@
+</tomcat-users>

Property changes on: containers/tomcat/src/main/resources/org/codehaus/cargo/container/internal/resources/tomcat6x/tomcat-users.xml
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:mime-type
   + text/xml
Added: svn:keywords
   + Date Revision Author HeadURL Id
Added: svn:eol-style
   + native

Index: containers/tomcat/src/main/resources/org/codehaus/cargo/container/internal/resources/tomcat6x/web.xml
===================================================================
--- containers/tomcat/src/main/resources/org/codehaus/cargo/container/internal/resources/tomcat6x/web.xml	(revision 0)
+++ containers/tomcat/src/main/resources/org/codehaus/cargo/container/internal/resources/tomcat6x/web.xml	(revision 0)
@@ -0,0 +1,948 @@
+<?xml version="1.0" encoding="ISO-8859-1"?>
+<!DOCTYPE web-app
+     PUBLIC "-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN"
+    "http://java.sun.com/dtd/web-app_2_3.dtd">
+<web-app>
+
+  <!-- ======================== Introduction ============================== -->
+  <!-- This document defines default values for *all* web applications      -->
+  <!-- loaded into this instance of Tomcat.  As each application is         -->
+  <!-- deployed, this file is processed, followed by the                    -->
+  <!-- "/WEB-INF/web.xml" deployment descriptor from your own               -->
+  <!-- applications.                                                        -->
+  <!--                                                                      -->
+  <!-- WARNING:  Do not configure application-specific resources here!      -->
+  <!-- They should go in the "/WEB-INF/web.xml" file in your application.   -->
+
+
+  <!-- ================== Built In Servlet Definitions ==================== -->
+
+
+  <!-- The default servlet for all web applications, that serves static     -->
+  <!-- resources.  It processes all requests that are not mapped to other   -->
+  <!-- servlets with servlet mappings (defined either here or in your own   -->
+  <!-- web.xml file.  This servlet supports the following initialization    -->
+  <!-- parameters (default values are in square brackets):                  -->
+  <!--                                                                      -->
+  <!--   debug               Debugging detail level for messages logged     -->
+  <!--                       by this servlet.  [0]                          -->
+  <!--                                                                      -->
+  <!--   input               Input buffer size (in bytes) when reading      -->
+  <!--                       resources to be served.  [2048]                -->
+  <!--                                                                      -->
+  <!--   listings            Should directory listings be produced if there -->
+  <!--                       is no welcome file in this directory?  [true]  -->
+  <!--                                                                      -->
+  <!--   output              Output buffer size (in bytes) when writing     -->
+  <!--                       resources to be served.  [2048]                -->
+  <!--                                                                      -->
+  <!--   readonly            Is this context "read only", so HTTP           -->
+  <!--                       commands like PUT and DELETE are               -->
+  <!--                       rejected?  [true]                              -->
+  <!--                                                                      -->
+  <!--   readmeFile          File name to display with the directory        -->
+  <!--                       contents. [null]                               -->
+  <!--                                                                      -->
+  <!--  For directory listing customization. Checks localXsltFile, then     -->
+  <!--  globalXsltFile, then defaults to original behavior.                 -->
+  <!--                                                                      -->
+  <!--   localXsltFile       Make directory listings an XML doc and         -->
+  <!--                       pass the result to this style sheet residing   -->
+  <!--                       in that directory. This overrides              -->
+  <!--                        globalXsltFile[null]                          -->
+  <!--                                                                      -->
+  <!--   globalXsltFile      Site wide configuration version of             -->
+  <!--                       localXsltFile This argument is expected        -->
+  <!--                       to be a physical file. [null]                  -->
+  <!--                                                                      -->
+  <!--                                                                      -->
+
+    <servlet>
+        <servlet-name>default</servlet-name>
+        <servlet-class>
+          org.apache.catalina.servlets.DefaultServlet
+        </servlet-class>
+        <init-param>
+            <param-name>debug</param-name>
+            <param-value>0</param-value>
+        </init-param>
+        <init-param>
+            <param-name>listings</param-name>
+            <param-value>false</param-value>
+        </init-param>
+        <load-on-startup>1</load-on-startup>
+    </servlet>
+
+
+  <!-- The "invoker" servlet, which executes anonymous servlet classes      -->
+  <!-- that have not been defined in a web.xml file.  Traditionally, this   -->
+  <!-- servlet is mapped to the URL pattern "/servlet/*", but you can map   -->
+  <!-- it to other patterns as well.  The extra path info portion of such a -->
+  <!-- request must be the fully qualified class name of a Java class that  -->
+  <!-- implements Servlet (or extends HttpServlet), or the servlet name     -->
+  <!-- of an existing servlet definition.     This servlet supports the     -->
+  <!-- following initialization parameters (default values are in square    -->
+  <!-- brackets):                                                           -->
+  <!--                                                                      -->
+  <!--   debug               Debugging detail level for messages logged     -->
+  <!--                       by this servlet.  [0]                          -->
+
+<!--
+    <servlet>
+        <servlet-name>invoker</servlet-name>
+        <servlet-class>
+          org.apache.catalina.servlets.InvokerServlet
+        </servlet-class>
+        <init-param>
+            <param-name>debug</param-name>
+            <param-value>0</param-value>
+        </init-param>
+        <load-on-startup>2</load-on-startup>
+    </servlet>
+-->
+
+
+  <!-- The JSP page compiler and execution servlet, which is the mechanism  -->
+  <!-- used by Tomcat to support JSP pages.  Traditionally, this servlet    -->
+  <!-- is mapped to the URL pattern "*.jsp".  This servlet supports the     -->
+  <!-- following initialization parameters (default values are in square    -->
+  <!-- brackets):                                                           -->
+  <!--                                                                      -->
+  <!--   checkInterval       If development is false and reloading is true, -->
+  <!--                       background compiles are enabled. checkInterval -->
+  <!--                       is the time in seconds between checks to see   -->
+  <!--                       if a JSP page needs to be recompiled. [300]    -->
+  <!--                                                                      -->
+  <!--   compiler            Which compiler Ant should use to compile JSP   -->
+  <!--                       pages.  See the Ant documentation for more     -->
+  <!--                       information. [javac]                           -->
+  <!--                                                                      -->
+  <!--   classdebuginfo      Should the class file be compiled with         -->
+  <!--                       debugging information?  [true]                 -->
+  <!--                                                                      -->
+  <!--   classpath           What class path should I use while compiling   -->
+  <!--                       generated servlets?  [Created dynamically      -->
+  <!--                       based on the current web application]          -->
+  <!--                                                                      -->
+  <!--   development         Is Jasper used in development mode (will check -->
+  <!--                       for JSP modification on every access)?  [true] -->
+  <!--                                                                      -->
+  <!--   enablePooling       Determines whether tag handler pooling is      -->
+  <!--                       enabled  [true]                                -->
+  <!--                                                                      -->
+  <!--   fork                Tell Ant to fork compiles of JSP pages so that -->
+  <!--                       a separate JVM is used for JSP page compiles   -->
+  <!--                       from the one Tomcat is running in. [true]      -->
+  <!--                                                                      -->
+  <!--   ieClassId           The class-id value to be sent to Internet      -->
+  <!--                       Explorer when using <jsp:plugin> tags.         -->
+  <!--                       [clsid:8AD9C840-044E-11D1-B3E9-00805F499D93]   -->
+  <!--                                                                      -->
+  <!--   javaEncoding        Java file encoding to use for generating java  -->
+  <!--                       source files. [UTF8]                           -->
+  <!--                                                                      -->
+  <!--   keepgenerated       Should we keep the generated Java source code  -->
+  <!--                       for each page instead of deleting it? [true]   -->
+  <!--                                                                      -->
+  <!--   mappedfile          Should we generate static content with one     -->
+  <!--                       print statement per input line, to ease        -->
+  <!--                       debugging?  [true]                            -->
+  <!--                                                                      -->
+  <!--   trimSpaces          Should white spaces in template text between   -->
+  <!--                       actions or directives be trimmed?  [false]     -->
+  <!--                                                                      -->
+  <!--   reloading           Should Jasper check for modified JSPs?  [true] -->
+  <!--                                                                      -->
+  <!--   suppressSmap        Should the generation of SMAP info for JSR45   -->
+  <!--                       debugging be suppressed?  [false]              -->
+  <!--                                                                      -->
+  <!--   dumpSmap            Should the SMAP info for JSR45 debugging be    -->
+  <!--                       dumped to a file? [false]                      -->
+  <!--                       False if suppressSmap is true                  -->
+  <!--                                                                      -->
+  <!--   genStrAsCharArray   Should text strings be generated as char       -->
+  <!--                       arrays, to improve performance in some cases?  -->
+  <!--                       [false]                                        -->
+  <!--                                                                      -->
+  <!--   errorOnUseBeanInvalidClassAttribute                                -->
+  <!--                       Should Jasper issue an error when the value of -->
+  <!--                       the class attribute in an useBean action is    -->
+  <!--                       not a valid bean class?  [true]                -->
+  <!--                                                                      -->
+  <!--   scratchdir          What scratch directory should we use when      -->
+  <!--                       compiling JSP pages?  [default work directory  -->
+  <!--                       for the current web application]               -->
+  <!--                                                                      -->
+  <!--   xpoweredBy          Determines whether X-Powered-By response       -->
+  <!--                       header is added by generated servlet  [false]  -->
+  <!--                                                                      -->
+  <!-- If you wish to use Jikes to compile JSP pages:                       -->
+  <!--   Set the init parameter "compiler" to "jikes".  Define              -->
+  <!--   the property "-Dbuild.compiler.emacs=true" when starting Tomcat    -->
+  <!--   by adding the above to your CATALINA_OPTS environment variable.    -->
+  <!--   If you get an error reporting that jikes can't use UTF8 encoding,  -->
+  <!--   try setting the init parameter "javaEncoding" to "ISO-8859-1".     -->
+
+    <servlet>
+        <servlet-name>jsp</servlet-name>
+        <servlet-class>org.apache.jasper.servlet.JspServlet</servlet-class>
+        <init-param>
+            <param-name>fork</param-name>
+            <param-value>false</param-value>
+        </init-param>
+        <init-param>
+            <param-name>xpoweredBy</param-name>
+            <param-value>false</param-value>
+        </init-param>
+        <load-on-startup>3</load-on-startup>
+    </servlet>
+
+
+  <!-- Server Side Includes processing servlet, which processes SSI         -->
+  <!-- directives in HTML pages consistent with similar support in web      -->
+  <!-- servers like Apache.  Traditionally, this servlet is mapped to the   -->
+  <!-- URL pattern "*.shtml".  This servlet supports the following          -->
+  <!-- initialization parameters (default values are in square brackets):   -->
+  <!--                                                                      -->
+  <!--   buffered            Should output from this servlet be buffered?   -->
+  <!--                       (0=false, 1=true)  [0]                         -->
+  <!--                                                                      -->
+  <!--   debug               Debugging detail level for messages logged     -->
+  <!--                       by this servlet.  [0]                          -->
+  <!--                                                                      -->
+  <!--   expires             The number of seconds before a page with SSI   -->
+  <!--                       directives will expire.  [No default]          -->
+  <!--                                                                      -->
+  <!--   isVirtualWebappRelative                                            -->
+  <!--                       Should "virtual" paths be interpreted as       -->
+  <!--                       relative to the context root, instead of       -->
+  <!--                       the server root?  (0=false, 1=true) [0]        -->
+  <!--                                                                      -->
+  <!--                                                                      -->
+  <!-- IMPORTANT: To use the SSI servlet, you also need to rename the       -->
+  <!--            $CATALINA_HOME/server/lib/servlets-ssi.renametojar file   -->
+  <!--            to $CATALINA_HOME/server/lib/servlets-ssi.jar             -->
+
+<!--
+    <servlet>
+        <servlet-name>ssi</servlet-name>
+        <servlet-class>
+          org.apache.catalina.ssi.SSIServlet
+        </servlet-class>
+        <init-param>
+          <param-name>buffered</param-name>
+          <param-value>1</param-value>
+        </init-param>
+        <init-param>
+          <param-name>debug</param-name>
+          <param-value>0</param-value>
+        </init-param>
+        <init-param>
+          <param-name>expires</param-name>
+          <param-value>666</param-value>
+        </init-param>
+        <init-param>
+          <param-name>isVirtualWebappRelative</param-name>
+          <param-value>0</param-value>
+        </init-param>
+        <load-on-startup>4</load-on-startup>
+    </servlet>
+-->
+
+
+  <!-- Common Gateway Includes (CGI) processing servlet, which supports     -->
+  <!-- execution of external applications that conform to the CGI spec      -->
+  <!-- requirements.  Typically, this servlet is mapped to the URL pattern  -->
+  <!-- "/cgi-bin/*", which means that any CGI applications that are         -->
+  <!-- executed must be present within the web application.  This servlet   -->
+  <!-- supports the following initialization parameters (default values     -->
+  <!-- are in square brackets):                                             -->
+  <!--                                                                      -->
+  <!--   cgiPathPrefix       The CGI search path will start at              -->
+  <!--                       webAppRootDir + File.separator + this prefix.  -->
+  <!--                       [WEB-INF/cgi]                                  -->
+  <!--                                                                      -->
+  <!--   clientInputTimeout  The time (in milliseconds) to wait for input   -->
+  <!--                       from the browser before assuming that there    -->
+  <!--                       is none.  [100]                                -->
+  <!--                                                                      -->
+  <!--   debug               Debugging detail level for messages logged     -->
+  <!--                       by this servlet.  [0]                          -->
+  <!--                                                                      -->
+  <!--   executable          Name of the exectuable used to run the script. -->
+  <!--                       [perl]                                         -->
+  <!--                                                                      -->
+  <!--   parameterEncoding   Name of parameter encoding to be used with CGI -->
+  <!--                       servlet.                                       -->
+  <!--                       [System.getProperty("file.encoding","UTF-8")]  -->
+  <!--                                                                      -->
+  <!-- IMPORTANT: To use the CGI servlet, you also need to rename the       -->
+  <!--            $CATALINA_HOME/server/lib/servlets-cgi.renametojar file   -->
+  <!--            to $CATALINA_HOME/server/lib/servlets-cgi.jar             -->
+
+<!--
+    <servlet>
+        <servlet-name>cgi</servlet-name>
+        <servlet-class>org.apache.catalina.servlets.CGIServlet</servlet-class>
+        <init-param>
+          <param-name>clientInputTimeout</param-name>
+          <param-value>100</param-value>
+        </init-param>
+        <init-param>
+          <param-name>debug</param-name>
+          <param-value>6</param-value>
+        </init-param>
+        <init-param>
+          <param-name>cgiPathPrefix</param-name>
+          <param-value>WEB-INF/cgi</param-value>
+        </init-param>
+         <load-on-startup>5</load-on-startup>
+    </servlet>
+-->
+
+
+  <!-- ================ Built In Servlet Mappings ========================= -->
+
+
+  <!-- The servlet mappings for the built in servlets defined above.  Note  -->
+  <!-- that, by default, the CGI and SSI servlets are *not* mapped.  You    -->
+  <!-- must uncomment these mappings (or add them to your application's own -->
+  <!-- web.xml deployment descriptor) to enable these services              -->
+
+    <!-- The mapping for the default servlet -->
+    <servlet-mapping>
+        <servlet-name>default</servlet-name>
+        <url-pattern>/</url-pattern>
+    </servlet-mapping>
+
+    <!-- The mapping for the invoker servlet -->
+<!--
+    <servlet-mapping>
+        <servlet-name>invoker</servlet-name>
+        <url-pattern>/servlet/*</url-pattern>
+    </servlet-mapping>
+-->
+
+    <!-- The mapping for the JSP servlet -->
+    <servlet-mapping>
+        <servlet-name>jsp</servlet-name>
+        <url-pattern>*.jsp</url-pattern>
+    </servlet-mapping>
+
+    <servlet-mapping>
+        <servlet-name>jsp</servlet-name>
+        <url-pattern>*.jspx</url-pattern>
+    </servlet-mapping>
+
+    <!-- The mapping for the SSI servlet -->
+<!--
+    <servlet-mapping>
+        <servlet-name>ssi</servlet-name>
+        <url-pattern>*.shtml</url-pattern>
+    </servlet-mapping>
+-->
+
+    <!-- The mapping for the CGI Gateway servlet -->
+
+<!--
+    <servlet-mapping>
+        <servlet-name>cgi</servlet-name>
+        <url-pattern>/cgi-bin/*</url-pattern>
+    </servlet-mapping>
+-->
+
+
+  <!-- ==================== Default Session Configuration ================= -->
+  <!-- You can set the default session timeout (in minutes) for all newly   -->
+  <!-- created sessions by modifying the value below.                       -->
+
+    <session-config>
+        <session-timeout>30</session-timeout>
+    </session-config>
+
+
+  <!-- ===================== Default MIME Type Mappings =================== -->
+  <!-- When serving static resources, Tomcat will automatically generate    -->
+  <!-- a "Content-Type" header based on the resource's filename extension,  -->
+  <!-- based on these mappings.  Additional mappings can be added here (to  -->
+  <!-- apply to all web applications), or in your own application's web.xml -->
+  <!-- deployment descriptor.                                               -->
+
+    <mime-mapping>
+        <extension>abs</extension>
+        <mime-type>audio/x-mpeg</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>ai</extension>
+        <mime-type>application/postscript</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>aif</extension>
+        <mime-type>audio/x-aiff</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>aifc</extension>
+        <mime-type>audio/x-aiff</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>aiff</extension>
+        <mime-type>audio/x-aiff</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>aim</extension>
+        <mime-type>application/x-aim</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>art</extension>
+        <mime-type>image/x-jg</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>asf</extension>
+        <mime-type>video/x-ms-asf</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>asx</extension>
+        <mime-type>video/x-ms-asf</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>au</extension>
+        <mime-type>audio/basic</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>avi</extension>
+        <mime-type>video/x-msvideo</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>avx</extension>
+        <mime-type>video/x-rad-screenplay</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>bcpio</extension>
+        <mime-type>application/x-bcpio</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>bin</extension>
+        <mime-type>application/octet-stream</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>bmp</extension>
+        <mime-type>image/bmp</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>body</extension>
+        <mime-type>text/html</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>cdf</extension>
+        <mime-type>application/x-cdf</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>cer</extension>
+        <mime-type>application/x-x509-ca-cert</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>class</extension>
+        <mime-type>application/java</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>cpio</extension>
+        <mime-type>application/x-cpio</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>csh</extension>
+        <mime-type>application/x-csh</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>css</extension>
+        <mime-type>text/css</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>dib</extension>
+        <mime-type>image/bmp</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>doc</extension>
+        <mime-type>application/msword</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>dtd</extension>
+        <mime-type>text/plain</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>dv</extension>
+        <mime-type>video/x-dv</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>dvi</extension>
+        <mime-type>application/x-dvi</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>eps</extension>
+        <mime-type>application/postscript</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>etx</extension>
+        <mime-type>text/x-setext</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>exe</extension>
+        <mime-type>application/octet-stream</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>gif</extension>
+        <mime-type>image/gif</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>gtar</extension>
+        <mime-type>application/x-gtar</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>gz</extension>
+        <mime-type>application/x-gzip</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>hdf</extension>
+        <mime-type>application/x-hdf</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>hqx</extension>
+        <mime-type>application/mac-binhex40</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>htc</extension>
+        <mime-type>text/x-component</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>htm</extension>
+        <mime-type>text/html</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>html</extension>
+        <mime-type>text/html</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>hqx</extension>
+        <mime-type>application/mac-binhex40</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>ief</extension>
+        <mime-type>image/ief</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>jad</extension>
+        <mime-type>text/vnd.sun.j2me.app-descriptor</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>jar</extension>
+        <mime-type>application/java-archive</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>java</extension>
+        <mime-type>text/plain</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>jnlp</extension>
+        <mime-type>application/x-java-jnlp-file</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>jpe</extension>
+        <mime-type>image/jpeg</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>jpeg</extension>
+        <mime-type>image/jpeg</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>jpg</extension>
+        <mime-type>image/jpeg</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>js</extension>
+        <mime-type>text/javascript</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>jsf</extension>
+        <mime-type>text/plain</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>jspf</extension>
+        <mime-type>text/plain</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>kar</extension>
+        <mime-type>audio/x-midi</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>latex</extension>
+        <mime-type>application/x-latex</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>m3u</extension>
+        <mime-type>audio/x-mpegurl</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>mac</extension>
+        <mime-type>image/x-macpaint</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>man</extension>
+        <mime-type>application/x-troff-man</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>me</extension>
+        <mime-type>application/x-troff-me</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>mid</extension>
+        <mime-type>audio/x-midi</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>midi</extension>
+        <mime-type>audio/x-midi</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>mif</extension>
+        <mime-type>application/x-mif</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>mov</extension>
+        <mime-type>video/quicktime</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>movie</extension>
+        <mime-type>video/x-sgi-movie</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>mp1</extension>
+        <mime-type>audio/x-mpeg</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>mp2</extension>
+        <mime-type>audio/x-mpeg</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>mp3</extension>
+        <mime-type>audio/x-mpeg</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>mpa</extension>
+        <mime-type>audio/x-mpeg</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>mpe</extension>
+        <mime-type>video/mpeg</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>mpeg</extension>
+        <mime-type>video/mpeg</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>mpega</extension>
+        <mime-type>audio/x-mpeg</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>mpg</extension>
+        <mime-type>video/mpeg</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>mpv2</extension>
+        <mime-type>video/mpeg2</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>ms</extension>
+        <mime-type>application/x-wais-source</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>nc</extension>
+        <mime-type>application/x-netcdf</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>oda</extension>
+        <mime-type>application/oda</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>pbm</extension>
+        <mime-type>image/x-portable-bitmap</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>pct</extension>
+        <mime-type>image/pict</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>pdf</extension>
+        <mime-type>application/pdf</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>pgm</extension>
+        <mime-type>image/x-portable-graymap</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>pic</extension>
+        <mime-type>image/pict</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>pict</extension>
+        <mime-type>image/pict</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>pls</extension>
+        <mime-type>audio/x-scpls</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>png</extension>
+        <mime-type>image/png</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>pnm</extension>
+        <mime-type>image/x-portable-anymap</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>pnt</extension>
+        <mime-type>image/x-macpaint</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>ppm</extension>
+        <mime-type>image/x-portable-pixmap</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>ppt</extension>
+        <mime-type>application/powerpoint</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>ps</extension>
+        <mime-type>application/postscript</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>psd</extension>
+        <mime-type>image/x-photoshop</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>qt</extension>
+        <mime-type>video/quicktime</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>qti</extension>
+        <mime-type>image/x-quicktime</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>qtif</extension>
+        <mime-type>image/x-quicktime</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>ras</extension>
+        <mime-type>image/x-cmu-raster</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>rgb</extension>
+        <mime-type>image/x-rgb</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>rm</extension>
+        <mime-type>application/vnd.rn-realmedia</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>roff</extension>
+        <mime-type>application/x-troff</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>rtf</extension>
+        <mime-type>application/rtf</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>rtx</extension>
+        <mime-type>text/richtext</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>sh</extension>
+        <mime-type>application/x-sh</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>shar</extension>
+        <mime-type>application/x-shar</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>smf</extension>
+        <mime-type>audio/x-midi</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>sit</extension>
+        <mime-type>application/x-stuffit</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>snd</extension>
+        <mime-type>audio/basic</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>src</extension>
+        <mime-type>application/x-wais-source</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>sv4cpio</extension>
+        <mime-type>application/x-sv4cpio</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>sv4crc</extension>
+        <mime-type>application/x-sv4crc</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>swf</extension>
+        <mime-type>application/x-shockwave-flash</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>t</extension>
+        <mime-type>application/x-troff</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>tar</extension>
+        <mime-type>application/x-tar</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>tcl</extension>
+        <mime-type>application/x-tcl</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>tex</extension>
+        <mime-type>application/x-tex</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>texi</extension>
+        <mime-type>application/x-texinfo</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>texinfo</extension>
+        <mime-type>application/x-texinfo</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>tif</extension>
+        <mime-type>image/tiff</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>tiff</extension>
+        <mime-type>image/tiff</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>tr</extension>
+        <mime-type>application/x-troff</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>tsv</extension>
+        <mime-type>text/tab-separated-values</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>txt</extension>
+        <mime-type>text/plain</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>ulw</extension>
+        <mime-type>audio/basic</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>ustar</extension>
+        <mime-type>application/x-ustar</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>xbm</extension>
+        <mime-type>image/x-xbitmap</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>xht</extension>
+        <mime-type>application/xhtml+xml</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>xhtml</extension>
+        <mime-type>application/xhtml+xml</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>xml</extension>
+        <mime-type>text/xml</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>xpm</extension>
+        <mime-type>image/x-xpixmap</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>xsl</extension>
+        <mime-type>text/xml</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>xwd</extension>
+        <mime-type>image/x-xwindowdump</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>wav</extension>
+        <mime-type>audio/x-wav</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>svg</extension>
+        <mime-type>image/svg+xml</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>svgz</extension>
+        <mime-type>image/svg+xml</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>vsd</extension>
+        <mime-type>application/x-visio</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <!-- Wireless Bitmap -->
+        <extension>wbmp</extension>
+        <mime-type>image/vnd.wap.wbmp</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <!-- WML Source -->
+        <extension>wml</extension>
+        <mime-type>text/vnd.wap.wml</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <!-- Compiled WML -->
+        <extension>wmlc</extension>
+        <mime-type>application/vnd.wap.wmlc</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <!-- WML Script Source -->
+        <extension>wmls</extension>
+        <mime-type>text/vnd.wap.wmlscript</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <!-- Compiled WML Script -->
+        <extension>wmlscriptc</extension>
+        <mime-type>application/vnd.wap.wmlscriptc</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>wrl</extension>
+        <mime-type>x-world/x-vrml</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>Z</extension>
+        <mime-type>application/x-compress</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>z</extension>
+        <mime-type>application/x-compress</mime-type>
+    </mime-mapping>
+    <mime-mapping>
+        <extension>zip</extension>
+        <mime-type>application/zip</mime-type>
+    </mime-mapping>
+
+
+  <!-- ==================== Default Welcome File List ===================== -->
+  <!-- When a request URI refers to a directory, the default servlet looks  -->
+  <!-- for a "welcome file" within that directory and, if present,          -->
+  <!-- to the corresponding resource URI for display.  If no welcome file   -->
+  <!-- is present, the default servlet either serves a directory listing,   -->
+  <!-- or returns a 404 status, depending on how it is configured.          -->
+  <!--                                                                      -->
+  <!-- If you define welcome files in your own application's web.xml        -->
+  <!-- deployment descriptor, that list *replaces* the list configured      -->
+  <!-- here, so be sure that you include any of the default values that     -->
+  <!-- you wish to include.                                                 -->
+
+    <welcome-file-list>
+        <welcome-file>index.html</welcome-file>
+        <welcome-file>index.htm</welcome-file>
+        <welcome-file>index.jsp</welcome-file>
+    </welcome-file-list>
+
+</web-app>

Property changes on: containers/tomcat/src/main/resources/org/codehaus/cargo/container/internal/resources/tomcat6x/web.xml
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:mime-type
   + text/xml
Added: svn:keywords
   + Date Revision Author HeadURL Id
Added: svn:eol-style
   + native

Index: containers/weblogic/src/main/java/org/codehaus/cargo/container/weblogic/WebLogic10xStandaloneLocalConfiguration.java
===================================================================
--- containers/weblogic/src/main/java/org/codehaus/cargo/container/weblogic/WebLogic10xStandaloneLocalConfiguration.java	(revision 0)
+++ containers/weblogic/src/main/java/org/codehaus/cargo/container/weblogic/WebLogic10xStandaloneLocalConfiguration.java	(revision 0)
@@ -0,0 +1,207 @@
+/* 
+ * ========================================================================
+ * 
+ * Copyright 2004-2005 Vincent Massol.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * 
+ * ========================================================================
+ */
+package org.codehaus.cargo.container.weblogic;
+
+import java.io.File;
+import java.util.Iterator;
+
+import org.apache.tools.ant.types.FilterChain;
+import org.apache.tools.ant.util.FileUtils;
+import org.codehaus.cargo.container.Container;
+import org.codehaus.cargo.container.ContainerException;
+import org.codehaus.cargo.container.LocalContainer;
+import org.codehaus.cargo.container.configuration.ConfigurationCapability;
+import org.codehaus.cargo.container.deployable.Deployable;
+import org.codehaus.cargo.container.deployable.DeployableType;
+import org.codehaus.cargo.container.deployable.WAR;
+import org.codehaus.cargo.container.spi.configuration.AbstractStandaloneLocalConfiguration;
+import org.codehaus.cargo.container.weblogic.internal.WebLogicStandaloneLocalConfigurationCapability;
+
+/**
+ * WebLogic 10x standalone
+ * {@link org.codehaus.cargo.container.spi.configuration.ContainerConfiguration} implementation.
+ * Written for Terracotta
+ * 
+ * @author hhuynh
+ * @version $Id$
+ */
+public class WebLogic10xStandaloneLocalConfiguration extends AbstractStandaloneLocalConfiguration
+{
+    /**
+     * Capability of the WebLogic standalone configuration.
+     */
+    private static ConfigurationCapability capability =
+        new WebLogicStandaloneLocalConfigurationCapability();
+
+    /**
+     * {@inheritDoc}
+     * 
+     * @see AbstractStandaloneLocalConfiguration#AbstractStandaloneLocalConfiguration(String)
+     */
+    public WebLogic10xStandaloneLocalConfiguration(String dir)
+    {
+        super(dir);
+
+        setProperty(WebLogicPropertySet.ADMIN_USER, "weblogic");
+        setProperty(WebLogicPropertySet.ADMIN_PWD, "weblogic");
+        setProperty(WebLogicPropertySet.SERVER, "server");
+    }
+
+    /**
+     * {@inheritDoc}
+     * 
+     * @see org.codehaus.cargo.container.configuration.Configuration#getCapability()
+     */
+    public ConfigurationCapability getCapability()
+    {
+        return capability;
+    }
+
+    /**
+     * {@inheritDoc}
+     * 
+     * @see AbstractStandaloneLocalConfiguration#configure(LocalContainer)
+     */
+    protected void doConfigure(LocalContainer container) throws Exception
+    {
+        setupConfigurationDir();
+
+        FilterChain filterChain = createWebLogicFilterChain();
+
+        String[] resources =
+            new String[] {"autodeploy/readme.txt", "servers/AdminServer/security/boot.properties",
+            "security/XACMLRoleMapperInit.ldift", "security/SerializedSystemIni.dat",
+            "security/DefaultRoleMapperInit.ldift", "security/DefaultAuthenticatorInit.ldift",
+            "lib/readme.txt", "init-info/tokenValue.properties", "init-info/startscript.xml",
+            "init-info/security.xml", "init-info/domain-info.xml", "console-ext/readme.txt",
+            "config/config.xml", "config/startup/readme.txt", "config/security/readme.txt",
+            "config/nodemanager/nm_password.properties", "config/lib/readme.txt",
+            "config/jms/readme.txt", "config/jdbc/readme.txt", "config/diagnostics/readme.txt",
+            "config/deployments/readme.txt", "autodeploy/readme.txt", "fileRealm.properties"};
+
+        for (int i = 0; i < resources.length; i++)
+        {
+            copyResource(container.getId(), resources[i], filterChain);
+        }
+
+        setupDeployables(container);
+    }
+
+    private void copyResource(String containerId, String resourceName, FilterChain filterChain)
+        throws Exception
+    {
+        File destFile = new File(getHome(), resourceName);
+        destFile.getParentFile().mkdirs();
+
+        getResourceUtils().copyResource(RESOURCE_PATH + containerId + "/" + resourceName,
+            destFile, filterChain);
+    }
+
+    /**
+     * @return an Ant filter chain containing implementation for the filter tokens used in the
+     *         WebLogic configuration files
+     */
+    private FilterChain createWebLogicFilterChain()
+    {
+        FilterChain filterChain = createFilterChain();
+
+        StringBuffer appTokenValue = new StringBuffer(" ");
+
+        Iterator it = getDeployables().iterator();
+        while (it.hasNext())
+        {
+            Deployable deployable = (Deployable) it.next();
+
+            if ((deployable.getType() == DeployableType.WAR)
+                && ((WAR) deployable).isExpandedWar())
+            {
+                String context = ((WAR) deployable).getContext();
+                appTokenValue.append("<Application ");
+                appTokenValue.append("Name=\"_" + context + "_app\" ");
+                appTokenValue.append("Path=\"" + getFileHandler().getParent(deployable.getFile())
+                    + "\" ");
+                appTokenValue
+                    .append("StagedTargets=\"server\" StagingMode=\"stage\" TwoPhase=\"true\"");
+                appTokenValue.append(">");
+
+                appTokenValue.append("<WebAppComponent ");
+                appTokenValue.append("Name=\"" + context + "\" ");
+                appTokenValue.append("Targets=\"server\" ");
+                appTokenValue.append("URI=\"" + context + "\"");
+                appTokenValue.append("/></Application>");
+            }
+        }
+
+        getAntUtils().addTokenToFilterChain(filterChain, "weblogic.apps",
+            appTokenValue.toString());
+
+        return filterChain;
+    }
+
+    /**
+     * Deploy the Deployables to the weblogic configuration.
+     * 
+     * @param container the container to configure
+     */
+    protected void setupDeployables(Container container)
+    {
+        try
+        {
+            FileUtils fileUtils = FileUtils.newFileUtils();
+
+            // Create the applications directory
+            String appDir = getFileHandler().createDirectory(getHome(), "autodeploy");
+
+            // Deploy all deployables into the applications directory
+            Iterator it = getDeployables().iterator();
+            while (it.hasNext())
+            {
+                Deployable deployable = (Deployable) it.next();
+                if ((deployable.getType() == DeployableType.WAR)
+                    && ((WAR) deployable).isExpandedWar())
+                {
+                    continue;
+                }
+
+                fileUtils.copyFile(deployable.getFile(), getFileHandler().append(appDir,
+                    getFileHandler().getName(deployable.getFile())), null, true);
+            }
+
+            // Deploy the cargocpc web-app by copying the WAR file
+            getResourceUtils().copyResource(RESOURCE_PATH + "cargocpc.war",
+                new File(appDir, "cargocpc.war"));
+        }
+        catch (Exception e)
+        {
+            throw new ContainerException("Failed to deploy Deployables in the "
+                + container.getName() + " [" + getHome() + "] domain directory", e);
+        }
+    }
+
+    /**
+     * {@inheritDoc}
+     * 
+     * @see Object#toString()
+     */
+    public String toString()
+    {
+        return "WebLogic Standalone Configuration";
+    }
+}

Property changes on: containers/weblogic/src/main/java/org/codehaus/cargo/container/weblogic/WebLogic10xStandaloneLocalConfiguration.java
___________________________________________________________________
Added: svn:mime-type
   + text/x-java
Added: svn:keywords
   + Date Revision Author HeadURL Id
Added: svn:eol-style
   + native

Index: containers/weblogic/src/main/java/org/codehaus/cargo/container/weblogic/WebLogic10xInstalledLocalContainer.java
===================================================================
--- containers/weblogic/src/main/java/org/codehaus/cargo/container/weblogic/WebLogic10xInstalledLocalContainer.java	(revision 0)
+++ containers/weblogic/src/main/java/org/codehaus/cargo/container/weblogic/WebLogic10xInstalledLocalContainer.java	(revision 0)
@@ -0,0 +1,70 @@
+/* 
+ * ========================================================================
+ * 
+ * Copyright 2004-2006 Vincent Massol.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * 
+ * ========================================================================
+ */
+package org.codehaus.cargo.container.weblogic;
+
+import java.io.File;
+
+import org.apache.tools.ant.types.Path;
+import org.codehaus.cargo.container.configuration.LocalConfiguration;
+import org.codehaus.cargo.container.weblogic.internal.AbstractWebLogicInstalledLocalContainer;
+
+/**
+ * Special container support for the Bea WebLogic 10.x application server. Written for Terracotta
+ * 
+ * @author hhuynh
+ * @version $Id$
+ */
+public class WebLogic10xInstalledLocalContainer extends AbstractWebLogicInstalledLocalContainer
+{
+    /**
+     * Unique container id.
+     */
+    public static final String ID = "weblogic10x";
+
+    /**
+     * {@inheritDoc}
+     * 
+     * @see AbstractWebLogicInstalledLocalContainer#AbstractInstalledLocalContainer(org.codehaus.cargo.container.configuration.LocalConfiguration)
+     */
+    public WebLogic10xInstalledLocalContainer(LocalConfiguration configuration)
+    {
+        super(configuration);
+    }
+
+    /**
+     * {@inheritDoc}
+     * 
+     * @see org.codehaus.cargo.container.Container#getName()
+     */
+    public final String getName()
+    {
+        return "WebLogic 10.x";
+    }
+
+    /**
+     * {@inheritDoc}
+     * 
+     * @see org.codehaus.cargo.container.Container#getId()
+     */
+    public final String getId()
+    {
+        return ID;
+    }
+}

Property changes on: containers/weblogic/src/main/java/org/codehaus/cargo/container/weblogic/WebLogic10xInstalledLocalContainer.java
___________________________________________________________________
Added: svn:mime-type
   + text/x-java
Added: svn:keywords
   + Date Revision Author HeadURL Id
Added: svn:eol-style
   + native

Index: containers/weblogic/src/main/java/org/codehaus/cargo/container/weblogic/WebLogic10xExistingLocalConfiguration.java
===================================================================
--- containers/weblogic/src/main/java/org/codehaus/cargo/container/weblogic/WebLogic10xExistingLocalConfiguration.java	(revision 0)
+++ containers/weblogic/src/main/java/org/codehaus/cargo/container/weblogic/WebLogic10xExistingLocalConfiguration.java	(revision 0)
@@ -0,0 +1,133 @@
+/* 
+ * ========================================================================
+ * 
+ * Copyright 2005 Vincent Massol.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * 
+ * ========================================================================
+ */
+package org.codehaus.cargo.container.weblogic;
+
+import java.io.File;
+import java.util.Iterator;
+
+import org.apache.tools.ant.util.FileUtils;
+import org.codehaus.cargo.container.Container;
+import org.codehaus.cargo.container.ContainerException;
+import org.codehaus.cargo.container.LocalContainer;
+import org.codehaus.cargo.container.configuration.ConfigurationCapability;
+import org.codehaus.cargo.container.deployable.Deployable;
+import org.codehaus.cargo.container.deployable.DeployableType;
+import org.codehaus.cargo.container.deployable.WAR;
+import org.codehaus.cargo.container.spi.configuration.AbstractExistingLocalConfiguration;
+import org.codehaus.cargo.container.weblogic.internal.WebLogicExistingLocalConfigurationCapability;
+
+/**
+ * WebLogic existing configuration implementation. The configuration home must point to a valid
+ * WebLogic domain directory.
+ * 
+ * @version $Id$
+ */
+public class WebLogic10xExistingLocalConfiguration extends AbstractExistingLocalConfiguration
+{
+    /**
+     * Capability of the WebLogic standalone configuration.
+     */
+    private static ConfigurationCapability capability =
+        new WebLogicExistingLocalConfigurationCapability();
+
+    /**
+     * {@inheritDoc}
+     * 
+     * @see AbstractExistingLocalConfiguration#AbstractExistingLocalConfiguration(String)
+     */
+    public WebLogic10xExistingLocalConfiguration(String dir)
+    {
+        super(dir);
+
+        setProperty(WebLogicPropertySet.ADMIN_USER, "weblogic");
+        setProperty(WebLogicPropertySet.ADMIN_PWD, "weblogic");
+        setProperty(WebLogicPropertySet.SERVER, "server");
+    }
+
+    /**
+     * {@inheritDoc}
+     * 
+     * @see AbstractExistingLocalConfiguration#configure(LocalContainer)
+     */
+    protected void doConfigure(LocalContainer container) throws Exception
+    {
+        setupDeployables(container);
+    }
+
+    /**
+     * {@inheritDoc}
+     * 
+     * @see AbstractExistingLocalConfiguration#getCapability()
+     */
+    public ConfigurationCapability getCapability()
+    {
+        return capability;
+    }
+
+    /**
+     * {@inheritDoc}
+     * 
+     * @see Object#toString()
+     */
+    public String toString()
+    {
+        return "WebLogic Existing Configuration";
+    }
+
+    /**
+     * Deploy the Deployables to the weblogic configuration.
+     * 
+     * @param container the container to configure
+     */
+    protected void setupDeployables(Container container)
+    {
+        try
+        {
+            FileUtils fileUtils = FileUtils.newFileUtils();
+
+            // Create the applications directory
+            String appDir = getFileHandler().createDirectory(getHome(), "autodeploy");
+
+            // Deploy all deployables into the applications directory
+            Iterator it = getDeployables().iterator();
+            while (it.hasNext())
+            {
+                Deployable deployable = (Deployable) it.next();
+                if ((deployable.getType() == DeployableType.WAR)
+                    && ((WAR) deployable).isExpandedWar())
+                {
+                    continue;
+                }
+
+                fileUtils.copyFile(deployable.getFile(), getFileHandler().append(appDir,
+                    getFileHandler().getName(deployable.getFile())), null, true);
+            }
+
+            // Deploy the cargocpc web-app by copying the WAR file
+            getResourceUtils().copyResource(RESOURCE_PATH + "cargocpc.war",
+                new File(appDir, "cargocpc.war"));
+        }
+        catch (Exception e)
+        {
+            throw new ContainerException("Failed to deploy Deployables in the "
+                + container.getName() + " [" + getHome() + "] domain directory", e);
+        }
+    }
+}

Property changes on: containers/weblogic/src/main/java/org/codehaus/cargo/container/weblogic/WebLogic10xExistingLocalConfiguration.java
___________________________________________________________________
Added: svn:mime-type
   + text/x-java
Added: svn:keywords
   + Date Revision Author HeadURL Id
Added: svn:eol-style
   + native

Index: containers/weblogic/src/main/java/org/codehaus/cargo/container/weblogic/WebLogic8xStandaloneLocalConfiguration.java
===================================================================
--- containers/weblogic/src/main/java/org/codehaus/cargo/container/weblogic/WebLogic8xStandaloneLocalConfiguration.java	(revision 0)
+++ containers/weblogic/src/main/java/org/codehaus/cargo/container/weblogic/WebLogic8xStandaloneLocalConfiguration.java	(revision 0)
@@ -0,0 +1,181 @@
+/* 
+ * ========================================================================
+ * 
+ * Copyright 2004-2005 Vincent Massol.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * 
+ * ========================================================================
+ */
+package org.codehaus.cargo.container.weblogic;
+
+import org.apache.tools.ant.types.FilterChain;
+import org.apache.tools.ant.util.FileUtils;
+import org.codehaus.cargo.container.Container;
+import org.codehaus.cargo.container.ContainerException;
+import org.codehaus.cargo.container.LocalContainer;
+import org.codehaus.cargo.container.configuration.ConfigurationCapability;
+import org.codehaus.cargo.container.deployable.Deployable;
+import org.codehaus.cargo.container.deployable.DeployableType;
+import org.codehaus.cargo.container.deployable.WAR;
+import org.codehaus.cargo.container.spi.configuration.AbstractStandaloneLocalConfiguration;
+import org.codehaus.cargo.container.weblogic.internal.WebLogicStandaloneLocalConfigurationCapability;
+
+import java.io.File;
+import java.util.Iterator;
+
+/**
+ * WebLogic standalone {@link org.codehaus.cargo.container.spi.configuration.ContainerConfiguration}
+ * implementation.
+ *  
+ * @version $Id$
+ */
+public class WebLogic8xStandaloneLocalConfiguration extends AbstractStandaloneLocalConfiguration
+{
+    /**
+     * Capability of the WebLogic standalone configuration.
+     */
+    private static ConfigurationCapability capability = 
+        new WebLogicStandaloneLocalConfigurationCapability();
+
+    /**
+     * {@inheritDoc}
+     * @see AbstractStandaloneLocalConfiguration#AbstractStandaloneLocalConfiguration(String)
+     */
+    public WebLogic8xStandaloneLocalConfiguration(String dir)
+    {
+        super(dir);
+
+        setProperty(WebLogicPropertySet.ADMIN_USER, "weblogic");
+        setProperty(WebLogicPropertySet.ADMIN_PWD, "weblogic");
+        setProperty(WebLogicPropertySet.SERVER, "server");
+    }
+
+    /**
+     * {@inheritDoc}
+     * @see org.codehaus.cargo.container.configuration.Configuration#getCapability()
+     */
+    public ConfigurationCapability getCapability()
+    {
+        return capability;
+    }
+    
+    /**
+     * {@inheritDoc}
+     * @see AbstractStandaloneLocalConfiguration#configure(LocalContainer)
+     */
+    protected void doConfigure(LocalContainer container) throws Exception
+    {
+        setupConfigurationDir();
+
+        FilterChain filterChain = createWebLogicFilterChain();
+
+        getResourceUtils().copyResource(RESOURCE_PATH + container.getId() + "/config.xml",
+            new File(getHome(), "config.xml"), filterChain);
+
+        getResourceUtils().copyResource(RESOURCE_PATH + container.getId()
+            + "/DefaultAuthenticatorInit.ldift",
+            new File(getHome(), "DefaultAuthenticatorInit.ldift"), filterChain);
+
+        setupDeployables(container);
+    }
+
+    /**
+     * @return an Ant filter chain containing implementation for the filter tokens used in the 
+     *         WebLogic configuration files
+     */
+    private FilterChain createWebLogicFilterChain()
+    {
+        FilterChain filterChain = createFilterChain();
+        
+        StringBuffer appTokenValue = new StringBuffer(" ");
+        
+        Iterator it = getDeployables().iterator();
+        while (it.hasNext())
+        {
+            Deployable deployable = (Deployable) it.next();
+
+            if ((deployable.getType() == DeployableType.WAR) && ((WAR) deployable).isExpandedWar())
+            {
+                String context = ((WAR) deployable).getContext();
+                appTokenValue.append("<Application "); 
+                appTokenValue.append("Name=\"_" + context + "_app\" ");
+                appTokenValue.append(
+                    "Path=\"" + getFileHandler().getParent(deployable.getFile()) + "\" "); 
+                appTokenValue.append(
+                    "StagedTargets=\"server\" StagingMode=\"stage\" TwoPhase=\"true\"");
+                appTokenValue.append(">");
+                
+                appTokenValue.append("<WebAppComponent ");
+                appTokenValue.append("Name=\"" + context + "\" "); 
+                appTokenValue.append("Targets=\"server\" ");
+                appTokenValue.append("URI=\"" + context + "\"");
+                appTokenValue.append("/></Application>");
+            }
+        }
+        
+        getAntUtils().addTokenToFilterChain(filterChain, "weblogic.apps", appTokenValue.toString());
+            
+        return filterChain;
+    }
+
+    /**
+     * Deploy the Deployables to the weblogic configuration.
+     * 
+     * @param container the container to configure
+     */
+    protected void setupDeployables(Container container)
+    {
+        try 
+        {
+            FileUtils fileUtils = FileUtils.newFileUtils();
+
+            // Create the applications directory
+            String appDir = getFileHandler().createDirectory(getHome(), "applications");
+            
+            // Deploy all deployables into the applications directory
+            Iterator it = getDeployables().iterator();
+            while (it.hasNext())
+            {
+                Deployable deployable = (Deployable) it.next();
+                if ((deployable.getType() == DeployableType.WAR) 
+                    && ((WAR) deployable).isExpandedWar())
+                {
+                    continue;
+                }
+
+                fileUtils.copyFile(deployable.getFile(),
+                    getFileHandler().append(appDir, getFileHandler().getName(deployable.getFile())),
+                    null, true);
+            }
+            
+            // Deploy the cargocpc web-app by copying the WAR file
+            getResourceUtils().copyResource(RESOURCE_PATH + "cargocpc.war",
+                new File(appDir, "cargocpc.war"));
+        }
+        catch (Exception e)
+        {
+            throw new ContainerException("Failed to deploy Deployables in the " 
+                + container.getName() + " [" + getHome() + "] domain directory", e);
+        }
+    }    
+
+    /**
+     * {@inheritDoc}
+     * @see Object#toString()
+     */
+    public String toString()
+    {
+        return "WebLogic Standalone Configuration";
+    }
+}

Property changes on: containers/weblogic/src/main/java/org/codehaus/cargo/container/weblogic/WebLogic8xStandaloneLocalConfiguration.java
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:mime-type
   + text/x-java
Added: svn:keywords
   + Date Revision Author HeadURL Id
Added: svn:eol-style
   + native

Index: containers/weblogic/src/main/java/org/codehaus/cargo/container/weblogic/WebLogic9xStandaloneLocalConfiguration.java
===================================================================
--- containers/weblogic/src/main/java/org/codehaus/cargo/container/weblogic/WebLogic9xStandaloneLocalConfiguration.java	(revision 0)
+++ containers/weblogic/src/main/java/org/codehaus/cargo/container/weblogic/WebLogic9xStandaloneLocalConfiguration.java	(revision 0)
@@ -0,0 +1,208 @@
+/* 
+ * ========================================================================
+ * 
+ * Copyright 2004-2005 Vincent Massol.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * 
+ * ========================================================================
+ */
+package org.codehaus.cargo.container.weblogic;
+
+import java.io.File;
+import java.util.Iterator;
+
+import org.apache.tools.ant.types.FilterChain;
+import org.apache.tools.ant.util.FileUtils;
+import org.codehaus.cargo.container.Container;
+import org.codehaus.cargo.container.ContainerException;
+import org.codehaus.cargo.container.LocalContainer;
+import org.codehaus.cargo.container.configuration.ConfigurationCapability;
+import org.codehaus.cargo.container.deployable.Deployable;
+import org.codehaus.cargo.container.deployable.DeployableType;
+import org.codehaus.cargo.container.deployable.WAR;
+import org.codehaus.cargo.container.spi.configuration.AbstractStandaloneLocalConfiguration;
+import org.codehaus.cargo.container.weblogic.internal.WebLogicStandaloneLocalConfigurationCapability;
+
+/**
+ * WebLogic 9x standalone
+ * {@link org.codehaus.cargo.container.spi.configuration.ContainerConfiguration} implementation.
+ * Written for Terracotta
+ * 
+ * @author hhuynh
+ * @version $Id$
+ */
+public class WebLogic9xStandaloneLocalConfiguration extends AbstractStandaloneLocalConfiguration
+{
+    /**
+     * Capability of the WebLogic standalone configuration.
+     */
+    private static ConfigurationCapability capability =
+        new WebLogicStandaloneLocalConfigurationCapability();
+
+    /**
+     * {@inheritDoc}
+     * 
+     * @see AbstractStandaloneLocalConfiguration#AbstractStandaloneLocalConfiguration(String)
+     */
+    public WebLogic9xStandaloneLocalConfiguration(String dir)
+    {
+        super(dir);
+
+        setProperty(WebLogicPropertySet.ADMIN_USER, "weblogic");
+        setProperty(WebLogicPropertySet.ADMIN_PWD, "weblogic");
+        setProperty(WebLogicPropertySet.SERVER, "server");
+    }
+
+    /**
+     * {@inheritDoc}
+     * 
+     * @see org.codehaus.cargo.container.configuration.Configuration#getCapability()
+     */
+    public ConfigurationCapability getCapability()
+    {
+        return capability;
+    }
+
+    /**
+     * {@inheritDoc}
+     * 
+     * @see AbstractStandaloneLocalConfiguration#configure(LocalContainer)
+     */
+    protected void doConfigure(LocalContainer container) throws Exception
+    {
+        setupConfigurationDir();
+
+        FilterChain filterChain = createWebLogicFilterChain();
+
+        String[] resources =
+            new String[] {"user_staged_config/readme.txt",
+            "servers/AdminServer/security/boot.properties", "security/XACMLRoleMapperInit.ldift",
+            "security/SerializedSystemIni.dat", "security/DefaultRoleMapperInit.ldift",
+            "security/DefaultAuthenticatorInit.ldift", "lib/readme.txt",
+            "init-info/tokenValue.properties", "init-info/startscript.xml",
+            "init-info/security.xml", "init-info/domain-info.xml", "console-ext/readme.txt",
+            "config/config.xml", "config/startup/readme.txt", "config/security/readme.txt",
+            "config/nodemanager/nm_password.properties", "config/lib/readme.txt",
+            "config/jms/readme.txt", "config/jdbc/readme.txt", "config/diagnostics/readme.txt",
+            "config/deployments/readme.txt", "autodeploy/readme.txt", "fileRealm.properties"};
+
+        for (int i = 0; i < resources.length; i++)
+        {
+            copyResource(container.getId(), resources[i], filterChain);
+        }
+
+        setupDeployables(container);
+    }
+
+    private void copyResource(String containerId, String resourceName, FilterChain filterChain)
+        throws Exception
+    {
+        File destFile = new File(getHome(), resourceName);
+        destFile.getParentFile().mkdirs();
+
+        getResourceUtils().copyResource(RESOURCE_PATH + containerId + "/" + resourceName,
+            destFile, filterChain);
+    }
+
+    /**
+     * @return an Ant filter chain containing implementation for the filter tokens used in the
+     *         WebLogic configuration files
+     */
+    private FilterChain createWebLogicFilterChain()
+    {
+        FilterChain filterChain = createFilterChain();
+
+        StringBuffer appTokenValue = new StringBuffer(" ");
+
+        Iterator it = getDeployables().iterator();
+        while (it.hasNext())
+        {
+            Deployable deployable = (Deployable) it.next();
+
+            if ((deployable.getType() == DeployableType.WAR)
+                && ((WAR) deployable).isExpandedWar())
+            {
+                String context = ((WAR) deployable).getContext();
+                appTokenValue.append("<Application ");
+                appTokenValue.append("Name=\"_" + context + "_app\" ");
+                appTokenValue.append("Path=\"" + getFileHandler().getParent(deployable.getFile())
+                    + "\" ");
+                appTokenValue
+                    .append("StagedTargets=\"server\" StagingMode=\"stage\" TwoPhase=\"true\"");
+                appTokenValue.append(">");
+
+                appTokenValue.append("<WebAppComponent ");
+                appTokenValue.append("Name=\"" + context + "\" ");
+                appTokenValue.append("Targets=\"server\" ");
+                appTokenValue.append("URI=\"" + context + "\"");
+                appTokenValue.append("/></Application>");
+            }
+        }
+
+        getAntUtils().addTokenToFilterChain(filterChain, "weblogic.apps",
+            appTokenValue.toString());
+
+        return filterChain;
+    }
+
+    /**
+     * Deploy the Deployables to the weblogic configuration.
+     * 
+     * @param container the container to configure
+     */
+    protected void setupDeployables(Container container)
+    {
+        try
+        {
+            FileUtils fileUtils = FileUtils.newFileUtils();
+
+            // Create the applications directory
+            String appDir = getFileHandler().createDirectory(getHome(), "autodeploy");
+
+            // Deploy all deployables into the applications directory
+            Iterator it = getDeployables().iterator();
+            while (it.hasNext())
+            {
+                Deployable deployable = (Deployable) it.next();
+                if ((deployable.getType() == DeployableType.WAR)
+                    && ((WAR) deployable).isExpandedWar())
+                {
+                    continue;
+                }
+
+                fileUtils.copyFile(deployable.getFile(), getFileHandler().append(appDir,
+                    getFileHandler().getName(deployable.getFile())), null, true);
+            }
+
+            // Deploy the cargocpc web-app by copying the WAR file
+            getResourceUtils().copyResource(RESOURCE_PATH + "cargocpc.war",
+                new File(appDir, "cargocpc.war"));
+        }
+        catch (Exception e)
+        {
+            throw new ContainerException("Failed to deploy Deployables in the "
+                + container.getName() + " [" + getHome() + "] domain directory", e);
+        }
+    }
+
+    /**
+     * {@inheritDoc}
+     * 
+     * @see Object#toString()
+     */
+    public String toString()
+    {
+        return "WebLogic Standalone Configuration";
+    }
+}

Property changes on: containers/weblogic/src/main/java/org/codehaus/cargo/container/weblogic/WebLogic9xStandaloneLocalConfiguration.java
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:mime-type
   + text/x-java
Added: svn:keywords
   + Date Revision Author HeadURL Id
Added: svn:eol-style
   + native

Index: containers/weblogic/src/main/java/org/codehaus/cargo/container/weblogic/WebLogic8xExistingLocalConfiguration.java
===================================================================
--- containers/weblogic/src/main/java/org/codehaus/cargo/container/weblogic/WebLogic8xExistingLocalConfiguration.java	(revision 0)
+++ containers/weblogic/src/main/java/org/codehaus/cargo/container/weblogic/WebLogic8xExistingLocalConfiguration.java	(revision 0)
@@ -0,0 +1,130 @@
+/* 
+ * ========================================================================
+ * 
+ * Copyright 2005 Vincent Massol.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * 
+ * ========================================================================
+ */
+package org.codehaus.cargo.container.weblogic;
+
+import java.io.File;
+import java.util.Iterator;
+
+import org.apache.tools.ant.util.FileUtils;
+import org.codehaus.cargo.container.Container;
+import org.codehaus.cargo.container.ContainerException;
+import org.codehaus.cargo.container.LocalContainer;
+import org.codehaus.cargo.container.configuration.ConfigurationCapability;
+import org.codehaus.cargo.container.deployable.Deployable;
+import org.codehaus.cargo.container.deployable.DeployableType;
+import org.codehaus.cargo.container.deployable.WAR;
+import org.codehaus.cargo.container.spi.configuration.AbstractExistingLocalConfiguration;
+import org.codehaus.cargo.container.weblogic.internal.WebLogicExistingLocalConfigurationCapability;
+
+/**
+ * WebLogic existing configuration implementation. The configuration home must point to a valid
+ * WebLogic domain directory.
+ *  
+ * @version $Id$
+ */
+public class WebLogic8xExistingLocalConfiguration extends AbstractExistingLocalConfiguration
+{
+    /**
+     * Capability of the WebLogic standalone configuration.
+     */
+    private static ConfigurationCapability capability =
+        new WebLogicExistingLocalConfigurationCapability();
+
+    /**
+     * {@inheritDoc}
+     * @see AbstractExistingLocalConfiguration#AbstractExistingLocalConfiguration(String)
+     */
+    public WebLogic8xExistingLocalConfiguration(String dir)
+    {
+        super(dir);
+
+        setProperty(WebLogicPropertySet.ADMIN_USER, "weblogic");
+        setProperty(WebLogicPropertySet.ADMIN_PWD, "weblogic");
+        setProperty(WebLogicPropertySet.SERVER, "server");
+    }
+
+    /**
+     * {@inheritDoc}
+     * @see AbstractExistingLocalConfiguration#configure(LocalContainer)
+     */
+    protected void doConfigure(LocalContainer container) throws Exception
+    {
+        setupDeployables(container);
+    }
+
+    /**
+     * {@inheritDoc}
+     * @see AbstractExistingLocalConfiguration#getCapability()
+     */
+    public ConfigurationCapability getCapability()
+    {
+        return capability;
+    }
+
+    /**
+     * {@inheritDoc}
+     * @see Object#toString()
+     */
+    public String toString()
+    {
+        return "WebLogic Existing Configuration";
+    }
+
+    /**
+     * Deploy the Deployables to the weblogic configuration.
+     * 
+     * @param container the container to configure
+     */
+    protected void setupDeployables(Container container)
+    {
+        try
+        {
+            FileUtils fileUtils = FileUtils.newFileUtils();
+
+            // Create the applications directory
+            String appDir = getFileHandler().createDirectory(getHome(), "applications");
+
+            // Deploy all deployables into the applications directory
+            Iterator it = getDeployables().iterator();
+            while (it.hasNext())
+            {
+                Deployable deployable = (Deployable) it.next();
+                if ((deployable.getType() == DeployableType.WAR)
+                    && ((WAR) deployable).isExpandedWar())
+                {
+                    continue;
+                }
+
+                fileUtils.copyFile(deployable.getFile(),
+                    getFileHandler().append(appDir, getFileHandler().getName(deployable.getFile())),
+                    null, true);
+            }
+
+            // Deploy the cargocpc web-app by copying the WAR file
+            getResourceUtils().copyResource(RESOURCE_PATH + "cargocpc.war",
+                new File(appDir, "cargocpc.war"));
+        }
+        catch (Exception e)
+        {
+            throw new ContainerException("Failed to deploy Deployables in the "
+                + container.getName() + " [" + getHome() + "] domain directory", e);
+        }
+    }
+}

Property changes on: containers/weblogic/src/main/java/org/codehaus/cargo/container/weblogic/WebLogic8xExistingLocalConfiguration.java
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:mime-type
   + text/x-java
Added: svn:keywords
   + Date Revision Author HeadURL Id
Added: svn:eol-style
   + native

Index: containers/weblogic/src/main/java/org/codehaus/cargo/container/weblogic/WebLogic9xExistingLocalConfiguration.java
===================================================================
--- containers/weblogic/src/main/java/org/codehaus/cargo/container/weblogic/WebLogic9xExistingLocalConfiguration.java	(revision 0)
+++ containers/weblogic/src/main/java/org/codehaus/cargo/container/weblogic/WebLogic9xExistingLocalConfiguration.java	(revision 0)
@@ -0,0 +1,130 @@
+/* 
+ * ========================================================================
+ * 
+ * Copyright 2005 Vincent Massol.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * 
+ * ========================================================================
+ */
+package org.codehaus.cargo.container.weblogic;
+
+import java.io.File;
+import java.util.Iterator;
+
+import org.apache.tools.ant.util.FileUtils;
+import org.codehaus.cargo.container.Container;
+import org.codehaus.cargo.container.ContainerException;
+import org.codehaus.cargo.container.LocalContainer;
+import org.codehaus.cargo.container.configuration.ConfigurationCapability;
+import org.codehaus.cargo.container.deployable.Deployable;
+import org.codehaus.cargo.container.deployable.DeployableType;
+import org.codehaus.cargo.container.deployable.WAR;
+import org.codehaus.cargo.container.spi.configuration.AbstractExistingLocalConfiguration;
+import org.codehaus.cargo.container.weblogic.internal.WebLogicExistingLocalConfigurationCapability;
+
+/**
+ * WebLogic existing configuration implementation. The configuration home must point to a valid
+ * WebLogic domain directory.
+ *  
+ * @version $Id$
+ */
+public class WebLogic9xExistingLocalConfiguration extends AbstractExistingLocalConfiguration
+{
+    /**
+     * Capability of the WebLogic standalone configuration.
+     */
+    private static ConfigurationCapability capability =
+        new WebLogicExistingLocalConfigurationCapability();
+
+    /**
+     * {@inheritDoc}
+     * @see AbstractExistingLocalConfiguration#AbstractExistingLocalConfiguration(String)
+     */
+    public WebLogic9xExistingLocalConfiguration(String dir)
+    {
+        super(dir);
+
+        setProperty(WebLogicPropertySet.ADMIN_USER, "weblogic");
+        setProperty(WebLogicPropertySet.ADMIN_PWD, "weblogic");
+        setProperty(WebLogicPropertySet.SERVER, "server");
+    }
+
+    /**
+     * {@inheritDoc}
+     * @see AbstractExistingLocalConfiguration#configure(LocalContainer)
+     */
+    protected void doConfigure(LocalContainer container) throws Exception
+    {
+        setupDeployables(container);
+    }
+
+    /**
+     * {@inheritDoc}
+     * @see AbstractExistingLocalConfiguration#getCapability()
+     */
+    public ConfigurationCapability getCapability()
+    {
+        return capability;
+    }
+
+    /**
+     * {@inheritDoc}
+     * @see Object#toString()
+     */
+    public String toString()
+    {
+        return "WebLogic Existing Configuration";
+    }
+
+    /**
+     * Deploy the Deployables to the weblogic configuration.
+     * 
+     * @param container the container to configure
+     */
+    protected void setupDeployables(Container container)
+    {
+        try
+        {
+            FileUtils fileUtils = FileUtils.newFileUtils();
+
+            // Create the applications directory
+            String appDir = getFileHandler().createDirectory(getHome(), "autodeploy");
+
+            // Deploy all deployables into the applications directory
+            Iterator it = getDeployables().iterator();
+            while (it.hasNext())
+            {
+                Deployable deployable = (Deployable) it.next();
+                if ((deployable.getType() == DeployableType.WAR)
+                    && ((WAR) deployable).isExpandedWar())
+                {
+                    continue;
+                }
+
+                fileUtils.copyFile(deployable.getFile(),
+                    getFileHandler().append(appDir, getFileHandler().getName(deployable.getFile())),
+                    null, true);
+            }
+
+            // Deploy the cargocpc web-app by copying the WAR file
+            getResourceUtils().copyResource(RESOURCE_PATH + "cargocpc.war",
+                new File(appDir, "cargocpc.war"));
+        }
+        catch (Exception e)
+        {
+            throw new ContainerException("Failed to deploy Deployables in the "
+                + container.getName() + " [" + getHome() + "] domain directory", e);
+        }
+    }
+}

Property changes on: containers/weblogic/src/main/java/org/codehaus/cargo/container/weblogic/WebLogic9xExistingLocalConfiguration.java
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:mime-type
   + text/x-java
Added: svn:keywords
   + Date Revision Author HeadURL Id
Added: svn:eol-style
   + native

Index: containers/weblogic/src/main/java/org/codehaus/cargo/container/weblogic/WebLogic9xInstalledLocalContainer.java
===================================================================
--- containers/weblogic/src/main/java/org/codehaus/cargo/container/weblogic/WebLogic9xInstalledLocalContainer.java	(revision 0)
+++ containers/weblogic/src/main/java/org/codehaus/cargo/container/weblogic/WebLogic9xInstalledLocalContainer.java	(revision 0)
@@ -0,0 +1,67 @@
+/* 
+ * ========================================================================
+ * 
+ * Copyright 2004-2006 Vincent Massol.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ * 
+ *   http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ * 
+ * ========================================================================
+ */
+package org.codehaus.cargo.container.weblogic;
+
+import org.codehaus.cargo.container.configuration.LocalConfiguration;
+import org.codehaus.cargo.container.weblogic.internal.AbstractWebLogicInstalledLocalContainer;
+
+/**
+ * Special container support for the Bea WebLogic 8.x application server. Written for Terracotta
+ * 
+ * @author hhuynh
+ * @version $Id$
+ */
+public class WebLogic9xInstalledLocalContainer extends AbstractWebLogicInstalledLocalContainer
+{
+    /**
+     * Unique container id.
+     */
+    public static final String ID = "weblogic9x";
+
+    /**
+     * {@inheritDoc}
+     * 
+     * @see AbstractWebLogicInstalledLocalContainer#AbstractInstalledLocalContainer(org.codehaus.cargo.container.configuration.LocalConfiguration)
+     */
+    public WebLogic9xInstalledLocalContainer(LocalConfiguration configuration)
+    {
+        super(configuration);
+    }
+
+    /**
+     * {@inheritDoc}
+     * 
+     * @see org.codehaus.cargo.container.Container#getName()
+     */
+    public final String getName()
+    {
+        return "WebLogic 9.x";
+    }
+
+    /**
+     * {@inheritDoc}
+     * 
+     * @see org.codehaus.cargo.container.Container#getId()
+     */
+    public final String getId()
+    {
+        return ID;
+    }
+}

Property changes on: containers/weblogic/src/main/java/org/codehaus/cargo/container/weblogic/WebLogic9xInstalledLocalContainer.java
___________________________________________________________________
Added: svn:executable
   + *
Added: svn:mime-type
   + text/x-java
Added: svn:keywords
   + Date Revision Author HeadURL Id
Added: svn:eol-style
   + native

Index: containers/weblogic/src/main/java/org/codehaus/cargo/container/weblogic/internal/AbstractWebLogicInstalledLocalContainer.java
===================================================================
--- containers/weblogic/src/main/java/org/codehaus/cargo/container/weblogic/internal/AbstractWebLogicInstalledLocalContainer.java	(revision 1546)
+++ containers/weblogic/src/main/java/org/codehaus/cargo/container/weblogic/internal/AbstractWebLogicInstalledLocalContainer.java	(working copy)
@@ -22,6 +22,8 @@
  */
 package org.codehaus.cargo.container.weblogic.internal;
 
+import java.io.File;
+
 import org.apache.tools.ant.taskdefs.Java;
 import org.apache.tools.ant.types.Path;
 import org.codehaus.cargo.container.ContainerCapability;
@@ -33,15 +35,13 @@
 import org.codehaus.cargo.container.spi.AbstractInstalledLocalContainer;
 import org.codehaus.cargo.container.weblogic.WebLogicPropertySet;
 
-import java.io.File;
-
 /**
  * Basic support for the WebLogic application server.
- *
+ * 
  * @version $Id$
  */
-public abstract class AbstractWebLogicInstalledLocalContainer
-    extends AbstractInstalledLocalContainer
+public abstract class AbstractWebLogicInstalledLocalContainer extends
+    AbstractInstalledLocalContainer
 {
     /**
      * The Bea home directory.
@@ -55,6 +55,7 @@
 
     /**
      * {@inheritDoc}
+     * 
      * @see AbstractInstalledLocalContainer#AbstractInstalledLocalContainer(LocalConfiguration)
      */
     public AbstractWebLogicInstalledLocalContainer(LocalConfiguration configuration)
@@ -64,7 +65,7 @@
 
     /**
      * Sets the Bea home directory.
-     *
+     * 
      * @param beaHome The BEA home directory
      */
     public final void setBeaHome(String beaHome)
@@ -74,6 +75,7 @@
 
     /**
      * {@inheritDoc}
+     * 
      * @see org.codehaus.cargo.container.Container#getCapability()
      */
     public ContainerCapability getCapability()
@@ -100,8 +102,14 @@
         }
     }
 
+    protected void addToClassPath(Path classpath)
+    {
+        //
+    }
+
     /**
      * {@inheritDoc}
+     * 
      * @see AbstractInstalledLocalContainer#doStart(Java)
      */
     public final void doStart(Java java) throws Exception
@@ -122,10 +130,10 @@
 
         // Note: The "=" in the call below is on purpose. It is left so that
         // we end up with:
-        //   -Djava.security.policy==./server/lib/weblogic.policy
+        // -Djava.security.policy==./server/lib/weblogic.policy
         // (otherwise, we would end up with:
-        //   -Djava.security.policy=./server/lib/weblogic.policy, which
-        //  will not add to the security policy but instead replace it).
+        // -Djava.security.policy=./server/lib/weblogic.policy, which
+        // will not add to the security policy but instead replace it).
         java.addSysproperty(getAntUtils().createSysProperty("java.security.policy",
             "=./server/lib/weblogic.policy"));
 
@@ -138,6 +146,9 @@
         // log4j configurations, etc. This is why we're adding it here.
         classpath.createPathElement().setLocation(new File(getConfiguration().getHome()));
 
+        // Terracotta: extra jars that new version might need
+        addToClassPath(classpath);
+
         // Add the tools jar to the classpath so deployment will succeed due to appc compiles
         addToolsJarToClasspath(classpath);
 
@@ -148,10 +159,11 @@
     }
 
     /**
-     * {@inheritDoc}
+     * Terracotta: take out 'final' so we can override it {@inheritDoc}
+     * 
      * @see AbstractInstalledLocalContainer#doStop(Java)
      */
-    public final void doStop(Java java) throws Exception
+    public void doStop(Java java) throws Exception
     {
         File serverDir = new File(this.getHome(), "server");
 
@@ -159,10 +171,13 @@
         classpath.createPathElement().setLocation(new File(serverDir, "lib/weblogic_sp.jar"));
         classpath.createPathElement().setLocation(new File(serverDir, "lib/weblogic.jar"));
 
+        // Terracotta: extra jars that new version might need
+        addToClassPath(classpath);
+
         java.setClassname("weblogic.Admin");
         java.createArg().setValue("-url");
-        java.createArg().setValue("t3://localhost:"
-            + getConfiguration().getPropertyValue(ServletPropertySet.PORT));
+        java.createArg().setValue(
+            "t3://localhost:" + getConfiguration().getPropertyValue(ServletPropertySet.PORT));
         java.createArg().setValue("-username");
         java.createArg().setValue(
             getConfiguration().getPropertyValue(WebLogicPropertySet.ADMIN_USER));
Index: containers/weblogic/src/main/java/org/codehaus/cargo/container/weblogic/WebLogicPropertySet.java
===================================================================
--- containers/weblogic/src/main/java/org/codehaus/cargo/container/weblogic/WebLogicPropertySet.java	(revision 1546)
+++ containers/weblogic/src/main/java/org/codehaus/cargo/container/weblogic/WebLogicPropertySet.java	(working copy)
@@ -40,4 +40,9 @@
      * WebLogic server name.
      */
     String SERVER = "cargo.weblogic.server";
+    
+    /**
+     * Weblogic version
+     */
+    String VERSION = "version";
 }
